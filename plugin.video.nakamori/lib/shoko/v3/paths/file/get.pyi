# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from lib.shoko.v3 import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401

from lib.shoko.v3.lib.shoko.v3.models.list_result_shoko_file import ListResultShokoFile
from lib.shoko.v3.lib.shoko.v3.models.common_include_only_filter import CommonIncludeOnlyFilter
from lib.shoko.v3.lib.shoko.v3.models.common_data_source import CommonDataSource

# Query params


class PageSizeSchema(
    schemas.Int32Schema
):
    pass


class PageSchema(
    schemas.Int32Schema
):
    pass
IncludeMissingSchema = CommonIncludeOnlyFilter
IncludeIgnoredSchema = CommonIncludeOnlyFilter
IncludeVariationsSchema = CommonIncludeOnlyFilter
IncludeDuplicatesSchema = CommonIncludeOnlyFilter
IncludeUnrecognizedSchema = CommonIncludeOnlyFilter
IncludeLinkedSchema = CommonIncludeOnlyFilter
IncludeViewedSchema = CommonIncludeOnlyFilter
IncludeWatchedSchema = CommonIncludeOnlyFilter


class SortOrderSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.StrSchema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SortOrderSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class IncludeDataFromSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['CommonDataSource']:
            return CommonDataSource

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple['CommonDataSource'], typing.List['CommonDataSource']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'IncludeDataFromSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'CommonDataSource':
        return super().__getitem__(i)
IncludeMediaInfoSchema = schemas.BoolSchema
IncludeXRefsSchema = schemas.BoolSchema
SearchSchema = schemas.StrSchema
FuzzySchema = schemas.BoolSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'pageSize': typing.Union[PageSizeSchema, decimal.Decimal, int, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'includeMissing': typing.Union[IncludeMissingSchema, ],
        'includeIgnored': typing.Union[IncludeIgnoredSchema, ],
        'includeVariations': typing.Union[IncludeVariationsSchema, ],
        'includeDuplicates': typing.Union[IncludeDuplicatesSchema, ],
        'includeUnrecognized': typing.Union[IncludeUnrecognizedSchema, ],
        'includeLinked': typing.Union[IncludeLinkedSchema, ],
        'includeViewed': typing.Union[IncludeViewedSchema, ],
        'includeWatched': typing.Union[IncludeWatchedSchema, ],
        'sortOrder': typing.Union[SortOrderSchema, list, tuple, ],
        'includeDataFrom': typing.Union[IncludeDataFromSchema, list, tuple, ],
        'includeMediaInfo': typing.Union[IncludeMediaInfoSchema, bool, ],
        'includeXRefs': typing.Union[IncludeXRefsSchema, bool, ],
        'search': typing.Union[SearchSchema, str, ],
        'fuzzy': typing.Union[FuzzySchema, bool, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_page_size = api_client.QueryParameter(
    name="pageSize",
    style=api_client.ParameterStyle.FORM,
    schema=PageSizeSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_include_missing = api_client.QueryParameter(
    name="includeMissing",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeMissingSchema,
    explode=True,
)
request_query_include_ignored = api_client.QueryParameter(
    name="includeIgnored",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeIgnoredSchema,
    explode=True,
)
request_query_include_variations = api_client.QueryParameter(
    name="includeVariations",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeVariationsSchema,
    explode=True,
)
request_query_include_duplicates = api_client.QueryParameter(
    name="includeDuplicates",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeDuplicatesSchema,
    explode=True,
)
request_query_include_unrecognized = api_client.QueryParameter(
    name="includeUnrecognized",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeUnrecognizedSchema,
    explode=True,
)
request_query_include_linked = api_client.QueryParameter(
    name="includeLinked",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeLinkedSchema,
    explode=True,
)
request_query_include_viewed = api_client.QueryParameter(
    name="includeViewed",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeViewedSchema,
    explode=True,
)
request_query_include_watched = api_client.QueryParameter(
    name="includeWatched",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeWatchedSchema,
    explode=True,
)
request_query_sort_order = api_client.QueryParameter(
    name="sortOrder",
    style=api_client.ParameterStyle.FORM,
    schema=SortOrderSchema,
    explode=True,
)
request_query_include_data_from = api_client.QueryParameter(
    name="includeDataFrom",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeDataFromSchema,
    explode=True,
)
request_query_include_media_info = api_client.QueryParameter(
    name="includeMediaInfo",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeMediaInfoSchema,
    explode=True,
)
request_query_include_x_refs = api_client.QueryParameter(
    name="includeXRefs",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeXRefsSchema,
    explode=True,
)
request_query_search = api_client.QueryParameter(
    name="search",
    style=api_client.ParameterStyle.FORM,
    schema=SearchSchema,
    explode=True,
)
request_query_fuzzy = api_client.QueryParameter(
    name="fuzzy",
    style=api_client.ParameterStyle.FORM,
    schema=FuzzySchema,
    explode=True,
)
SchemaFor200ResponseBodyTextPlain = ListResultShokoFile
SchemaFor200ResponseBodyApplicationJson = ListResultShokoFile
SchemaFor200ResponseBodyTextJson = ListResultShokoFile


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyTextPlain,
        SchemaFor200ResponseBodyApplicationJson,
        SchemaFor200ResponseBodyTextJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'text/plain': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextPlain),
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
        'text/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyTextJson),
    },
)
_all_accept_content_types = (
    'text/plain',
    'application/json',
    'text/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _file_get_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _file_get_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _file_get_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _file_get_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Get or search through the files accessible to the current user.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_page_size,
            request_query_page,
            request_query_include_missing,
            request_query_include_ignored,
            request_query_include_variations,
            request_query_include_duplicates,
            request_query_include_unrecognized,
            request_query_include_linked,
            request_query_include_viewed,
            request_query_include_watched,
            request_query_sort_order,
            request_query_include_data_from,
            request_query_include_media_info,
            request_query_include_x_refs,
            request_query_search,
            request_query_fuzzy,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class FileGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def file_get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def file_get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def file_get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def file_get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._file_get_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._file_get_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


