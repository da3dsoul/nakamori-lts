# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class ServerHashes(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class ED2K(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ED2K':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class SHA1(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'SHA1':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class CRC32(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'CRC32':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class MD5(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'MD5':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "ED2K": ED2K,
                "SHA1": SHA1,
                "CRC32": CRC32,
                "MD5": MD5,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ED2K"]) -> MetaOapg.properties.ED2K: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SHA1"]) -> MetaOapg.properties.SHA1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CRC32"]) -> MetaOapg.properties.CRC32: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MD5"]) -> MetaOapg.properties.MD5: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ED2K"], typing_extensions.Literal["SHA1"], typing_extensions.Literal["CRC32"], typing_extensions.Literal["MD5"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ED2K"]) -> typing.Union[MetaOapg.properties.ED2K, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SHA1"]) -> typing.Union[MetaOapg.properties.SHA1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CRC32"]) -> typing.Union[MetaOapg.properties.CRC32, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MD5"]) -> typing.Union[MetaOapg.properties.MD5, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ED2K"], typing_extensions.Literal["SHA1"], typing_extensions.Literal["CRC32"], typing_extensions.Literal["MD5"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ED2K: typing.Union[MetaOapg.properties.ED2K, None, str, schemas.Unset] = schemas.unset,
        SHA1: typing.Union[MetaOapg.properties.SHA1, None, str, schemas.Unset] = schemas.unset,
        CRC32: typing.Union[MetaOapg.properties.CRC32, None, str, schemas.Unset] = schemas.unset,
        MD5: typing.Union[MetaOapg.properties.MD5, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ServerHashes':
        return super().__new__(
            cls,
            *_args,
            ED2K=ED2K,
            SHA1=SHA1,
            CRC32=CRC32,
            MD5=MD5,
            _configuration=_configuration,
        )
