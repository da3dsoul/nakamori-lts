# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class DashboardSeriesSummary(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            Series = schemas.Int32Schema
            OVA = schemas.Int32Schema
            Movie = schemas.Int32Schema
            Special = schemas.Int32Schema
            Web = schemas.Int32Schema
            Other = schemas.Int32Schema
            _none = schemas.Int32Schema
            __annotations__ = {
                "Series": Series,
                "OVA": OVA,
                "Movie": Movie,
                "Special": Special,
                "Web": Web,
                "Other": Other,
                "None": _none,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Series"]) -> MetaOapg.properties.Series: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OVA"]) -> MetaOapg.properties.OVA: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Movie"]) -> MetaOapg.properties.Movie: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Special"]) -> MetaOapg.properties.Special: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Web"]) -> MetaOapg.properties.Web: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Other"]) -> MetaOapg.properties.Other: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["None"]) -> MetaOapg.properties._none: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Series"], typing_extensions.Literal["OVA"], typing_extensions.Literal["Movie"], typing_extensions.Literal["Special"], typing_extensions.Literal["Web"], typing_extensions.Literal["Other"], typing_extensions.Literal["None"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Series"]) -> typing.Union[MetaOapg.properties.Series, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OVA"]) -> typing.Union[MetaOapg.properties.OVA, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Movie"]) -> typing.Union[MetaOapg.properties.Movie, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Special"]) -> typing.Union[MetaOapg.properties.Special, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Web"]) -> typing.Union[MetaOapg.properties.Web, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Other"]) -> typing.Union[MetaOapg.properties.Other, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["None"]) -> typing.Union[MetaOapg.properties._none, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Series"], typing_extensions.Literal["OVA"], typing_extensions.Literal["Movie"], typing_extensions.Literal["Special"], typing_extensions.Literal["Web"], typing_extensions.Literal["Other"], typing_extensions.Literal["None"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Series: typing.Union[MetaOapg.properties.Series, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        OVA: typing.Union[MetaOapg.properties.OVA, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Movie: typing.Union[MetaOapg.properties.Movie, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Special: typing.Union[MetaOapg.properties.Special, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Web: typing.Union[MetaOapg.properties.Web, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Other: typing.Union[MetaOapg.properties.Other, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DashboardSeriesSummary':
        return super().__new__(
            cls,
            *_args,
            Series=Series,
            OVA=OVA,
            Movie=Movie,
            Special=Special,
            Web=Web,
            Other=Other,
            _configuration=_configuration,
        )
