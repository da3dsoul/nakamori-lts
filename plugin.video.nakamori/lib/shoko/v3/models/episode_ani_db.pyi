# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class EpisodeAniDB(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    AniDB specific data for an Episode
    """


    class MetaOapg:
        
        class properties:
            ID = schemas.Int32Schema
            Type = schemas.StrSchema
            EpisodeNumber = schemas.Int32Schema
            
            
            class AirDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AirDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Titles(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CommonTitle']:
                        return CommonTitle
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Titles':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def Rating() -> typing.Type['CommonRating']:
                return CommonRating
            __annotations__ = {
                "ID": ID,
                "Type": Type,
                "EpisodeNumber": EpisodeNumber,
                "AirDate": AirDate,
                "Titles": Titles,
                "Description": Description,
                "Rating": Rating,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EpisodeNumber"]) -> MetaOapg.properties.EpisodeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AirDate"]) -> MetaOapg.properties.AirDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Titles"]) -> MetaOapg.properties.Titles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Rating"]) -> 'CommonRating': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ID"], typing_extensions.Literal["Type"], typing_extensions.Literal["EpisodeNumber"], typing_extensions.Literal["AirDate"], typing_extensions.Literal["Titles"], typing_extensions.Literal["Description"], typing_extensions.Literal["Rating"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> typing.Union[MetaOapg.properties.Type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EpisodeNumber"]) -> typing.Union[MetaOapg.properties.EpisodeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AirDate"]) -> typing.Union[MetaOapg.properties.AirDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Titles"]) -> typing.Union[MetaOapg.properties.Titles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> typing.Union[MetaOapg.properties.Description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Rating"]) -> typing.Union['CommonRating', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ID"], typing_extensions.Literal["Type"], typing_extensions.Literal["EpisodeNumber"], typing_extensions.Literal["AirDate"], typing_extensions.Literal["Titles"], typing_extensions.Literal["Description"], typing_extensions.Literal["Rating"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ID: typing.Union[MetaOapg.properties.ID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Type: typing.Union[MetaOapg.properties.Type, str, schemas.Unset] = schemas.unset,
        EpisodeNumber: typing.Union[MetaOapg.properties.EpisodeNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        AirDate: typing.Union[MetaOapg.properties.AirDate, None, str, datetime, schemas.Unset] = schemas.unset,
        Titles: typing.Union[MetaOapg.properties.Titles, list, tuple, None, schemas.Unset] = schemas.unset,
        Description: typing.Union[MetaOapg.properties.Description, None, str, schemas.Unset] = schemas.unset,
        Rating: typing.Union['CommonRating', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'EpisodeAniDB':
        return super().__new__(
            cls,
            *_args,
            ID=ID,
            Type=Type,
            EpisodeNumber=EpisodeNumber,
            AirDate=AirDate,
            Titles=Titles,
            Description=Description,
            Rating=Rating,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.common_rating import CommonRating
from lib.shoko.v3.lib.shoko.v3.models.common_title import CommonTitle
