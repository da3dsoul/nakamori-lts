# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class CommonComponentVersionSet(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def Server() -> typing.Type['CommonComponentVersion']:
                return CommonComponentVersion
        
            @staticmethod
            def Commons() -> typing.Type['CommonComponentVersion']:
                return CommonComponentVersion
        
            @staticmethod
            def Models() -> typing.Type['CommonComponentVersion']:
                return CommonComponentVersion
        
            @staticmethod
            def MediaInfo() -> typing.Type['CommonComponentVersion']:
                return CommonComponentVersion
        
            @staticmethod
            def WebUI() -> typing.Type['CommonComponentVersion']:
                return CommonComponentVersion
            __annotations__ = {
                "Server": Server,
                "Commons": Commons,
                "Models": Models,
                "MediaInfo": MediaInfo,
                "WebUI": WebUI,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Server"]) -> 'CommonComponentVersion': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Commons"]) -> 'CommonComponentVersion': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Models"]) -> 'CommonComponentVersion': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MediaInfo"]) -> 'CommonComponentVersion': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["WebUI"]) -> 'CommonComponentVersion': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Server"], typing_extensions.Literal["Commons"], typing_extensions.Literal["Models"], typing_extensions.Literal["MediaInfo"], typing_extensions.Literal["WebUI"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Server"]) -> typing.Union['CommonComponentVersion', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Commons"]) -> typing.Union['CommonComponentVersion', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Models"]) -> typing.Union['CommonComponentVersion', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MediaInfo"]) -> typing.Union['CommonComponentVersion', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["WebUI"]) -> typing.Union['CommonComponentVersion', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Server"], typing_extensions.Literal["Commons"], typing_extensions.Literal["Models"], typing_extensions.Literal["MediaInfo"], typing_extensions.Literal["WebUI"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Server: typing.Union['CommonComponentVersion', schemas.Unset] = schemas.unset,
        Commons: typing.Union['CommonComponentVersion', schemas.Unset] = schemas.unset,
        Models: typing.Union['CommonComponentVersion', schemas.Unset] = schemas.unset,
        MediaInfo: typing.Union['CommonComponentVersion', schemas.Unset] = schemas.unset,
        WebUI: typing.Union['CommonComponentVersion', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CommonComponentVersionSet':
        return super().__new__(
            cls,
            *_args,
            Server=Server,
            Commons=Commons,
            Models=Models,
            MediaInfo=MediaInfo,
            WebUI=WebUI,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.common_component_version import CommonComponentVersion
