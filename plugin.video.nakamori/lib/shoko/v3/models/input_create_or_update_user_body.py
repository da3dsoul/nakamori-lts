# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class InputCreateOrUpdateUserBody(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class Username(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Username':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class IsAdmin(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'IsAdmin':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class CommunitySites(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EnumsCommunitySites']:
                        return EnumsCommunitySites
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'CommunitySites':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class RestrictedTags(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'RestrictedTags':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Avatar(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Avatar':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "Username": Username,
                "IsAdmin": IsAdmin,
                "CommunitySites": CommunitySites,
                "RestrictedTags": RestrictedTags,
                "Avatar": Avatar,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Username"]) -> MetaOapg.properties.Username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsAdmin"]) -> MetaOapg.properties.IsAdmin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CommunitySites"]) -> MetaOapg.properties.CommunitySites: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RestrictedTags"]) -> MetaOapg.properties.RestrictedTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Avatar"]) -> MetaOapg.properties.Avatar: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Username"], typing_extensions.Literal["IsAdmin"], typing_extensions.Literal["CommunitySites"], typing_extensions.Literal["RestrictedTags"], typing_extensions.Literal["Avatar"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Username"]) -> typing.Union[MetaOapg.properties.Username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsAdmin"]) -> typing.Union[MetaOapg.properties.IsAdmin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CommunitySites"]) -> typing.Union[MetaOapg.properties.CommunitySites, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RestrictedTags"]) -> typing.Union[MetaOapg.properties.RestrictedTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Avatar"]) -> typing.Union[MetaOapg.properties.Avatar, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Username"], typing_extensions.Literal["IsAdmin"], typing_extensions.Literal["CommunitySites"], typing_extensions.Literal["RestrictedTags"], typing_extensions.Literal["Avatar"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Username: typing.Union[MetaOapg.properties.Username, None, str, schemas.Unset] = schemas.unset,
        IsAdmin: typing.Union[MetaOapg.properties.IsAdmin, None, bool, schemas.Unset] = schemas.unset,
        CommunitySites: typing.Union[MetaOapg.properties.CommunitySites, list, tuple, None, schemas.Unset] = schemas.unset,
        RestrictedTags: typing.Union[MetaOapg.properties.RestrictedTags, list, tuple, None, schemas.Unset] = schemas.unset,
        Avatar: typing.Union[MetaOapg.properties.Avatar, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'InputCreateOrUpdateUserBody':
        return super().__new__(
            cls,
            *_args,
            Username=Username,
            IsAdmin=IsAdmin,
            CommunitySites=CommunitySites,
            RestrictedTags=RestrictedTags,
            Avatar=Avatar,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.enums_community_sites import EnumsCommunitySites
