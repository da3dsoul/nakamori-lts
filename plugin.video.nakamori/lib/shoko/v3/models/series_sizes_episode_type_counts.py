# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class SeriesSizesEpisodeTypeCounts(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Lists the count of each type of episode.
    """


    class MetaOapg:
        
        class properties:
            Unknown = schemas.Int32Schema
            Episodes = schemas.Int32Schema
            Specials = schemas.Int32Schema
            Credits = schemas.Int32Schema
            Trailers = schemas.Int32Schema
            Parodies = schemas.Int32Schema
            Others = schemas.Int32Schema
            __annotations__ = {
                "Unknown": Unknown,
                "Episodes": Episodes,
                "Specials": Specials,
                "Credits": Credits,
                "Trailers": Trailers,
                "Parodies": Parodies,
                "Others": Others,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Unknown"]) -> MetaOapg.properties.Unknown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Episodes"]) -> MetaOapg.properties.Episodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Specials"]) -> MetaOapg.properties.Specials: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Credits"]) -> MetaOapg.properties.Credits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Trailers"]) -> MetaOapg.properties.Trailers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Parodies"]) -> MetaOapg.properties.Parodies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Others"]) -> MetaOapg.properties.Others: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Unknown"], typing_extensions.Literal["Episodes"], typing_extensions.Literal["Specials"], typing_extensions.Literal["Credits"], typing_extensions.Literal["Trailers"], typing_extensions.Literal["Parodies"], typing_extensions.Literal["Others"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Unknown"]) -> typing.Union[MetaOapg.properties.Unknown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Episodes"]) -> typing.Union[MetaOapg.properties.Episodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Specials"]) -> typing.Union[MetaOapg.properties.Specials, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Credits"]) -> typing.Union[MetaOapg.properties.Credits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Trailers"]) -> typing.Union[MetaOapg.properties.Trailers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Parodies"]) -> typing.Union[MetaOapg.properties.Parodies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Others"]) -> typing.Union[MetaOapg.properties.Others, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Unknown"], typing_extensions.Literal["Episodes"], typing_extensions.Literal["Specials"], typing_extensions.Literal["Credits"], typing_extensions.Literal["Trailers"], typing_extensions.Literal["Parodies"], typing_extensions.Literal["Others"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Unknown: typing.Union[MetaOapg.properties.Unknown, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Episodes: typing.Union[MetaOapg.properties.Episodes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Specials: typing.Union[MetaOapg.properties.Specials, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Credits: typing.Union[MetaOapg.properties.Credits, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Trailers: typing.Union[MetaOapg.properties.Trailers, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Parodies: typing.Union[MetaOapg.properties.Parodies, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Others: typing.Union[MetaOapg.properties.Others, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SeriesSizesEpisodeTypeCounts':
        return super().__new__(
            cls,
            *_args,
            Unknown=Unknown,
            Episodes=Episodes,
            Specials=Specials,
            Credits=Credits,
            Trailers=Trailers,
            Parodies=Parodies,
            Others=Others,
            _configuration=_configuration,
        )
