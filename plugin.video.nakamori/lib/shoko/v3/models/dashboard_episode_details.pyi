# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class DashboardEpisodeDetails(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Episode details for displaying on the dashboard.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def IDs() -> typing.Type['DashboardEpisodeDetailsIDs']:
                return DashboardEpisodeDetailsIDs
            
            
            class Title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Title':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Number = schemas.Int32Schema
            Type = schemas.StrSchema
            
            
            class AirDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AirDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Duration = schemas.StrSchema
            
            
            class ResumePosition(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-span'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ResumePosition':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Watched(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Watched':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class SeriesTitle(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'SeriesTitle':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def SeriesPoster() -> typing.Type['CommonImage']:
                return CommonImage
            __annotations__ = {
                "IDs": IDs,
                "Title": Title,
                "Number": Number,
                "Type": Type,
                "AirDate": AirDate,
                "Duration": Duration,
                "ResumePosition": ResumePosition,
                "Watched": Watched,
                "SeriesTitle": SeriesTitle,
                "SeriesPoster": SeriesPoster,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IDs"]) -> 'DashboardEpisodeDetailsIDs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Title"]) -> MetaOapg.properties.Title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Number"]) -> MetaOapg.properties.Number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AirDate"]) -> MetaOapg.properties.AirDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Duration"]) -> MetaOapg.properties.Duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ResumePosition"]) -> MetaOapg.properties.ResumePosition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Watched"]) -> MetaOapg.properties.Watched: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SeriesTitle"]) -> MetaOapg.properties.SeriesTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SeriesPoster"]) -> 'CommonImage': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["IDs"], typing_extensions.Literal["Title"], typing_extensions.Literal["Number"], typing_extensions.Literal["Type"], typing_extensions.Literal["AirDate"], typing_extensions.Literal["Duration"], typing_extensions.Literal["ResumePosition"], typing_extensions.Literal["Watched"], typing_extensions.Literal["SeriesTitle"], typing_extensions.Literal["SeriesPoster"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IDs"]) -> typing.Union['DashboardEpisodeDetailsIDs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Title"]) -> typing.Union[MetaOapg.properties.Title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Number"]) -> typing.Union[MetaOapg.properties.Number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> typing.Union[MetaOapg.properties.Type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AirDate"]) -> typing.Union[MetaOapg.properties.AirDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Duration"]) -> typing.Union[MetaOapg.properties.Duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ResumePosition"]) -> typing.Union[MetaOapg.properties.ResumePosition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Watched"]) -> typing.Union[MetaOapg.properties.Watched, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SeriesTitle"]) -> typing.Union[MetaOapg.properties.SeriesTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SeriesPoster"]) -> typing.Union['CommonImage', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["IDs"], typing_extensions.Literal["Title"], typing_extensions.Literal["Number"], typing_extensions.Literal["Type"], typing_extensions.Literal["AirDate"], typing_extensions.Literal["Duration"], typing_extensions.Literal["ResumePosition"], typing_extensions.Literal["Watched"], typing_extensions.Literal["SeriesTitle"], typing_extensions.Literal["SeriesPoster"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        IDs: typing.Union['DashboardEpisodeDetailsIDs', schemas.Unset] = schemas.unset,
        Title: typing.Union[MetaOapg.properties.Title, None, str, schemas.Unset] = schemas.unset,
        Number: typing.Union[MetaOapg.properties.Number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Type: typing.Union[MetaOapg.properties.Type, str, schemas.Unset] = schemas.unset,
        AirDate: typing.Union[MetaOapg.properties.AirDate, None, str, datetime, schemas.Unset] = schemas.unset,
        Duration: typing.Union[MetaOapg.properties.Duration, str, schemas.Unset] = schemas.unset,
        ResumePosition: typing.Union[MetaOapg.properties.ResumePosition, None, str, schemas.Unset] = schemas.unset,
        Watched: typing.Union[MetaOapg.properties.Watched, None, str, datetime, schemas.Unset] = schemas.unset,
        SeriesTitle: typing.Union[MetaOapg.properties.SeriesTitle, None, str, schemas.Unset] = schemas.unset,
        SeriesPoster: typing.Union['CommonImage', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DashboardEpisodeDetails':
        return super().__new__(
            cls,
            *_args,
            IDs=IDs,
            Title=Title,
            Number=Number,
            Type=Type,
            AirDate=AirDate,
            Duration=Duration,
            ResumePosition=ResumePosition,
            Watched=Watched,
            SeriesTitle=SeriesTitle,
            SeriesPoster=SeriesPoster,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.common_image import CommonImage
from lib.shoko.v3.lib.shoko.v3.models.dashboard_episode_details_ids import DashboardEpisodeDetailsIDs
