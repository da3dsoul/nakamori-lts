# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class ShokoFile(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            ID = schemas.Int32Schema
            
            
            class SeriesIDs(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FileSeriesCrossReference']:
                        return FileSeriesCrossReference
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'SeriesIDs':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Size = schemas.Int64Schema
            IsVariation = schemas.BoolSchema
        
            @staticmethod
            def Hashes() -> typing.Type['ServerHashes']:
                return ServerHashes
            
            
            class Locations(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FileLocation']:
                        return FileLocation
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Locations':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Resolution(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Resolution':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Duration = schemas.StrSchema
            
            
            class ResumePosition(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-span'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ResumePosition':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Viewed(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Viewed':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Watched(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Watched':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Imported(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Imported':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Created = schemas.DateTimeSchema
            Updated = schemas.DateTimeSchema
        
            @staticmethod
            def AniDB() -> typing.Type['FileAniDB']:
                return FileAniDB
        
            @staticmethod
            def MediaInfo() -> typing.Type['ShokoMediaInfo']:
                return ShokoMediaInfo
            __annotations__ = {
                "ID": ID,
                "SeriesIDs": SeriesIDs,
                "Size": Size,
                "IsVariation": IsVariation,
                "Hashes": Hashes,
                "Locations": Locations,
                "Resolution": Resolution,
                "Duration": Duration,
                "ResumePosition": ResumePosition,
                "Viewed": Viewed,
                "Watched": Watched,
                "Imported": Imported,
                "Created": Created,
                "Updated": Updated,
                "AniDB": AniDB,
                "MediaInfo": MediaInfo,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SeriesIDs"]) -> MetaOapg.properties.SeriesIDs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Size"]) -> MetaOapg.properties.Size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsVariation"]) -> MetaOapg.properties.IsVariation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Hashes"]) -> 'ServerHashes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Locations"]) -> MetaOapg.properties.Locations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Resolution"]) -> MetaOapg.properties.Resolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Duration"]) -> MetaOapg.properties.Duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ResumePosition"]) -> MetaOapg.properties.ResumePosition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Viewed"]) -> MetaOapg.properties.Viewed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Watched"]) -> MetaOapg.properties.Watched: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Imported"]) -> MetaOapg.properties.Imported: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Created"]) -> MetaOapg.properties.Created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Updated"]) -> MetaOapg.properties.Updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AniDB"]) -> 'FileAniDB': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MediaInfo"]) -> 'ShokoMediaInfo': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ID"], typing_extensions.Literal["SeriesIDs"], typing_extensions.Literal["Size"], typing_extensions.Literal["IsVariation"], typing_extensions.Literal["Hashes"], typing_extensions.Literal["Locations"], typing_extensions.Literal["Resolution"], typing_extensions.Literal["Duration"], typing_extensions.Literal["ResumePosition"], typing_extensions.Literal["Viewed"], typing_extensions.Literal["Watched"], typing_extensions.Literal["Imported"], typing_extensions.Literal["Created"], typing_extensions.Literal["Updated"], typing_extensions.Literal["AniDB"], typing_extensions.Literal["MediaInfo"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SeriesIDs"]) -> typing.Union[MetaOapg.properties.SeriesIDs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Size"]) -> typing.Union[MetaOapg.properties.Size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsVariation"]) -> typing.Union[MetaOapg.properties.IsVariation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Hashes"]) -> typing.Union['ServerHashes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Locations"]) -> typing.Union[MetaOapg.properties.Locations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Resolution"]) -> typing.Union[MetaOapg.properties.Resolution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Duration"]) -> typing.Union[MetaOapg.properties.Duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ResumePosition"]) -> typing.Union[MetaOapg.properties.ResumePosition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Viewed"]) -> typing.Union[MetaOapg.properties.Viewed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Watched"]) -> typing.Union[MetaOapg.properties.Watched, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Imported"]) -> typing.Union[MetaOapg.properties.Imported, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Created"]) -> typing.Union[MetaOapg.properties.Created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Updated"]) -> typing.Union[MetaOapg.properties.Updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AniDB"]) -> typing.Union['FileAniDB', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MediaInfo"]) -> typing.Union['ShokoMediaInfo', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ID"], typing_extensions.Literal["SeriesIDs"], typing_extensions.Literal["Size"], typing_extensions.Literal["IsVariation"], typing_extensions.Literal["Hashes"], typing_extensions.Literal["Locations"], typing_extensions.Literal["Resolution"], typing_extensions.Literal["Duration"], typing_extensions.Literal["ResumePosition"], typing_extensions.Literal["Viewed"], typing_extensions.Literal["Watched"], typing_extensions.Literal["Imported"], typing_extensions.Literal["Created"], typing_extensions.Literal["Updated"], typing_extensions.Literal["AniDB"], typing_extensions.Literal["MediaInfo"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ID: typing.Union[MetaOapg.properties.ID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        SeriesIDs: typing.Union[MetaOapg.properties.SeriesIDs, list, tuple, None, schemas.Unset] = schemas.unset,
        Size: typing.Union[MetaOapg.properties.Size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        IsVariation: typing.Union[MetaOapg.properties.IsVariation, bool, schemas.Unset] = schemas.unset,
        Hashes: typing.Union['ServerHashes', schemas.Unset] = schemas.unset,
        Locations: typing.Union[MetaOapg.properties.Locations, list, tuple, None, schemas.Unset] = schemas.unset,
        Resolution: typing.Union[MetaOapg.properties.Resolution, None, str, schemas.Unset] = schemas.unset,
        Duration: typing.Union[MetaOapg.properties.Duration, str, schemas.Unset] = schemas.unset,
        ResumePosition: typing.Union[MetaOapg.properties.ResumePosition, None, str, schemas.Unset] = schemas.unset,
        Viewed: typing.Union[MetaOapg.properties.Viewed, None, str, datetime, schemas.Unset] = schemas.unset,
        Watched: typing.Union[MetaOapg.properties.Watched, None, str, datetime, schemas.Unset] = schemas.unset,
        Imported: typing.Union[MetaOapg.properties.Imported, None, str, datetime, schemas.Unset] = schemas.unset,
        Created: typing.Union[MetaOapg.properties.Created, str, datetime, schemas.Unset] = schemas.unset,
        Updated: typing.Union[MetaOapg.properties.Updated, str, datetime, schemas.Unset] = schemas.unset,
        AniDB: typing.Union['FileAniDB', schemas.Unset] = schemas.unset,
        MediaInfo: typing.Union['ShokoMediaInfo', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ShokoFile':
        return super().__new__(
            cls,
            *_args,
            ID=ID,
            SeriesIDs=SeriesIDs,
            Size=Size,
            IsVariation=IsVariation,
            Hashes=Hashes,
            Locations=Locations,
            Resolution=Resolution,
            Duration=Duration,
            ResumePosition=ResumePosition,
            Viewed=Viewed,
            Watched=Watched,
            Imported=Imported,
            Created=Created,
            Updated=Updated,
            AniDB=AniDB,
            MediaInfo=MediaInfo,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.file_ani_db import FileAniDB
from lib.shoko.v3.lib.shoko.v3.models.file_location import FileLocation
from lib.shoko.v3.lib.shoko.v3.models.file_series_cross_reference import FileSeriesCrossReference
from lib.shoko.v3.lib.shoko.v3.models.server_hashes import ServerHashes
from lib.shoko.v3.lib.shoko.v3.models.shoko_media_info import ShokoMediaInfo
