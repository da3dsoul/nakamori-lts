# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class MediaInfoTextStreamInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class SubTitle(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'SubTitle':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            IsExternal = schemas.BoolSchema
            
            
            class ExternalFilename(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ExternalFilename':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            ID = schemas.Int32Schema
            
            
            class UID(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'UID':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Title':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Order = schemas.Int32Schema
            IsDefault = schemas.BoolSchema
            IsForced = schemas.BoolSchema
        
            @staticmethod
            def Language() -> typing.Type['DataModelsTitleLanguage']:
                return DataModelsTitleLanguage
            
            
            class LanguageCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'LanguageCode':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def Codec() -> typing.Type['MediaInfoStreamCodecInfo']:
                return MediaInfoStreamCodecInfo
        
            @staticmethod
            def Format() -> typing.Type['MediaInfoStreamFormatInfo']:
                return MediaInfoStreamFormatInfo
            __annotations__ = {
                "SubTitle": SubTitle,
                "IsExternal": IsExternal,
                "ExternalFilename": ExternalFilename,
                "ID": ID,
                "UID": UID,
                "Title": Title,
                "Order": Order,
                "IsDefault": IsDefault,
                "IsForced": IsForced,
                "Language": Language,
                "LanguageCode": LanguageCode,
                "Codec": Codec,
                "Format": Format,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SubTitle"]) -> MetaOapg.properties.SubTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsExternal"]) -> MetaOapg.properties.IsExternal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExternalFilename"]) -> MetaOapg.properties.ExternalFilename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UID"]) -> MetaOapg.properties.UID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Title"]) -> MetaOapg.properties.Title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Order"]) -> MetaOapg.properties.Order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsDefault"]) -> MetaOapg.properties.IsDefault: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsForced"]) -> MetaOapg.properties.IsForced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Language"]) -> 'DataModelsTitleLanguage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LanguageCode"]) -> MetaOapg.properties.LanguageCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Codec"]) -> 'MediaInfoStreamCodecInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Format"]) -> 'MediaInfoStreamFormatInfo': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["SubTitle"], typing_extensions.Literal["IsExternal"], typing_extensions.Literal["ExternalFilename"], typing_extensions.Literal["ID"], typing_extensions.Literal["UID"], typing_extensions.Literal["Title"], typing_extensions.Literal["Order"], typing_extensions.Literal["IsDefault"], typing_extensions.Literal["IsForced"], typing_extensions.Literal["Language"], typing_extensions.Literal["LanguageCode"], typing_extensions.Literal["Codec"], typing_extensions.Literal["Format"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SubTitle"]) -> typing.Union[MetaOapg.properties.SubTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsExternal"]) -> typing.Union[MetaOapg.properties.IsExternal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExternalFilename"]) -> typing.Union[MetaOapg.properties.ExternalFilename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UID"]) -> typing.Union[MetaOapg.properties.UID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Title"]) -> typing.Union[MetaOapg.properties.Title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Order"]) -> typing.Union[MetaOapg.properties.Order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsDefault"]) -> typing.Union[MetaOapg.properties.IsDefault, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsForced"]) -> typing.Union[MetaOapg.properties.IsForced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Language"]) -> typing.Union['DataModelsTitleLanguage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LanguageCode"]) -> typing.Union[MetaOapg.properties.LanguageCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Codec"]) -> typing.Union['MediaInfoStreamCodecInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Format"]) -> typing.Union['MediaInfoStreamFormatInfo', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["SubTitle"], typing_extensions.Literal["IsExternal"], typing_extensions.Literal["ExternalFilename"], typing_extensions.Literal["ID"], typing_extensions.Literal["UID"], typing_extensions.Literal["Title"], typing_extensions.Literal["Order"], typing_extensions.Literal["IsDefault"], typing_extensions.Literal["IsForced"], typing_extensions.Literal["Language"], typing_extensions.Literal["LanguageCode"], typing_extensions.Literal["Codec"], typing_extensions.Literal["Format"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        SubTitle: typing.Union[MetaOapg.properties.SubTitle, None, str, schemas.Unset] = schemas.unset,
        IsExternal: typing.Union[MetaOapg.properties.IsExternal, bool, schemas.Unset] = schemas.unset,
        ExternalFilename: typing.Union[MetaOapg.properties.ExternalFilename, None, str, schemas.Unset] = schemas.unset,
        ID: typing.Union[MetaOapg.properties.ID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        UID: typing.Union[MetaOapg.properties.UID, None, str, schemas.Unset] = schemas.unset,
        Title: typing.Union[MetaOapg.properties.Title, None, str, schemas.Unset] = schemas.unset,
        Order: typing.Union[MetaOapg.properties.Order, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        IsDefault: typing.Union[MetaOapg.properties.IsDefault, bool, schemas.Unset] = schemas.unset,
        IsForced: typing.Union[MetaOapg.properties.IsForced, bool, schemas.Unset] = schemas.unset,
        Language: typing.Union['DataModelsTitleLanguage', schemas.Unset] = schemas.unset,
        LanguageCode: typing.Union[MetaOapg.properties.LanguageCode, None, str, schemas.Unset] = schemas.unset,
        Codec: typing.Union['MediaInfoStreamCodecInfo', schemas.Unset] = schemas.unset,
        Format: typing.Union['MediaInfoStreamFormatInfo', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MediaInfoTextStreamInfo':
        return super().__new__(
            cls,
            *_args,
            SubTitle=SubTitle,
            IsExternal=IsExternal,
            ExternalFilename=ExternalFilename,
            ID=ID,
            UID=UID,
            Title=Title,
            Order=Order,
            IsDefault=IsDefault,
            IsForced=IsForced,
            Language=Language,
            LanguageCode=LanguageCode,
            Codec=Codec,
            Format=Format,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.data_models_title_language import DataModelsTitleLanguage
from lib.shoko.v3.lib.shoko.v3.models.media_info_stream_codec_info import MediaInfoStreamCodecInfo
from lib.shoko.v3.lib.shoko.v3.models.media_info_stream_format_info import MediaInfoStreamFormatInfo
