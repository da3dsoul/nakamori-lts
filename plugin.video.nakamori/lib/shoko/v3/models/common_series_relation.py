# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class CommonSeriesRelation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Describes relations between two series entries.
    """


    class MetaOapg:
        required = {
            "Type",
            "Source",
        }
        
        class properties:
        
            @staticmethod
            def Type() -> typing.Type['DataModelsRelationType']:
                return DataModelsRelationType
            
            
            class Source(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
        
            @staticmethod
            def IDs() -> typing.Type['SeriesRelationRelationIDs']:
                return SeriesRelationRelationIDs
        
            @staticmethod
            def RelatedIDs() -> typing.Type['SeriesRelationRelationIDs']:
                return SeriesRelationRelationIDs
            __annotations__ = {
                "Type": Type,
                "Source": Source,
                "IDs": IDs,
                "RelatedIDs": RelatedIDs,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    Type: 'DataModelsRelationType'
    Source: MetaOapg.properties.Source
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> 'DataModelsRelationType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Source"]) -> MetaOapg.properties.Source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IDs"]) -> 'SeriesRelationRelationIDs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RelatedIDs"]) -> 'SeriesRelationRelationIDs': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Type"], typing_extensions.Literal["Source"], typing_extensions.Literal["IDs"], typing_extensions.Literal["RelatedIDs"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> 'DataModelsRelationType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Source"]) -> MetaOapg.properties.Source: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IDs"]) -> typing.Union['SeriesRelationRelationIDs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RelatedIDs"]) -> typing.Union['SeriesRelationRelationIDs', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Type"], typing_extensions.Literal["Source"], typing_extensions.Literal["IDs"], typing_extensions.Literal["RelatedIDs"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Type: 'DataModelsRelationType',
        Source: typing.Union[MetaOapg.properties.Source, str, ],
        IDs: typing.Union['SeriesRelationRelationIDs', schemas.Unset] = schemas.unset,
        RelatedIDs: typing.Union['SeriesRelationRelationIDs', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CommonSeriesRelation':
        return super().__new__(
            cls,
            *_args,
            Type=Type,
            Source=Source,
            IDs=IDs,
            RelatedIDs=RelatedIDs,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.data_models_relation_type import DataModelsRelationType
from lib.shoko.v3.lib.shoko.v3.models.series_relation_relation_ids import SeriesRelationRelationIDs
