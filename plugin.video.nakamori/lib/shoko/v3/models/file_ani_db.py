# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class FileAniDB(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    AniDB_File info
    """


    class MetaOapg:
        
        class properties:
            ID = schemas.Int32Schema
        
            @staticmethod
            def Source() -> typing.Type['ShokoFileSource']:
                return ShokoFileSource
        
            @staticmethod
            def ReleaseGroup() -> typing.Type['AniDBAniDBReleaseGroup']:
                return AniDBAniDBReleaseGroup
            
            
            class ReleaseDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ReleaseDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Version = schemas.Int32Schema
            IsDeprecated = schemas.BoolSchema
            
            
            class IsCensored(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'IsCensored':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class OriginalFileName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'OriginalFileName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            FileSize = schemas.Int64Schema
            Duration = schemas.StrSchema
            
            
            class Description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class AudioLanguages(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AudioLanguages':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class SubLanguages(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'SubLanguages':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Chaptered = schemas.BoolSchema
            Updated = schemas.DateTimeSchema
            __annotations__ = {
                "ID": ID,
                "Source": Source,
                "ReleaseGroup": ReleaseGroup,
                "ReleaseDate": ReleaseDate,
                "Version": Version,
                "IsDeprecated": IsDeprecated,
                "IsCensored": IsCensored,
                "OriginalFileName": OriginalFileName,
                "FileSize": FileSize,
                "Duration": Duration,
                "Description": Description,
                "AudioLanguages": AudioLanguages,
                "SubLanguages": SubLanguages,
                "Chaptered": Chaptered,
                "Updated": Updated,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Source"]) -> 'ShokoFileSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReleaseGroup"]) -> 'AniDBAniDBReleaseGroup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReleaseDate"]) -> MetaOapg.properties.ReleaseDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Version"]) -> MetaOapg.properties.Version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsDeprecated"]) -> MetaOapg.properties.IsDeprecated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsCensored"]) -> MetaOapg.properties.IsCensored: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OriginalFileName"]) -> MetaOapg.properties.OriginalFileName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FileSize"]) -> MetaOapg.properties.FileSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Duration"]) -> MetaOapg.properties.Duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AudioLanguages"]) -> MetaOapg.properties.AudioLanguages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SubLanguages"]) -> MetaOapg.properties.SubLanguages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Chaptered"]) -> MetaOapg.properties.Chaptered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Updated"]) -> MetaOapg.properties.Updated: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ID"], typing_extensions.Literal["Source"], typing_extensions.Literal["ReleaseGroup"], typing_extensions.Literal["ReleaseDate"], typing_extensions.Literal["Version"], typing_extensions.Literal["IsDeprecated"], typing_extensions.Literal["IsCensored"], typing_extensions.Literal["OriginalFileName"], typing_extensions.Literal["FileSize"], typing_extensions.Literal["Duration"], typing_extensions.Literal["Description"], typing_extensions.Literal["AudioLanguages"], typing_extensions.Literal["SubLanguages"], typing_extensions.Literal["Chaptered"], typing_extensions.Literal["Updated"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Source"]) -> typing.Union['ShokoFileSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReleaseGroup"]) -> typing.Union['AniDBAniDBReleaseGroup', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReleaseDate"]) -> typing.Union[MetaOapg.properties.ReleaseDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Version"]) -> typing.Union[MetaOapg.properties.Version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsDeprecated"]) -> typing.Union[MetaOapg.properties.IsDeprecated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsCensored"]) -> typing.Union[MetaOapg.properties.IsCensored, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OriginalFileName"]) -> typing.Union[MetaOapg.properties.OriginalFileName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FileSize"]) -> typing.Union[MetaOapg.properties.FileSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Duration"]) -> typing.Union[MetaOapg.properties.Duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> typing.Union[MetaOapg.properties.Description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AudioLanguages"]) -> typing.Union[MetaOapg.properties.AudioLanguages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SubLanguages"]) -> typing.Union[MetaOapg.properties.SubLanguages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Chaptered"]) -> typing.Union[MetaOapg.properties.Chaptered, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Updated"]) -> typing.Union[MetaOapg.properties.Updated, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ID"], typing_extensions.Literal["Source"], typing_extensions.Literal["ReleaseGroup"], typing_extensions.Literal["ReleaseDate"], typing_extensions.Literal["Version"], typing_extensions.Literal["IsDeprecated"], typing_extensions.Literal["IsCensored"], typing_extensions.Literal["OriginalFileName"], typing_extensions.Literal["FileSize"], typing_extensions.Literal["Duration"], typing_extensions.Literal["Description"], typing_extensions.Literal["AudioLanguages"], typing_extensions.Literal["SubLanguages"], typing_extensions.Literal["Chaptered"], typing_extensions.Literal["Updated"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ID: typing.Union[MetaOapg.properties.ID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Source: typing.Union['ShokoFileSource', schemas.Unset] = schemas.unset,
        ReleaseGroup: typing.Union['AniDBAniDBReleaseGroup', schemas.Unset] = schemas.unset,
        ReleaseDate: typing.Union[MetaOapg.properties.ReleaseDate, None, str, datetime, schemas.Unset] = schemas.unset,
        Version: typing.Union[MetaOapg.properties.Version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        IsDeprecated: typing.Union[MetaOapg.properties.IsDeprecated, bool, schemas.Unset] = schemas.unset,
        IsCensored: typing.Union[MetaOapg.properties.IsCensored, None, bool, schemas.Unset] = schemas.unset,
        OriginalFileName: typing.Union[MetaOapg.properties.OriginalFileName, None, str, schemas.Unset] = schemas.unset,
        FileSize: typing.Union[MetaOapg.properties.FileSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Duration: typing.Union[MetaOapg.properties.Duration, str, schemas.Unset] = schemas.unset,
        Description: typing.Union[MetaOapg.properties.Description, None, str, schemas.Unset] = schemas.unset,
        AudioLanguages: typing.Union[MetaOapg.properties.AudioLanguages, list, tuple, None, schemas.Unset] = schemas.unset,
        SubLanguages: typing.Union[MetaOapg.properties.SubLanguages, list, tuple, None, schemas.Unset] = schemas.unset,
        Chaptered: typing.Union[MetaOapg.properties.Chaptered, bool, schemas.Unset] = schemas.unset,
        Updated: typing.Union[MetaOapg.properties.Updated, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'FileAniDB':
        return super().__new__(
            cls,
            *_args,
            ID=ID,
            Source=Source,
            ReleaseGroup=ReleaseGroup,
            ReleaseDate=ReleaseDate,
            Version=Version,
            IsDeprecated=IsDeprecated,
            IsCensored=IsCensored,
            OriginalFileName=OriginalFileName,
            FileSize=FileSize,
            Duration=Duration,
            Description=Description,
            AudioLanguages=AudioLanguages,
            SubLanguages=SubLanguages,
            Chaptered=Chaptered,
            Updated=Updated,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.ani_db_ani_db_release_group import AniDBAniDBReleaseGroup
from lib.shoko.v3.lib.shoko.v3.models.shoko_file_source import ShokoFileSource
