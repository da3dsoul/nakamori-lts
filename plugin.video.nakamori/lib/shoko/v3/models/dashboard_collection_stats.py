# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class DashboardCollectionStats(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            FileCount = schemas.Int32Schema
            SeriesCount = schemas.Int32Schema
            GroupCount = schemas.Int32Schema
            FileSize = schemas.Int64Schema
            FinishedSeries = schemas.Int32Schema
            WatchedEpisodes = schemas.Int32Schema
            WatchedHours = schemas.Float64Schema
            PercentDuplicate = schemas.Float64Schema
            MissingEpisodes = schemas.Int32Schema
            MissingEpisodesCollecting = schemas.Int32Schema
            UnrecognizedFiles = schemas.Int32Schema
            SeriesWithMissingLinks = schemas.Int32Schema
            EpisodesWithMultipleFiles = schemas.Int32Schema
            FilesWithDuplicateLocations = schemas.Int32Schema
            __annotations__ = {
                "FileCount": FileCount,
                "SeriesCount": SeriesCount,
                "GroupCount": GroupCount,
                "FileSize": FileSize,
                "FinishedSeries": FinishedSeries,
                "WatchedEpisodes": WatchedEpisodes,
                "WatchedHours": WatchedHours,
                "PercentDuplicate": PercentDuplicate,
                "MissingEpisodes": MissingEpisodes,
                "MissingEpisodesCollecting": MissingEpisodesCollecting,
                "UnrecognizedFiles": UnrecognizedFiles,
                "SeriesWithMissingLinks": SeriesWithMissingLinks,
                "EpisodesWithMultipleFiles": EpisodesWithMultipleFiles,
                "FilesWithDuplicateLocations": FilesWithDuplicateLocations,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FileCount"]) -> MetaOapg.properties.FileCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SeriesCount"]) -> MetaOapg.properties.SeriesCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GroupCount"]) -> MetaOapg.properties.GroupCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FileSize"]) -> MetaOapg.properties.FileSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FinishedSeries"]) -> MetaOapg.properties.FinishedSeries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["WatchedEpisodes"]) -> MetaOapg.properties.WatchedEpisodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["WatchedHours"]) -> MetaOapg.properties.WatchedHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PercentDuplicate"]) -> MetaOapg.properties.PercentDuplicate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MissingEpisodes"]) -> MetaOapg.properties.MissingEpisodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MissingEpisodesCollecting"]) -> MetaOapg.properties.MissingEpisodesCollecting: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UnrecognizedFiles"]) -> MetaOapg.properties.UnrecognizedFiles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SeriesWithMissingLinks"]) -> MetaOapg.properties.SeriesWithMissingLinks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EpisodesWithMultipleFiles"]) -> MetaOapg.properties.EpisodesWithMultipleFiles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FilesWithDuplicateLocations"]) -> MetaOapg.properties.FilesWithDuplicateLocations: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["FileCount"], typing_extensions.Literal["SeriesCount"], typing_extensions.Literal["GroupCount"], typing_extensions.Literal["FileSize"], typing_extensions.Literal["FinishedSeries"], typing_extensions.Literal["WatchedEpisodes"], typing_extensions.Literal["WatchedHours"], typing_extensions.Literal["PercentDuplicate"], typing_extensions.Literal["MissingEpisodes"], typing_extensions.Literal["MissingEpisodesCollecting"], typing_extensions.Literal["UnrecognizedFiles"], typing_extensions.Literal["SeriesWithMissingLinks"], typing_extensions.Literal["EpisodesWithMultipleFiles"], typing_extensions.Literal["FilesWithDuplicateLocations"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FileCount"]) -> typing.Union[MetaOapg.properties.FileCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SeriesCount"]) -> typing.Union[MetaOapg.properties.SeriesCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GroupCount"]) -> typing.Union[MetaOapg.properties.GroupCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FileSize"]) -> typing.Union[MetaOapg.properties.FileSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FinishedSeries"]) -> typing.Union[MetaOapg.properties.FinishedSeries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["WatchedEpisodes"]) -> typing.Union[MetaOapg.properties.WatchedEpisodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["WatchedHours"]) -> typing.Union[MetaOapg.properties.WatchedHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PercentDuplicate"]) -> typing.Union[MetaOapg.properties.PercentDuplicate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MissingEpisodes"]) -> typing.Union[MetaOapg.properties.MissingEpisodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MissingEpisodesCollecting"]) -> typing.Union[MetaOapg.properties.MissingEpisodesCollecting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UnrecognizedFiles"]) -> typing.Union[MetaOapg.properties.UnrecognizedFiles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SeriesWithMissingLinks"]) -> typing.Union[MetaOapg.properties.SeriesWithMissingLinks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EpisodesWithMultipleFiles"]) -> typing.Union[MetaOapg.properties.EpisodesWithMultipleFiles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FilesWithDuplicateLocations"]) -> typing.Union[MetaOapg.properties.FilesWithDuplicateLocations, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["FileCount"], typing_extensions.Literal["SeriesCount"], typing_extensions.Literal["GroupCount"], typing_extensions.Literal["FileSize"], typing_extensions.Literal["FinishedSeries"], typing_extensions.Literal["WatchedEpisodes"], typing_extensions.Literal["WatchedHours"], typing_extensions.Literal["PercentDuplicate"], typing_extensions.Literal["MissingEpisodes"], typing_extensions.Literal["MissingEpisodesCollecting"], typing_extensions.Literal["UnrecognizedFiles"], typing_extensions.Literal["SeriesWithMissingLinks"], typing_extensions.Literal["EpisodesWithMultipleFiles"], typing_extensions.Literal["FilesWithDuplicateLocations"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        FileCount: typing.Union[MetaOapg.properties.FileCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        SeriesCount: typing.Union[MetaOapg.properties.SeriesCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        GroupCount: typing.Union[MetaOapg.properties.GroupCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        FileSize: typing.Union[MetaOapg.properties.FileSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        FinishedSeries: typing.Union[MetaOapg.properties.FinishedSeries, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        WatchedEpisodes: typing.Union[MetaOapg.properties.WatchedEpisodes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        WatchedHours: typing.Union[MetaOapg.properties.WatchedHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        PercentDuplicate: typing.Union[MetaOapg.properties.PercentDuplicate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        MissingEpisodes: typing.Union[MetaOapg.properties.MissingEpisodes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        MissingEpisodesCollecting: typing.Union[MetaOapg.properties.MissingEpisodesCollecting, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        UnrecognizedFiles: typing.Union[MetaOapg.properties.UnrecognizedFiles, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        SeriesWithMissingLinks: typing.Union[MetaOapg.properties.SeriesWithMissingLinks, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        EpisodesWithMultipleFiles: typing.Union[MetaOapg.properties.EpisodesWithMultipleFiles, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        FilesWithDuplicateLocations: typing.Union[MetaOapg.properties.FilesWithDuplicateLocations, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DashboardCollectionStats':
        return super().__new__(
            cls,
            *_args,
            FileCount=FileCount,
            SeriesCount=SeriesCount,
            GroupCount=GroupCount,
            FileSize=FileSize,
            FinishedSeries=FinishedSeries,
            WatchedEpisodes=WatchedEpisodes,
            WatchedHours=WatchedHours,
            PercentDuplicate=PercentDuplicate,
            MissingEpisodes=MissingEpisodes,
            MissingEpisodesCollecting=MissingEpisodesCollecting,
            UnrecognizedFiles=UnrecognizedFiles,
            SeriesWithMissingLinks=SeriesWithMissingLinks,
            EpisodesWithMultipleFiles=EpisodesWithMultipleFiles,
            FilesWithDuplicateLocations=FilesWithDuplicateLocations,
            _configuration=_configuration,
        )
