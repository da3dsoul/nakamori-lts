# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class SeriesResource(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A site link, as in hyperlink.
    """


    class MetaOapg:
        required = {
            "Type",
            "URL",
            "Name",
        }
        
        class properties:
            
            
            class Type(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class Name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            
            
            class URL(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            __annotations__ = {
                "Type": Type,
                "Name": Name,
                "URL": URL,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    Type: MetaOapg.properties.Type
    URL: MetaOapg.properties.URL
    Name: MetaOapg.properties.Name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["URL"]) -> MetaOapg.properties.URL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Type"], typing_extensions.Literal["URL"], typing_extensions.Literal["Name"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["URL"]) -> MetaOapg.properties.URL: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Type"], typing_extensions.Literal["URL"], typing_extensions.Literal["Name"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Type: typing.Union[MetaOapg.properties.Type, str, ],
        URL: typing.Union[MetaOapg.properties.URL, str, ],
        Name: typing.Union[MetaOapg.properties.Name, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SeriesResource':
        return super().__new__(
            cls,
            *_args,
            Type=Type,
            URL=URL,
            Name=Name,
            _configuration=_configuration,
        )
