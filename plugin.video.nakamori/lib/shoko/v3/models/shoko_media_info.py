# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class ShokoMediaInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Parsed information from a Shoko.Server.API.v3.Models.Shoko.MediaInfo.MediaContainer.
    """


    class MetaOapg:
        
        class properties:
            
            
            class Title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Title':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Duration = schemas.StrSchema
            BitRate = schemas.Int32Schema
            FrameRate = schemas.Float64Schema
            
            
            class Encoded(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Encoded':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            IsStreamable = schemas.BoolSchema
            
            
            class FileExtension(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'FileExtension':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class MediaContainer(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'MediaContainer':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            MediaContainerVersion = schemas.Int32Schema
            
            
            class Video(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MediaInfoVideoStreamInfo']:
                        return MediaInfoVideoStreamInfo
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Video':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Audio(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MediaInfoAudioStreamInfo']:
                        return MediaInfoAudioStreamInfo
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Audio':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Subtitles(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MediaInfoTextStreamInfo']:
                        return MediaInfoTextStreamInfo
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Subtitles':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Chapters(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MediaInfoChapterInfo']:
                        return MediaInfoChapterInfo
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Chapters':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "Title": Title,
                "Duration": Duration,
                "BitRate": BitRate,
                "FrameRate": FrameRate,
                "Encoded": Encoded,
                "IsStreamable": IsStreamable,
                "FileExtension": FileExtension,
                "MediaContainer": MediaContainer,
                "MediaContainerVersion": MediaContainerVersion,
                "Video": Video,
                "Audio": Audio,
                "Subtitles": Subtitles,
                "Chapters": Chapters,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Title"]) -> MetaOapg.properties.Title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Duration"]) -> MetaOapg.properties.Duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BitRate"]) -> MetaOapg.properties.BitRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FrameRate"]) -> MetaOapg.properties.FrameRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Encoded"]) -> MetaOapg.properties.Encoded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsStreamable"]) -> MetaOapg.properties.IsStreamable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FileExtension"]) -> MetaOapg.properties.FileExtension: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MediaContainer"]) -> MetaOapg.properties.MediaContainer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MediaContainerVersion"]) -> MetaOapg.properties.MediaContainerVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Video"]) -> MetaOapg.properties.Video: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Audio"]) -> MetaOapg.properties.Audio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Subtitles"]) -> MetaOapg.properties.Subtitles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Chapters"]) -> MetaOapg.properties.Chapters: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Title"], typing_extensions.Literal["Duration"], typing_extensions.Literal["BitRate"], typing_extensions.Literal["FrameRate"], typing_extensions.Literal["Encoded"], typing_extensions.Literal["IsStreamable"], typing_extensions.Literal["FileExtension"], typing_extensions.Literal["MediaContainer"], typing_extensions.Literal["MediaContainerVersion"], typing_extensions.Literal["Video"], typing_extensions.Literal["Audio"], typing_extensions.Literal["Subtitles"], typing_extensions.Literal["Chapters"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Title"]) -> typing.Union[MetaOapg.properties.Title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Duration"]) -> typing.Union[MetaOapg.properties.Duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BitRate"]) -> typing.Union[MetaOapg.properties.BitRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FrameRate"]) -> typing.Union[MetaOapg.properties.FrameRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Encoded"]) -> typing.Union[MetaOapg.properties.Encoded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsStreamable"]) -> typing.Union[MetaOapg.properties.IsStreamable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FileExtension"]) -> typing.Union[MetaOapg.properties.FileExtension, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MediaContainer"]) -> typing.Union[MetaOapg.properties.MediaContainer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MediaContainerVersion"]) -> typing.Union[MetaOapg.properties.MediaContainerVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Video"]) -> typing.Union[MetaOapg.properties.Video, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Audio"]) -> typing.Union[MetaOapg.properties.Audio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Subtitles"]) -> typing.Union[MetaOapg.properties.Subtitles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Chapters"]) -> typing.Union[MetaOapg.properties.Chapters, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Title"], typing_extensions.Literal["Duration"], typing_extensions.Literal["BitRate"], typing_extensions.Literal["FrameRate"], typing_extensions.Literal["Encoded"], typing_extensions.Literal["IsStreamable"], typing_extensions.Literal["FileExtension"], typing_extensions.Literal["MediaContainer"], typing_extensions.Literal["MediaContainerVersion"], typing_extensions.Literal["Video"], typing_extensions.Literal["Audio"], typing_extensions.Literal["Subtitles"], typing_extensions.Literal["Chapters"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Title: typing.Union[MetaOapg.properties.Title, None, str, schemas.Unset] = schemas.unset,
        Duration: typing.Union[MetaOapg.properties.Duration, str, schemas.Unset] = schemas.unset,
        BitRate: typing.Union[MetaOapg.properties.BitRate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        FrameRate: typing.Union[MetaOapg.properties.FrameRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Encoded: typing.Union[MetaOapg.properties.Encoded, None, str, datetime, schemas.Unset] = schemas.unset,
        IsStreamable: typing.Union[MetaOapg.properties.IsStreamable, bool, schemas.Unset] = schemas.unset,
        FileExtension: typing.Union[MetaOapg.properties.FileExtension, None, str, schemas.Unset] = schemas.unset,
        MediaContainer: typing.Union[MetaOapg.properties.MediaContainer, None, str, schemas.Unset] = schemas.unset,
        MediaContainerVersion: typing.Union[MetaOapg.properties.MediaContainerVersion, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Video: typing.Union[MetaOapg.properties.Video, list, tuple, None, schemas.Unset] = schemas.unset,
        Audio: typing.Union[MetaOapg.properties.Audio, list, tuple, None, schemas.Unset] = schemas.unset,
        Subtitles: typing.Union[MetaOapg.properties.Subtitles, list, tuple, None, schemas.Unset] = schemas.unset,
        Chapters: typing.Union[MetaOapg.properties.Chapters, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ShokoMediaInfo':
        return super().__new__(
            cls,
            *_args,
            Title=Title,
            Duration=Duration,
            BitRate=BitRate,
            FrameRate=FrameRate,
            Encoded=Encoded,
            IsStreamable=IsStreamable,
            FileExtension=FileExtension,
            MediaContainer=MediaContainer,
            MediaContainerVersion=MediaContainerVersion,
            Video=Video,
            Audio=Audio,
            Subtitles=Subtitles,
            Chapters=Chapters,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.media_info_audio_stream_info import MediaInfoAudioStreamInfo
from lib.shoko.v3.lib.shoko.v3.models.media_info_chapter_info import MediaInfoChapterInfo
from lib.shoko.v3.lib.shoko.v3.models.media_info_text_stream_info import MediaInfoTextStreamInfo
from lib.shoko.v3.lib.shoko.v3.models.media_info_video_stream_info import MediaInfoVideoStreamInfo
