# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class CommonComponentVersion(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class Version(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Version':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Commit(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Commit':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def ReleaseChannel() -> typing.Type['CommonReleaseChannel']:
                return CommonReleaseChannel
            
            
            class ReleaseDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ReleaseDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Tag(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Tag':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "Version": Version,
                "Commit": Commit,
                "ReleaseChannel": ReleaseChannel,
                "ReleaseDate": ReleaseDate,
                "Tag": Tag,
                "Description": Description,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Version"]) -> MetaOapg.properties.Version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Commit"]) -> MetaOapg.properties.Commit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReleaseChannel"]) -> 'CommonReleaseChannel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReleaseDate"]) -> MetaOapg.properties.ReleaseDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Tag"]) -> MetaOapg.properties.Tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Version"], typing_extensions.Literal["Commit"], typing_extensions.Literal["ReleaseChannel"], typing_extensions.Literal["ReleaseDate"], typing_extensions.Literal["Tag"], typing_extensions.Literal["Description"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Version"]) -> typing.Union[MetaOapg.properties.Version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Commit"]) -> typing.Union[MetaOapg.properties.Commit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReleaseChannel"]) -> typing.Union['CommonReleaseChannel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReleaseDate"]) -> typing.Union[MetaOapg.properties.ReleaseDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Tag"]) -> typing.Union[MetaOapg.properties.Tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> typing.Union[MetaOapg.properties.Description, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Version"], typing_extensions.Literal["Commit"], typing_extensions.Literal["ReleaseChannel"], typing_extensions.Literal["ReleaseDate"], typing_extensions.Literal["Tag"], typing_extensions.Literal["Description"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Version: typing.Union[MetaOapg.properties.Version, None, str, schemas.Unset] = schemas.unset,
        Commit: typing.Union[MetaOapg.properties.Commit, None, str, schemas.Unset] = schemas.unset,
        ReleaseChannel: typing.Union['CommonReleaseChannel', schemas.Unset] = schemas.unset,
        ReleaseDate: typing.Union[MetaOapg.properties.ReleaseDate, None, str, datetime, schemas.Unset] = schemas.unset,
        Tag: typing.Union[MetaOapg.properties.Tag, None, str, schemas.Unset] = schemas.unset,
        Description: typing.Union[MetaOapg.properties.Description, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CommonComponentVersion':
        return super().__new__(
            cls,
            *_args,
            Version=Version,
            Commit=Commit,
            ReleaseChannel=ReleaseChannel,
            ReleaseDate=ReleaseDate,
            Tag=Tag,
            Description=Description,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.common_release_channel import CommonReleaseChannel
