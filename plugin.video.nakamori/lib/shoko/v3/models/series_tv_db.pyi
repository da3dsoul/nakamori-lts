# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class SeriesTvDB(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The TvDB Data model for series
    """


    class MetaOapg:
        required = {
            "Title",
            "ID",
        }
        
        class properties:
            ID = schemas.Int32Schema
            
            
            class Title(
                schemas.StrSchema
            ):
                pass
            
            
            class AirDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AirDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class EndDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'EndDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Season(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Season':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Posters(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CommonImage']:
                        return CommonImage
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Posters':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Fanarts(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CommonImage']:
                        return CommonImage
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Fanarts':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Banners(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CommonImage']:
                        return CommonImage
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Banners':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def Rating() -> typing.Type['CommonRating']:
                return CommonRating
            __annotations__ = {
                "ID": ID,
                "Title": Title,
                "AirDate": AirDate,
                "EndDate": EndDate,
                "Description": Description,
                "Season": Season,
                "Posters": Posters,
                "Fanarts": Fanarts,
                "Banners": Banners,
                "Rating": Rating,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    Title: MetaOapg.properties.Title
    ID: MetaOapg.properties.ID
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Title"]) -> MetaOapg.properties.Title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AirDate"]) -> MetaOapg.properties.AirDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EndDate"]) -> MetaOapg.properties.EndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Season"]) -> MetaOapg.properties.Season: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Posters"]) -> MetaOapg.properties.Posters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Fanarts"]) -> MetaOapg.properties.Fanarts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Banners"]) -> MetaOapg.properties.Banners: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Rating"]) -> 'CommonRating': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Title"], typing_extensions.Literal["ID"], typing_extensions.Literal["AirDate"], typing_extensions.Literal["EndDate"], typing_extensions.Literal["Description"], typing_extensions.Literal["Season"], typing_extensions.Literal["Posters"], typing_extensions.Literal["Fanarts"], typing_extensions.Literal["Banners"], typing_extensions.Literal["Rating"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Title"]) -> MetaOapg.properties.Title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AirDate"]) -> typing.Union[MetaOapg.properties.AirDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EndDate"]) -> typing.Union[MetaOapg.properties.EndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> typing.Union[MetaOapg.properties.Description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Season"]) -> typing.Union[MetaOapg.properties.Season, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Posters"]) -> typing.Union[MetaOapg.properties.Posters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Fanarts"]) -> typing.Union[MetaOapg.properties.Fanarts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Banners"]) -> typing.Union[MetaOapg.properties.Banners, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Rating"]) -> typing.Union['CommonRating', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Title"], typing_extensions.Literal["ID"], typing_extensions.Literal["AirDate"], typing_extensions.Literal["EndDate"], typing_extensions.Literal["Description"], typing_extensions.Literal["Season"], typing_extensions.Literal["Posters"], typing_extensions.Literal["Fanarts"], typing_extensions.Literal["Banners"], typing_extensions.Literal["Rating"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Title: typing.Union[MetaOapg.properties.Title, str, ],
        ID: typing.Union[MetaOapg.properties.ID, decimal.Decimal, int, ],
        AirDate: typing.Union[MetaOapg.properties.AirDate, None, str, datetime, schemas.Unset] = schemas.unset,
        EndDate: typing.Union[MetaOapg.properties.EndDate, None, str, datetime, schemas.Unset] = schemas.unset,
        Description: typing.Union[MetaOapg.properties.Description, None, str, schemas.Unset] = schemas.unset,
        Season: typing.Union[MetaOapg.properties.Season, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Posters: typing.Union[MetaOapg.properties.Posters, list, tuple, None, schemas.Unset] = schemas.unset,
        Fanarts: typing.Union[MetaOapg.properties.Fanarts, list, tuple, None, schemas.Unset] = schemas.unset,
        Banners: typing.Union[MetaOapg.properties.Banners, list, tuple, None, schemas.Unset] = schemas.unset,
        Rating: typing.Union['CommonRating', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SeriesTvDB':
        return super().__new__(
            cls,
            *_args,
            Title=Title,
            ID=ID,
            AirDate=AirDate,
            EndDate=EndDate,
            Description=Description,
            Season=Season,
            Posters=Posters,
            Fanarts=Fanarts,
            Banners=Banners,
            Rating=Rating,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.common_image import CommonImage
from lib.shoko.v3.lib.shoko.v3.models.common_rating import CommonRating
