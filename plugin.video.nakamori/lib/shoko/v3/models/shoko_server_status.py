# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class ShokoServerStatus(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class StartupMessage(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'StartupMessage':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def State() -> typing.Type['ServerStatusStartupState']:
                return ServerStatusStartupState
            
            
            class Uptime(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-span'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Uptime':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def DatabaseBlocked() -> typing.Type['ServerStateDatabaseBlockedInfo']:
                return ServerStateDatabaseBlockedInfo
            __annotations__ = {
                "StartupMessage": StartupMessage,
                "State": State,
                "Uptime": Uptime,
                "DatabaseBlocked": DatabaseBlocked,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StartupMessage"]) -> MetaOapg.properties.StartupMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["State"]) -> 'ServerStatusStartupState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Uptime"]) -> MetaOapg.properties.Uptime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DatabaseBlocked"]) -> 'ServerStateDatabaseBlockedInfo': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["StartupMessage"], typing_extensions.Literal["State"], typing_extensions.Literal["Uptime"], typing_extensions.Literal["DatabaseBlocked"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StartupMessage"]) -> typing.Union[MetaOapg.properties.StartupMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["State"]) -> typing.Union['ServerStatusStartupState', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Uptime"]) -> typing.Union[MetaOapg.properties.Uptime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DatabaseBlocked"]) -> typing.Union['ServerStateDatabaseBlockedInfo', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["StartupMessage"], typing_extensions.Literal["State"], typing_extensions.Literal["Uptime"], typing_extensions.Literal["DatabaseBlocked"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        StartupMessage: typing.Union[MetaOapg.properties.StartupMessage, None, str, schemas.Unset] = schemas.unset,
        State: typing.Union['ServerStatusStartupState', schemas.Unset] = schemas.unset,
        Uptime: typing.Union[MetaOapg.properties.Uptime, None, str, schemas.Unset] = schemas.unset,
        DatabaseBlocked: typing.Union['ServerStateDatabaseBlockedInfo', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ShokoServerStatus':
        return super().__new__(
            cls,
            *_args,
            StartupMessage=StartupMessage,
            State=State,
            Uptime=Uptime,
            DatabaseBlocked=DatabaseBlocked,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.server_state_database_blocked_info import ServerStateDatabaseBlockedInfo
from lib.shoko.v3.lib.shoko.v3.models.server_status_startup_state import ServerStatusStartupState
