# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class CommonRole(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    This is for cast/staff
    """


    class MetaOapg:
        required = {
            "RoleName",
            "Language",
            "Staff",
        }
        
        class properties:
            
            
            class Language(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def Staff() -> typing.Type['RolePerson']:
                return RolePerson
        
            @staticmethod
            def RoleName() -> typing.Type['RoleCreatorRoleType']:
                return RoleCreatorRoleType
        
            @staticmethod
            def Character() -> typing.Type['RolePerson']:
                return RolePerson
            
            
            class RoleDetails(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'RoleDetails':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "Language": Language,
                "Staff": Staff,
                "RoleName": RoleName,
                "Character": Character,
                "RoleDetails": RoleDetails,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    RoleName: 'RoleCreatorRoleType'
    Language: MetaOapg.properties.Language
    Staff: 'RolePerson'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RoleName"]) -> 'RoleCreatorRoleType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Language"]) -> MetaOapg.properties.Language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Staff"]) -> 'RolePerson': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Character"]) -> 'RolePerson': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RoleDetails"]) -> MetaOapg.properties.RoleDetails: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["RoleName"], typing_extensions.Literal["Language"], typing_extensions.Literal["Staff"], typing_extensions.Literal["Character"], typing_extensions.Literal["RoleDetails"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RoleName"]) -> 'RoleCreatorRoleType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Language"]) -> MetaOapg.properties.Language: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Staff"]) -> 'RolePerson': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Character"]) -> typing.Union['RolePerson', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RoleDetails"]) -> typing.Union[MetaOapg.properties.RoleDetails, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["RoleName"], typing_extensions.Literal["Language"], typing_extensions.Literal["Staff"], typing_extensions.Literal["Character"], typing_extensions.Literal["RoleDetails"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        RoleName: 'RoleCreatorRoleType',
        Language: typing.Union[MetaOapg.properties.Language, str, ],
        Staff: 'RolePerson',
        Character: typing.Union['RolePerson', schemas.Unset] = schemas.unset,
        RoleDetails: typing.Union[MetaOapg.properties.RoleDetails, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CommonRole':
        return super().__new__(
            cls,
            *_args,
            RoleName=RoleName,
            Language=Language,
            Staff=Staff,
            Character=Character,
            RoleDetails=RoleDetails,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.role_creator_role_type import RoleCreatorRoleType
from lib.shoko.v3.lib.shoko.v3.models.role_person import RolePerson
