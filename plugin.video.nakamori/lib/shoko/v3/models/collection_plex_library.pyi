# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class CollectionPlexLibrary(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class RatingKey(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'RatingKey':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Key':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def Type() -> typing.Type['PlexPlexType']:
                return PlexPlexType
            
            
            class Title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Title':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ContentRating(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ContentRating':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Summary(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Summary':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Index = schemas.Int64Schema
            
            
            class Rating(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Rating':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Year(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Year':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Thumb(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Thumb':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Art(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Art':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Banner(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Banner':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class OriginallyAvailableAt(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'OriginallyAvailableAt':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            LeafCount = schemas.Int64Schema
            ViewedLeafCount = schemas.Int64Schema
            ChildCount = schemas.Int64Schema
            AddedAt = schemas.Int64Schema
            UpdatedAt = schemas.Int64Schema
            
            
            class Genre(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PlexTagHolder']:
                        return PlexTagHolder
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Genre':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Role(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PlexTagHolder']:
                        return PlexTagHolder
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Role':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class SkipChildren(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'SkipChildren':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Theme(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Theme':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ViewCount(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ViewCount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class LastViewedAt(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'LastViewedAt':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class TitleSort(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'TitleSort':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class UserRating(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'UserRating':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "RatingKey": RatingKey,
                "Key": Key,
                "Type": Type,
                "Title": Title,
                "ContentRating": ContentRating,
                "Summary": Summary,
                "Index": Index,
                "Rating": Rating,
                "Year": Year,
                "Thumb": Thumb,
                "Art": Art,
                "Banner": Banner,
                "OriginallyAvailableAt": OriginallyAvailableAt,
                "LeafCount": LeafCount,
                "ViewedLeafCount": ViewedLeafCount,
                "ChildCount": ChildCount,
                "AddedAt": AddedAt,
                "UpdatedAt": UpdatedAt,
                "Genre": Genre,
                "Role": Role,
                "SkipChildren": SkipChildren,
                "Theme": Theme,
                "ViewCount": ViewCount,
                "LastViewedAt": LastViewedAt,
                "TitleSort": TitleSort,
                "UserRating": UserRating,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RatingKey"]) -> MetaOapg.properties.RatingKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Key"]) -> MetaOapg.properties.Key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> 'PlexPlexType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Title"]) -> MetaOapg.properties.Title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ContentRating"]) -> MetaOapg.properties.ContentRating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Summary"]) -> MetaOapg.properties.Summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Index"]) -> MetaOapg.properties.Index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Rating"]) -> MetaOapg.properties.Rating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Year"]) -> MetaOapg.properties.Year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Thumb"]) -> MetaOapg.properties.Thumb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Art"]) -> MetaOapg.properties.Art: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Banner"]) -> MetaOapg.properties.Banner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OriginallyAvailableAt"]) -> MetaOapg.properties.OriginallyAvailableAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LeafCount"]) -> MetaOapg.properties.LeafCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ViewedLeafCount"]) -> MetaOapg.properties.ViewedLeafCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ChildCount"]) -> MetaOapg.properties.ChildCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AddedAt"]) -> MetaOapg.properties.AddedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UpdatedAt"]) -> MetaOapg.properties.UpdatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Genre"]) -> MetaOapg.properties.Genre: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Role"]) -> MetaOapg.properties.Role: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SkipChildren"]) -> MetaOapg.properties.SkipChildren: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Theme"]) -> MetaOapg.properties.Theme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ViewCount"]) -> MetaOapg.properties.ViewCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastViewedAt"]) -> MetaOapg.properties.LastViewedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TitleSort"]) -> MetaOapg.properties.TitleSort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UserRating"]) -> MetaOapg.properties.UserRating: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["RatingKey"], typing_extensions.Literal["Key"], typing_extensions.Literal["Type"], typing_extensions.Literal["Title"], typing_extensions.Literal["ContentRating"], typing_extensions.Literal["Summary"], typing_extensions.Literal["Index"], typing_extensions.Literal["Rating"], typing_extensions.Literal["Year"], typing_extensions.Literal["Thumb"], typing_extensions.Literal["Art"], typing_extensions.Literal["Banner"], typing_extensions.Literal["OriginallyAvailableAt"], typing_extensions.Literal["LeafCount"], typing_extensions.Literal["ViewedLeafCount"], typing_extensions.Literal["ChildCount"], typing_extensions.Literal["AddedAt"], typing_extensions.Literal["UpdatedAt"], typing_extensions.Literal["Genre"], typing_extensions.Literal["Role"], typing_extensions.Literal["SkipChildren"], typing_extensions.Literal["Theme"], typing_extensions.Literal["ViewCount"], typing_extensions.Literal["LastViewedAt"], typing_extensions.Literal["TitleSort"], typing_extensions.Literal["UserRating"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RatingKey"]) -> typing.Union[MetaOapg.properties.RatingKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Key"]) -> typing.Union[MetaOapg.properties.Key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> typing.Union['PlexPlexType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Title"]) -> typing.Union[MetaOapg.properties.Title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ContentRating"]) -> typing.Union[MetaOapg.properties.ContentRating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Summary"]) -> typing.Union[MetaOapg.properties.Summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Index"]) -> typing.Union[MetaOapg.properties.Index, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Rating"]) -> typing.Union[MetaOapg.properties.Rating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Year"]) -> typing.Union[MetaOapg.properties.Year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Thumb"]) -> typing.Union[MetaOapg.properties.Thumb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Art"]) -> typing.Union[MetaOapg.properties.Art, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Banner"]) -> typing.Union[MetaOapg.properties.Banner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OriginallyAvailableAt"]) -> typing.Union[MetaOapg.properties.OriginallyAvailableAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LeafCount"]) -> typing.Union[MetaOapg.properties.LeafCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ViewedLeafCount"]) -> typing.Union[MetaOapg.properties.ViewedLeafCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ChildCount"]) -> typing.Union[MetaOapg.properties.ChildCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AddedAt"]) -> typing.Union[MetaOapg.properties.AddedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UpdatedAt"]) -> typing.Union[MetaOapg.properties.UpdatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Genre"]) -> typing.Union[MetaOapg.properties.Genre, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Role"]) -> typing.Union[MetaOapg.properties.Role, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SkipChildren"]) -> typing.Union[MetaOapg.properties.SkipChildren, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Theme"]) -> typing.Union[MetaOapg.properties.Theme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ViewCount"]) -> typing.Union[MetaOapg.properties.ViewCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastViewedAt"]) -> typing.Union[MetaOapg.properties.LastViewedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TitleSort"]) -> typing.Union[MetaOapg.properties.TitleSort, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UserRating"]) -> typing.Union[MetaOapg.properties.UserRating, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["RatingKey"], typing_extensions.Literal["Key"], typing_extensions.Literal["Type"], typing_extensions.Literal["Title"], typing_extensions.Literal["ContentRating"], typing_extensions.Literal["Summary"], typing_extensions.Literal["Index"], typing_extensions.Literal["Rating"], typing_extensions.Literal["Year"], typing_extensions.Literal["Thumb"], typing_extensions.Literal["Art"], typing_extensions.Literal["Banner"], typing_extensions.Literal["OriginallyAvailableAt"], typing_extensions.Literal["LeafCount"], typing_extensions.Literal["ViewedLeafCount"], typing_extensions.Literal["ChildCount"], typing_extensions.Literal["AddedAt"], typing_extensions.Literal["UpdatedAt"], typing_extensions.Literal["Genre"], typing_extensions.Literal["Role"], typing_extensions.Literal["SkipChildren"], typing_extensions.Literal["Theme"], typing_extensions.Literal["ViewCount"], typing_extensions.Literal["LastViewedAt"], typing_extensions.Literal["TitleSort"], typing_extensions.Literal["UserRating"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        RatingKey: typing.Union[MetaOapg.properties.RatingKey, None, str, schemas.Unset] = schemas.unset,
        Key: typing.Union[MetaOapg.properties.Key, None, str, schemas.Unset] = schemas.unset,
        Type: typing.Union['PlexPlexType', schemas.Unset] = schemas.unset,
        Title: typing.Union[MetaOapg.properties.Title, None, str, schemas.Unset] = schemas.unset,
        ContentRating: typing.Union[MetaOapg.properties.ContentRating, None, str, schemas.Unset] = schemas.unset,
        Summary: typing.Union[MetaOapg.properties.Summary, None, str, schemas.Unset] = schemas.unset,
        Index: typing.Union[MetaOapg.properties.Index, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Rating: typing.Union[MetaOapg.properties.Rating, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Year: typing.Union[MetaOapg.properties.Year, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Thumb: typing.Union[MetaOapg.properties.Thumb, None, str, schemas.Unset] = schemas.unset,
        Art: typing.Union[MetaOapg.properties.Art, None, str, schemas.Unset] = schemas.unset,
        Banner: typing.Union[MetaOapg.properties.Banner, None, str, schemas.Unset] = schemas.unset,
        OriginallyAvailableAt: typing.Union[MetaOapg.properties.OriginallyAvailableAt, None, str, datetime, schemas.Unset] = schemas.unset,
        LeafCount: typing.Union[MetaOapg.properties.LeafCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ViewedLeafCount: typing.Union[MetaOapg.properties.ViewedLeafCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ChildCount: typing.Union[MetaOapg.properties.ChildCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        AddedAt: typing.Union[MetaOapg.properties.AddedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        UpdatedAt: typing.Union[MetaOapg.properties.UpdatedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Genre: typing.Union[MetaOapg.properties.Genre, list, tuple, None, schemas.Unset] = schemas.unset,
        Role: typing.Union[MetaOapg.properties.Role, list, tuple, None, schemas.Unset] = schemas.unset,
        SkipChildren: typing.Union[MetaOapg.properties.SkipChildren, None, bool, schemas.Unset] = schemas.unset,
        Theme: typing.Union[MetaOapg.properties.Theme, None, str, schemas.Unset] = schemas.unset,
        ViewCount: typing.Union[MetaOapg.properties.ViewCount, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        LastViewedAt: typing.Union[MetaOapg.properties.LastViewedAt, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        TitleSort: typing.Union[MetaOapg.properties.TitleSort, None, str, schemas.Unset] = schemas.unset,
        UserRating: typing.Union[MetaOapg.properties.UserRating, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CollectionPlexLibrary':
        return super().__new__(
            cls,
            *_args,
            RatingKey=RatingKey,
            Key=Key,
            Type=Type,
            Title=Title,
            ContentRating=ContentRating,
            Summary=Summary,
            Index=Index,
            Rating=Rating,
            Year=Year,
            Thumb=Thumb,
            Art=Art,
            Banner=Banner,
            OriginallyAvailableAt=OriginallyAvailableAt,
            LeafCount=LeafCount,
            ViewedLeafCount=ViewedLeafCount,
            ChildCount=ChildCount,
            AddedAt=AddedAt,
            UpdatedAt=UpdatedAt,
            Genre=Genre,
            Role=Role,
            SkipChildren=SkipChildren,
            Theme=Theme,
            ViewCount=ViewCount,
            LastViewedAt=LastViewedAt,
            TitleSort=TitleSort,
            UserRating=UserRating,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.plex_plex_type import PlexPlexType
from lib.shoko.v3.lib.shoko.v3.models.plex_tag_holder import PlexTagHolder
