# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class CommonTag(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            ID = schemas.Int32Schema
            
            
            class ParentID(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ParentID':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class IsVerified(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'IsVerified':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            IsSpoiler = schemas.BoolSchema
            
            
            class IsLocalSpoiler(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'IsLocalSpoiler':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Weight(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Weight':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class LastUpdated(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'LastUpdated':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Source(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Source':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "ID": ID,
                "ParentID": ParentID,
                "Name": Name,
                "Description": Description,
                "IsVerified": IsVerified,
                "IsSpoiler": IsSpoiler,
                "IsLocalSpoiler": IsLocalSpoiler,
                "Weight": Weight,
                "LastUpdated": LastUpdated,
                "Source": Source,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ParentID"]) -> MetaOapg.properties.ParentID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsVerified"]) -> MetaOapg.properties.IsVerified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsSpoiler"]) -> MetaOapg.properties.IsSpoiler: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsLocalSpoiler"]) -> MetaOapg.properties.IsLocalSpoiler: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Weight"]) -> MetaOapg.properties.Weight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastUpdated"]) -> MetaOapg.properties.LastUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Source"]) -> MetaOapg.properties.Source: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ID"], typing_extensions.Literal["ParentID"], typing_extensions.Literal["Name"], typing_extensions.Literal["Description"], typing_extensions.Literal["IsVerified"], typing_extensions.Literal["IsSpoiler"], typing_extensions.Literal["IsLocalSpoiler"], typing_extensions.Literal["Weight"], typing_extensions.Literal["LastUpdated"], typing_extensions.Literal["Source"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ParentID"]) -> typing.Union[MetaOapg.properties.ParentID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> typing.Union[MetaOapg.properties.Name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> typing.Union[MetaOapg.properties.Description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsVerified"]) -> typing.Union[MetaOapg.properties.IsVerified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsSpoiler"]) -> typing.Union[MetaOapg.properties.IsSpoiler, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsLocalSpoiler"]) -> typing.Union[MetaOapg.properties.IsLocalSpoiler, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Weight"]) -> typing.Union[MetaOapg.properties.Weight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastUpdated"]) -> typing.Union[MetaOapg.properties.LastUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Source"]) -> typing.Union[MetaOapg.properties.Source, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ID"], typing_extensions.Literal["ParentID"], typing_extensions.Literal["Name"], typing_extensions.Literal["Description"], typing_extensions.Literal["IsVerified"], typing_extensions.Literal["IsSpoiler"], typing_extensions.Literal["IsLocalSpoiler"], typing_extensions.Literal["Weight"], typing_extensions.Literal["LastUpdated"], typing_extensions.Literal["Source"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ID: typing.Union[MetaOapg.properties.ID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ParentID: typing.Union[MetaOapg.properties.ParentID, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Name: typing.Union[MetaOapg.properties.Name, None, str, schemas.Unset] = schemas.unset,
        Description: typing.Union[MetaOapg.properties.Description, None, str, schemas.Unset] = schemas.unset,
        IsVerified: typing.Union[MetaOapg.properties.IsVerified, None, bool, schemas.Unset] = schemas.unset,
        IsSpoiler: typing.Union[MetaOapg.properties.IsSpoiler, bool, schemas.Unset] = schemas.unset,
        IsLocalSpoiler: typing.Union[MetaOapg.properties.IsLocalSpoiler, None, bool, schemas.Unset] = schemas.unset,
        Weight: typing.Union[MetaOapg.properties.Weight, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        LastUpdated: typing.Union[MetaOapg.properties.LastUpdated, None, str, datetime, schemas.Unset] = schemas.unset,
        Source: typing.Union[MetaOapg.properties.Source, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CommonTag':
        return super().__new__(
            cls,
            *_args,
            ID=ID,
            ParentID=ParentID,
            Name=Name,
            Description=Description,
            IsVerified=IsVerified,
            IsSpoiler=IsSpoiler,
            IsLocalSpoiler=IsLocalSpoiler,
            Weight=Weight,
            LastUpdated=LastUpdated,
            Source=Source,
            _configuration=_configuration,
        )
