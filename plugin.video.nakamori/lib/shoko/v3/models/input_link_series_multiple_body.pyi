# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class InputLinkSeriesMultipleBody(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Link multiple files to an episode range in a series.
    """


    class MetaOapg:
        required = {
            "SeriesID",
            "FileIDs",
            "RangeStart",
        }
        
        class properties:
            
            
            class FileIDs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'FileIDs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            SeriesID = schemas.Int32Schema
            
            
            class RangeStart(
                schemas.StrSchema
            ):
                pass
            SingleEpisode = schemas.BoolSchema
            __annotations__ = {
                "FileIDs": FileIDs,
                "SeriesID": SeriesID,
                "RangeStart": RangeStart,
                "SingleEpisode": SingleEpisode,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    SeriesID: MetaOapg.properties.SeriesID
    FileIDs: MetaOapg.properties.FileIDs
    RangeStart: MetaOapg.properties.RangeStart
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SeriesID"]) -> MetaOapg.properties.SeriesID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FileIDs"]) -> MetaOapg.properties.FileIDs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RangeStart"]) -> MetaOapg.properties.RangeStart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SingleEpisode"]) -> MetaOapg.properties.SingleEpisode: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["SeriesID"], typing_extensions.Literal["FileIDs"], typing_extensions.Literal["RangeStart"], typing_extensions.Literal["SingleEpisode"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SeriesID"]) -> MetaOapg.properties.SeriesID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FileIDs"]) -> MetaOapg.properties.FileIDs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RangeStart"]) -> MetaOapg.properties.RangeStart: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SingleEpisode"]) -> typing.Union[MetaOapg.properties.SingleEpisode, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["SeriesID"], typing_extensions.Literal["FileIDs"], typing_extensions.Literal["RangeStart"], typing_extensions.Literal["SingleEpisode"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        SeriesID: typing.Union[MetaOapg.properties.SeriesID, decimal.Decimal, int, ],
        FileIDs: typing.Union[MetaOapg.properties.FileIDs, list, tuple, ],
        RangeStart: typing.Union[MetaOapg.properties.RangeStart, str, ],
        SingleEpisode: typing.Union[MetaOapg.properties.SingleEpisode, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'InputLinkSeriesMultipleBody':
        return super().__new__(
            cls,
            *_args,
            SeriesID=SeriesID,
            FileIDs=FileIDs,
            RangeStart=RangeStart,
            SingleEpisode=SingleEpisode,
            _configuration=_configuration,
        )
