# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class GroupSizesSeriesTypeCounts(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            Unknown = schemas.Int32Schema
            Other = schemas.Int32Schema
            TV = schemas.Int32Schema
            TVSpecial = schemas.Int32Schema
            Web = schemas.Int32Schema
            Movie = schemas.Int32Schema
            OVA = schemas.Int32Schema
            __annotations__ = {
                "Unknown": Unknown,
                "Other": Other,
                "TV": TV,
                "TVSpecial": TVSpecial,
                "Web": Web,
                "Movie": Movie,
                "OVA": OVA,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Unknown"]) -> MetaOapg.properties.Unknown: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Other"]) -> MetaOapg.properties.Other: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TV"]) -> MetaOapg.properties.TV: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TVSpecial"]) -> MetaOapg.properties.TVSpecial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Web"]) -> MetaOapg.properties.Web: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Movie"]) -> MetaOapg.properties.Movie: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OVA"]) -> MetaOapg.properties.OVA: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Unknown"], typing_extensions.Literal["Other"], typing_extensions.Literal["TV"], typing_extensions.Literal["TVSpecial"], typing_extensions.Literal["Web"], typing_extensions.Literal["Movie"], typing_extensions.Literal["OVA"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Unknown"]) -> typing.Union[MetaOapg.properties.Unknown, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Other"]) -> typing.Union[MetaOapg.properties.Other, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TV"]) -> typing.Union[MetaOapg.properties.TV, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TVSpecial"]) -> typing.Union[MetaOapg.properties.TVSpecial, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Web"]) -> typing.Union[MetaOapg.properties.Web, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Movie"]) -> typing.Union[MetaOapg.properties.Movie, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OVA"]) -> typing.Union[MetaOapg.properties.OVA, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Unknown"], typing_extensions.Literal["Other"], typing_extensions.Literal["TV"], typing_extensions.Literal["TVSpecial"], typing_extensions.Literal["Web"], typing_extensions.Literal["Movie"], typing_extensions.Literal["OVA"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Unknown: typing.Union[MetaOapg.properties.Unknown, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Other: typing.Union[MetaOapg.properties.Other, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        TV: typing.Union[MetaOapg.properties.TV, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        TVSpecial: typing.Union[MetaOapg.properties.TVSpecial, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Web: typing.Union[MetaOapg.properties.Web, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Movie: typing.Union[MetaOapg.properties.Movie, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        OVA: typing.Union[MetaOapg.properties.OVA, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'GroupSizesSeriesTypeCounts':
        return super().__new__(
            cls,
            *_args,
            Unknown=Unknown,
            Other=Other,
            TV=TV,
            TVSpecial=TVSpecial,
            Web=Web,
            Movie=Movie,
            OVA=OVA,
            _configuration=_configuration,
        )
