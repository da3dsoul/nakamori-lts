# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class ModelsFileQualityPreferences(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            Require10BitVideo = schemas.BoolSchema
            MaxNumberOfFilesToKeep = schemas.Int32Schema
            
            
            class PreferredTypes(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EnumsFileQualityFilterType']:
                        return EnumsFileQualityFilterType
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'PreferredTypes':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class PreferredAudioCodecs(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'PreferredAudioCodecs':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class PreferredResolutions(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'PreferredResolutions':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class PreferredSubGroups(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'PreferredSubGroups':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class PreferredVideoCodecs(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'PreferredVideoCodecs':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Prefer8BitVideo = schemas.BoolSchema
            AllowDeletionOfImportedFiles = schemas.BoolSchema
            
            
            class RequiredTypes(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['EnumsFileQualityFilterType']:
                        return EnumsFileQualityFilterType
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'RequiredTypes':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def RequiredAudioCodecs() -> typing.Type['FileQualityTypeListPairListSystemString']:
                return FileQualityTypeListPairListSystemString
        
            @staticmethod
            def RequiredAudioStreamCount() -> typing.Type['FileQualityTypeListPairSystemInt32']:
                return FileQualityTypeListPairSystemInt32
        
            @staticmethod
            def RequiredResolutions() -> typing.Type['FileQualityTypeListPairListSystemString']:
                return FileQualityTypeListPairListSystemString
        
            @staticmethod
            def RequiredSources() -> typing.Type['FileQualityTypeListPairListSystemString']:
                return FileQualityTypeListPairListSystemString
        
            @staticmethod
            def RequiredSubGroups() -> typing.Type['FileQualityTypeListPairListSystemString']:
                return FileQualityTypeListPairListSystemString
        
            @staticmethod
            def RequiredSubStreamCount() -> typing.Type['FileQualityTypeListPairSystemInt32']:
                return FileQualityTypeListPairSystemInt32
        
            @staticmethod
            def RequiredVideoCodecs() -> typing.Type['FileQualityTypeListPairListSystemString']:
                return FileQualityTypeListPairListSystemString
            
            
            class PreferredSources(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'PreferredSources':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            AllowDeletingFilesWithMissingInfo = schemas.BoolSchema
            __annotations__ = {
                "Require10BitVideo": Require10BitVideo,
                "MaxNumberOfFilesToKeep": MaxNumberOfFilesToKeep,
                "PreferredTypes": PreferredTypes,
                "PreferredAudioCodecs": PreferredAudioCodecs,
                "PreferredResolutions": PreferredResolutions,
                "PreferredSubGroups": PreferredSubGroups,
                "PreferredVideoCodecs": PreferredVideoCodecs,
                "Prefer8BitVideo": Prefer8BitVideo,
                "AllowDeletionOfImportedFiles": AllowDeletionOfImportedFiles,
                "RequiredTypes": RequiredTypes,
                "RequiredAudioCodecs": RequiredAudioCodecs,
                "RequiredAudioStreamCount": RequiredAudioStreamCount,
                "RequiredResolutions": RequiredResolutions,
                "RequiredSources": RequiredSources,
                "RequiredSubGroups": RequiredSubGroups,
                "RequiredSubStreamCount": RequiredSubStreamCount,
                "RequiredVideoCodecs": RequiredVideoCodecs,
                "PreferredSources": PreferredSources,
                "AllowDeletingFilesWithMissingInfo": AllowDeletingFilesWithMissingInfo,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Require10BitVideo"]) -> MetaOapg.properties.Require10BitVideo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MaxNumberOfFilesToKeep"]) -> MetaOapg.properties.MaxNumberOfFilesToKeep: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PreferredTypes"]) -> MetaOapg.properties.PreferredTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PreferredAudioCodecs"]) -> MetaOapg.properties.PreferredAudioCodecs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PreferredResolutions"]) -> MetaOapg.properties.PreferredResolutions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PreferredSubGroups"]) -> MetaOapg.properties.PreferredSubGroups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PreferredVideoCodecs"]) -> MetaOapg.properties.PreferredVideoCodecs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Prefer8BitVideo"]) -> MetaOapg.properties.Prefer8BitVideo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AllowDeletionOfImportedFiles"]) -> MetaOapg.properties.AllowDeletionOfImportedFiles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RequiredTypes"]) -> MetaOapg.properties.RequiredTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RequiredAudioCodecs"]) -> 'FileQualityTypeListPairListSystemString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RequiredAudioStreamCount"]) -> 'FileQualityTypeListPairSystemInt32': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RequiredResolutions"]) -> 'FileQualityTypeListPairListSystemString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RequiredSources"]) -> 'FileQualityTypeListPairListSystemString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RequiredSubGroups"]) -> 'FileQualityTypeListPairListSystemString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RequiredSubStreamCount"]) -> 'FileQualityTypeListPairSystemInt32': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RequiredVideoCodecs"]) -> 'FileQualityTypeListPairListSystemString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PreferredSources"]) -> MetaOapg.properties.PreferredSources: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AllowDeletingFilesWithMissingInfo"]) -> MetaOapg.properties.AllowDeletingFilesWithMissingInfo: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Require10BitVideo"], typing_extensions.Literal["MaxNumberOfFilesToKeep"], typing_extensions.Literal["PreferredTypes"], typing_extensions.Literal["PreferredAudioCodecs"], typing_extensions.Literal["PreferredResolutions"], typing_extensions.Literal["PreferredSubGroups"], typing_extensions.Literal["PreferredVideoCodecs"], typing_extensions.Literal["Prefer8BitVideo"], typing_extensions.Literal["AllowDeletionOfImportedFiles"], typing_extensions.Literal["RequiredTypes"], typing_extensions.Literal["RequiredAudioCodecs"], typing_extensions.Literal["RequiredAudioStreamCount"], typing_extensions.Literal["RequiredResolutions"], typing_extensions.Literal["RequiredSources"], typing_extensions.Literal["RequiredSubGroups"], typing_extensions.Literal["RequiredSubStreamCount"], typing_extensions.Literal["RequiredVideoCodecs"], typing_extensions.Literal["PreferredSources"], typing_extensions.Literal["AllowDeletingFilesWithMissingInfo"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Require10BitVideo"]) -> typing.Union[MetaOapg.properties.Require10BitVideo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MaxNumberOfFilesToKeep"]) -> typing.Union[MetaOapg.properties.MaxNumberOfFilesToKeep, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PreferredTypes"]) -> typing.Union[MetaOapg.properties.PreferredTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PreferredAudioCodecs"]) -> typing.Union[MetaOapg.properties.PreferredAudioCodecs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PreferredResolutions"]) -> typing.Union[MetaOapg.properties.PreferredResolutions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PreferredSubGroups"]) -> typing.Union[MetaOapg.properties.PreferredSubGroups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PreferredVideoCodecs"]) -> typing.Union[MetaOapg.properties.PreferredVideoCodecs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Prefer8BitVideo"]) -> typing.Union[MetaOapg.properties.Prefer8BitVideo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AllowDeletionOfImportedFiles"]) -> typing.Union[MetaOapg.properties.AllowDeletionOfImportedFiles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RequiredTypes"]) -> typing.Union[MetaOapg.properties.RequiredTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RequiredAudioCodecs"]) -> typing.Union['FileQualityTypeListPairListSystemString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RequiredAudioStreamCount"]) -> typing.Union['FileQualityTypeListPairSystemInt32', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RequiredResolutions"]) -> typing.Union['FileQualityTypeListPairListSystemString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RequiredSources"]) -> typing.Union['FileQualityTypeListPairListSystemString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RequiredSubGroups"]) -> typing.Union['FileQualityTypeListPairListSystemString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RequiredSubStreamCount"]) -> typing.Union['FileQualityTypeListPairSystemInt32', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RequiredVideoCodecs"]) -> typing.Union['FileQualityTypeListPairListSystemString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PreferredSources"]) -> typing.Union[MetaOapg.properties.PreferredSources, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AllowDeletingFilesWithMissingInfo"]) -> typing.Union[MetaOapg.properties.AllowDeletingFilesWithMissingInfo, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Require10BitVideo"], typing_extensions.Literal["MaxNumberOfFilesToKeep"], typing_extensions.Literal["PreferredTypes"], typing_extensions.Literal["PreferredAudioCodecs"], typing_extensions.Literal["PreferredResolutions"], typing_extensions.Literal["PreferredSubGroups"], typing_extensions.Literal["PreferredVideoCodecs"], typing_extensions.Literal["Prefer8BitVideo"], typing_extensions.Literal["AllowDeletionOfImportedFiles"], typing_extensions.Literal["RequiredTypes"], typing_extensions.Literal["RequiredAudioCodecs"], typing_extensions.Literal["RequiredAudioStreamCount"], typing_extensions.Literal["RequiredResolutions"], typing_extensions.Literal["RequiredSources"], typing_extensions.Literal["RequiredSubGroups"], typing_extensions.Literal["RequiredSubStreamCount"], typing_extensions.Literal["RequiredVideoCodecs"], typing_extensions.Literal["PreferredSources"], typing_extensions.Literal["AllowDeletingFilesWithMissingInfo"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Require10BitVideo: typing.Union[MetaOapg.properties.Require10BitVideo, bool, schemas.Unset] = schemas.unset,
        MaxNumberOfFilesToKeep: typing.Union[MetaOapg.properties.MaxNumberOfFilesToKeep, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        PreferredTypes: typing.Union[MetaOapg.properties.PreferredTypes, list, tuple, None, schemas.Unset] = schemas.unset,
        PreferredAudioCodecs: typing.Union[MetaOapg.properties.PreferredAudioCodecs, list, tuple, None, schemas.Unset] = schemas.unset,
        PreferredResolutions: typing.Union[MetaOapg.properties.PreferredResolutions, list, tuple, None, schemas.Unset] = schemas.unset,
        PreferredSubGroups: typing.Union[MetaOapg.properties.PreferredSubGroups, list, tuple, None, schemas.Unset] = schemas.unset,
        PreferredVideoCodecs: typing.Union[MetaOapg.properties.PreferredVideoCodecs, list, tuple, None, schemas.Unset] = schemas.unset,
        Prefer8BitVideo: typing.Union[MetaOapg.properties.Prefer8BitVideo, bool, schemas.Unset] = schemas.unset,
        AllowDeletionOfImportedFiles: typing.Union[MetaOapg.properties.AllowDeletionOfImportedFiles, bool, schemas.Unset] = schemas.unset,
        RequiredTypes: typing.Union[MetaOapg.properties.RequiredTypes, list, tuple, None, schemas.Unset] = schemas.unset,
        RequiredAudioCodecs: typing.Union['FileQualityTypeListPairListSystemString', schemas.Unset] = schemas.unset,
        RequiredAudioStreamCount: typing.Union['FileQualityTypeListPairSystemInt32', schemas.Unset] = schemas.unset,
        RequiredResolutions: typing.Union['FileQualityTypeListPairListSystemString', schemas.Unset] = schemas.unset,
        RequiredSources: typing.Union['FileQualityTypeListPairListSystemString', schemas.Unset] = schemas.unset,
        RequiredSubGroups: typing.Union['FileQualityTypeListPairListSystemString', schemas.Unset] = schemas.unset,
        RequiredSubStreamCount: typing.Union['FileQualityTypeListPairSystemInt32', schemas.Unset] = schemas.unset,
        RequiredVideoCodecs: typing.Union['FileQualityTypeListPairListSystemString', schemas.Unset] = schemas.unset,
        PreferredSources: typing.Union[MetaOapg.properties.PreferredSources, list, tuple, None, schemas.Unset] = schemas.unset,
        AllowDeletingFilesWithMissingInfo: typing.Union[MetaOapg.properties.AllowDeletingFilesWithMissingInfo, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ModelsFileQualityPreferences':
        return super().__new__(
            cls,
            *_args,
            Require10BitVideo=Require10BitVideo,
            MaxNumberOfFilesToKeep=MaxNumberOfFilesToKeep,
            PreferredTypes=PreferredTypes,
            PreferredAudioCodecs=PreferredAudioCodecs,
            PreferredResolutions=PreferredResolutions,
            PreferredSubGroups=PreferredSubGroups,
            PreferredVideoCodecs=PreferredVideoCodecs,
            Prefer8BitVideo=Prefer8BitVideo,
            AllowDeletionOfImportedFiles=AllowDeletionOfImportedFiles,
            RequiredTypes=RequiredTypes,
            RequiredAudioCodecs=RequiredAudioCodecs,
            RequiredAudioStreamCount=RequiredAudioStreamCount,
            RequiredResolutions=RequiredResolutions,
            RequiredSources=RequiredSources,
            RequiredSubGroups=RequiredSubGroups,
            RequiredSubStreamCount=RequiredSubStreamCount,
            RequiredVideoCodecs=RequiredVideoCodecs,
            PreferredSources=PreferredSources,
            AllowDeletingFilesWithMissingInfo=AllowDeletingFilesWithMissingInfo,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.enums_file_quality_filter_type import EnumsFileQualityFilterType
from lib.shoko.v3.lib.shoko.v3.models.file_quality_type_list_pair_list_system_string import FileQualityTypeListPairListSystemString
from lib.shoko.v3.lib.shoko.v3.models.file_quality_type_list_pair_system_int32 import FileQualityTypeListPairSystemInt32
