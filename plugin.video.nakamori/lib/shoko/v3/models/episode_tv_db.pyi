# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class EpisodeTvDB(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            ID = schemas.Int32Schema
            Season = schemas.Int32Schema
            Number = schemas.Int32Schema
            
            
            class AbsoluteNumber(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AbsoluteNumber':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Title':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class AirDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AirDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class AirsAfterSeason(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AirsAfterSeason':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class AirsBeforeSeason(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AirsBeforeSeason':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class AirsBeforeEpisode(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AirsBeforeEpisode':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def Rating() -> typing.Type['CommonRating']:
                return CommonRating
        
            @staticmethod
            def Thumbnail() -> typing.Type['CommonImage']:
                return CommonImage
            __annotations__ = {
                "ID": ID,
                "Season": Season,
                "Number": Number,
                "AbsoluteNumber": AbsoluteNumber,
                "Title": Title,
                "Description": Description,
                "AirDate": AirDate,
                "AirsAfterSeason": AirsAfterSeason,
                "AirsBeforeSeason": AirsBeforeSeason,
                "AirsBeforeEpisode": AirsBeforeEpisode,
                "Rating": Rating,
                "Thumbnail": Thumbnail,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Season"]) -> MetaOapg.properties.Season: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Number"]) -> MetaOapg.properties.Number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AbsoluteNumber"]) -> MetaOapg.properties.AbsoluteNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Title"]) -> MetaOapg.properties.Title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AirDate"]) -> MetaOapg.properties.AirDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AirsAfterSeason"]) -> MetaOapg.properties.AirsAfterSeason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AirsBeforeSeason"]) -> MetaOapg.properties.AirsBeforeSeason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AirsBeforeEpisode"]) -> MetaOapg.properties.AirsBeforeEpisode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Rating"]) -> 'CommonRating': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Thumbnail"]) -> 'CommonImage': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ID"], typing_extensions.Literal["Season"], typing_extensions.Literal["Number"], typing_extensions.Literal["AbsoluteNumber"], typing_extensions.Literal["Title"], typing_extensions.Literal["Description"], typing_extensions.Literal["AirDate"], typing_extensions.Literal["AirsAfterSeason"], typing_extensions.Literal["AirsBeforeSeason"], typing_extensions.Literal["AirsBeforeEpisode"], typing_extensions.Literal["Rating"], typing_extensions.Literal["Thumbnail"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Season"]) -> typing.Union[MetaOapg.properties.Season, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Number"]) -> typing.Union[MetaOapg.properties.Number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AbsoluteNumber"]) -> typing.Union[MetaOapg.properties.AbsoluteNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Title"]) -> typing.Union[MetaOapg.properties.Title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> typing.Union[MetaOapg.properties.Description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AirDate"]) -> typing.Union[MetaOapg.properties.AirDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AirsAfterSeason"]) -> typing.Union[MetaOapg.properties.AirsAfterSeason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AirsBeforeSeason"]) -> typing.Union[MetaOapg.properties.AirsBeforeSeason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AirsBeforeEpisode"]) -> typing.Union[MetaOapg.properties.AirsBeforeEpisode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Rating"]) -> typing.Union['CommonRating', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Thumbnail"]) -> typing.Union['CommonImage', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ID"], typing_extensions.Literal["Season"], typing_extensions.Literal["Number"], typing_extensions.Literal["AbsoluteNumber"], typing_extensions.Literal["Title"], typing_extensions.Literal["Description"], typing_extensions.Literal["AirDate"], typing_extensions.Literal["AirsAfterSeason"], typing_extensions.Literal["AirsBeforeSeason"], typing_extensions.Literal["AirsBeforeEpisode"], typing_extensions.Literal["Rating"], typing_extensions.Literal["Thumbnail"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ID: typing.Union[MetaOapg.properties.ID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Season: typing.Union[MetaOapg.properties.Season, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Number: typing.Union[MetaOapg.properties.Number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        AbsoluteNumber: typing.Union[MetaOapg.properties.AbsoluteNumber, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Title: typing.Union[MetaOapg.properties.Title, None, str, schemas.Unset] = schemas.unset,
        Description: typing.Union[MetaOapg.properties.Description, None, str, schemas.Unset] = schemas.unset,
        AirDate: typing.Union[MetaOapg.properties.AirDate, None, str, datetime, schemas.Unset] = schemas.unset,
        AirsAfterSeason: typing.Union[MetaOapg.properties.AirsAfterSeason, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        AirsBeforeSeason: typing.Union[MetaOapg.properties.AirsBeforeSeason, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        AirsBeforeEpisode: typing.Union[MetaOapg.properties.AirsBeforeEpisode, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Rating: typing.Union['CommonRating', schemas.Unset] = schemas.unset,
        Thumbnail: typing.Union['CommonImage', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'EpisodeTvDB':
        return super().__new__(
            cls,
            *_args,
            ID=ID,
            Season=Season,
            Number=Number,
            AbsoluteNumber=AbsoluteNumber,
            Title=Title,
            Description=Description,
            AirDate=AirDate,
            AirsAfterSeason=AirsAfterSeason,
            AirsBeforeSeason=AirsBeforeSeason,
            AirsBeforeEpisode=AirsBeforeEpisode,
            Rating=Rating,
            Thumbnail=Thumbnail,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.common_image import CommonImage
from lib.shoko.v3.lib.shoko.v3.models.common_rating import CommonRating
