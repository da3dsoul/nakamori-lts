# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class ServerScan(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            ScanID = schemas.Int32Schema
            CreationTIme = schemas.DateTimeSchema
            
            
            class ImportFolders(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ImportFolders':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Status = schemas.Int32Schema
            __annotations__ = {
                "ScanID": ScanID,
                "CreationTIme": CreationTIme,
                "ImportFolders": ImportFolders,
                "Status": Status,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ScanID"]) -> MetaOapg.properties.ScanID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreationTIme"]) -> MetaOapg.properties.CreationTIme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ImportFolders"]) -> MetaOapg.properties.ImportFolders: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Status"]) -> MetaOapg.properties.Status: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ScanID"], typing_extensions.Literal["CreationTIme"], typing_extensions.Literal["ImportFolders"], typing_extensions.Literal["Status"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ScanID"]) -> typing.Union[MetaOapg.properties.ScanID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreationTIme"]) -> typing.Union[MetaOapg.properties.CreationTIme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ImportFolders"]) -> typing.Union[MetaOapg.properties.ImportFolders, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union[MetaOapg.properties.Status, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ScanID"], typing_extensions.Literal["CreationTIme"], typing_extensions.Literal["ImportFolders"], typing_extensions.Literal["Status"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ScanID: typing.Union[MetaOapg.properties.ScanID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        CreationTIme: typing.Union[MetaOapg.properties.CreationTIme, str, datetime, schemas.Unset] = schemas.unset,
        ImportFolders: typing.Union[MetaOapg.properties.ImportFolders, None, str, schemas.Unset] = schemas.unset,
        Status: typing.Union[MetaOapg.properties.Status, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ServerScan':
        return super().__new__(
            cls,
            *_args,
            ScanID=ScanID,
            CreationTIme=CreationTIme,
            ImportFolders=ImportFolders,
            Status=Status,
            _configuration=_configuration,
        )
