# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class ShokoSeriesIDs(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "ID",
            "AniDB",
        }
        
        class properties:
            AniDB = schemas.Int32Schema
            ID = schemas.Int32Schema
            ParentGroup = schemas.Int32Schema
            TopLevelGroup = schemas.Int32Schema
            
            
            class TvDB(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'TvDB':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class TMDB(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'TMDB':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class MAL(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'MAL':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class TraktTv(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'TraktTv':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class AniList(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AniList':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "AniDB": AniDB,
                "ID": ID,
                "ParentGroup": ParentGroup,
                "TopLevelGroup": TopLevelGroup,
                "TvDB": TvDB,
                "TMDB": TMDB,
                "MAL": MAL,
                "TraktTv": TraktTv,
                "AniList": AniList,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    ID: MetaOapg.properties.ID
    AniDB: MetaOapg.properties.AniDB
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AniDB"]) -> MetaOapg.properties.AniDB: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ParentGroup"]) -> MetaOapg.properties.ParentGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TopLevelGroup"]) -> MetaOapg.properties.TopLevelGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TvDB"]) -> MetaOapg.properties.TvDB: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TMDB"]) -> MetaOapg.properties.TMDB: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MAL"]) -> MetaOapg.properties.MAL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TraktTv"]) -> MetaOapg.properties.TraktTv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AniList"]) -> MetaOapg.properties.AniList: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ID"], typing_extensions.Literal["AniDB"], typing_extensions.Literal["ParentGroup"], typing_extensions.Literal["TopLevelGroup"], typing_extensions.Literal["TvDB"], typing_extensions.Literal["TMDB"], typing_extensions.Literal["MAL"], typing_extensions.Literal["TraktTv"], typing_extensions.Literal["AniList"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AniDB"]) -> MetaOapg.properties.AniDB: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ParentGroup"]) -> typing.Union[MetaOapg.properties.ParentGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TopLevelGroup"]) -> typing.Union[MetaOapg.properties.TopLevelGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TvDB"]) -> typing.Union[MetaOapg.properties.TvDB, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TMDB"]) -> typing.Union[MetaOapg.properties.TMDB, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MAL"]) -> typing.Union[MetaOapg.properties.MAL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TraktTv"]) -> typing.Union[MetaOapg.properties.TraktTv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AniList"]) -> typing.Union[MetaOapg.properties.AniList, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ID"], typing_extensions.Literal["AniDB"], typing_extensions.Literal["ParentGroup"], typing_extensions.Literal["TopLevelGroup"], typing_extensions.Literal["TvDB"], typing_extensions.Literal["TMDB"], typing_extensions.Literal["MAL"], typing_extensions.Literal["TraktTv"], typing_extensions.Literal["AniList"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ID: typing.Union[MetaOapg.properties.ID, decimal.Decimal, int, ],
        AniDB: typing.Union[MetaOapg.properties.AniDB, decimal.Decimal, int, ],
        ParentGroup: typing.Union[MetaOapg.properties.ParentGroup, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        TopLevelGroup: typing.Union[MetaOapg.properties.TopLevelGroup, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        TvDB: typing.Union[MetaOapg.properties.TvDB, list, tuple, None, schemas.Unset] = schemas.unset,
        TMDB: typing.Union[MetaOapg.properties.TMDB, list, tuple, None, schemas.Unset] = schemas.unset,
        MAL: typing.Union[MetaOapg.properties.MAL, list, tuple, None, schemas.Unset] = schemas.unset,
        TraktTv: typing.Union[MetaOapg.properties.TraktTv, list, tuple, None, schemas.Unset] = schemas.unset,
        AniList: typing.Union[MetaOapg.properties.AniList, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ShokoSeriesIDs':
        return super().__new__(
            cls,
            *_args,
            ID=ID,
            AniDB=AniDB,
            ParentGroup=ParentGroup,
            TopLevelGroup=TopLevelGroup,
            TvDB=TvDB,
            TMDB=TMDB,
            MAL=MAL,
            TraktTv=TraktTv,
            AniList=AniList,
            _configuration=_configuration,
        )
