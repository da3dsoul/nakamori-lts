# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class CommonTitle(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Title object, stores the title, type, language, and source
if using a TvDB title, assume "eng:official". If using AniList, assume "x-jat:main"
AniDB's MainTitle is "x-jat:main"
    """


    class MetaOapg:
        required = {
            "Language",
            "Source",
            "Name",
        }
        
        class properties:
            
            
            class Name(
                schemas.StrSchema
            ):
                pass
            
            
            class Language(
                schemas.StrSchema
            ):
                pass
            
            
            class Source(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def Type() -> typing.Type['DataModelsTitleType']:
                return DataModelsTitleType
            Default = schemas.BoolSchema
            __annotations__ = {
                "Name": Name,
                "Language": Language,
                "Source": Source,
                "Type": Type,
                "Default": Default,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    Language: MetaOapg.properties.Language
    Source: MetaOapg.properties.Source
    Name: MetaOapg.properties.Name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Language"]) -> MetaOapg.properties.Language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Source"]) -> MetaOapg.properties.Source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> 'DataModelsTitleType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Default"]) -> MetaOapg.properties.Default: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Language"], typing_extensions.Literal["Source"], typing_extensions.Literal["Name"], typing_extensions.Literal["Type"], typing_extensions.Literal["Default"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Language"]) -> MetaOapg.properties.Language: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Source"]) -> MetaOapg.properties.Source: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> typing.Union['DataModelsTitleType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Default"]) -> typing.Union[MetaOapg.properties.Default, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Language"], typing_extensions.Literal["Source"], typing_extensions.Literal["Name"], typing_extensions.Literal["Type"], typing_extensions.Literal["Default"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Language: typing.Union[MetaOapg.properties.Language, str, ],
        Source: typing.Union[MetaOapg.properties.Source, str, ],
        Name: typing.Union[MetaOapg.properties.Name, str, ],
        Type: typing.Union['DataModelsTitleType', schemas.Unset] = schemas.unset,
        Default: typing.Union[MetaOapg.properties.Default, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CommonTitle':
        return super().__new__(
            cls,
            *_args,
            Language=Language,
            Source=Source,
            Name=Name,
            Type=Type,
            Default=Default,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.data_models_title_type import DataModelsTitleType
