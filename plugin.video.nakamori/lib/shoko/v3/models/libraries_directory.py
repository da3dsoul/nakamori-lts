# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class LibrariesDirectory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            AllowSync = schemas.BoolSchema
            
            
            class Art(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Art':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Composite(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Composite':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Filters = schemas.BoolSchema
            Refreshing = schemas.BoolSchema
            
            
            class Thumb(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Thumb':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Key = schemas.Int32Schema
        
            @staticmethod
            def Type() -> typing.Type['PlexPlexType']:
                return PlexPlexType
            
            
            class Title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Title':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Agent(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Agent':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Scanner(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Scanner':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Language(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Language':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Uuid(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Uuid':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            UpdatedAt = schemas.Int64Schema
            CreatedAt = schemas.Int64Schema
            
            
            class Location(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['LibrariesLocation']:
                        return LibrariesLocation
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Location':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "AllowSync": AllowSync,
                "Art": Art,
                "Composite": Composite,
                "Filters": Filters,
                "Refreshing": Refreshing,
                "Thumb": Thumb,
                "Key": Key,
                "Type": Type,
                "Title": Title,
                "Agent": Agent,
                "Scanner": Scanner,
                "Language": Language,
                "Uuid": Uuid,
                "UpdatedAt": UpdatedAt,
                "CreatedAt": CreatedAt,
                "Location": Location,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AllowSync"]) -> MetaOapg.properties.AllowSync: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Art"]) -> MetaOapg.properties.Art: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Composite"]) -> MetaOapg.properties.Composite: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Filters"]) -> MetaOapg.properties.Filters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Refreshing"]) -> MetaOapg.properties.Refreshing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Thumb"]) -> MetaOapg.properties.Thumb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Key"]) -> MetaOapg.properties.Key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> 'PlexPlexType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Title"]) -> MetaOapg.properties.Title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Agent"]) -> MetaOapg.properties.Agent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Scanner"]) -> MetaOapg.properties.Scanner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Language"]) -> MetaOapg.properties.Language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Uuid"]) -> MetaOapg.properties.Uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UpdatedAt"]) -> MetaOapg.properties.UpdatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreatedAt"]) -> MetaOapg.properties.CreatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Location"]) -> MetaOapg.properties.Location: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["AllowSync"], typing_extensions.Literal["Art"], typing_extensions.Literal["Composite"], typing_extensions.Literal["Filters"], typing_extensions.Literal["Refreshing"], typing_extensions.Literal["Thumb"], typing_extensions.Literal["Key"], typing_extensions.Literal["Type"], typing_extensions.Literal["Title"], typing_extensions.Literal["Agent"], typing_extensions.Literal["Scanner"], typing_extensions.Literal["Language"], typing_extensions.Literal["Uuid"], typing_extensions.Literal["UpdatedAt"], typing_extensions.Literal["CreatedAt"], typing_extensions.Literal["Location"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AllowSync"]) -> typing.Union[MetaOapg.properties.AllowSync, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Art"]) -> typing.Union[MetaOapg.properties.Art, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Composite"]) -> typing.Union[MetaOapg.properties.Composite, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Filters"]) -> typing.Union[MetaOapg.properties.Filters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Refreshing"]) -> typing.Union[MetaOapg.properties.Refreshing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Thumb"]) -> typing.Union[MetaOapg.properties.Thumb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Key"]) -> typing.Union[MetaOapg.properties.Key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> typing.Union['PlexPlexType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Title"]) -> typing.Union[MetaOapg.properties.Title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Agent"]) -> typing.Union[MetaOapg.properties.Agent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Scanner"]) -> typing.Union[MetaOapg.properties.Scanner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Language"]) -> typing.Union[MetaOapg.properties.Language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Uuid"]) -> typing.Union[MetaOapg.properties.Uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UpdatedAt"]) -> typing.Union[MetaOapg.properties.UpdatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreatedAt"]) -> typing.Union[MetaOapg.properties.CreatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Location"]) -> typing.Union[MetaOapg.properties.Location, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["AllowSync"], typing_extensions.Literal["Art"], typing_extensions.Literal["Composite"], typing_extensions.Literal["Filters"], typing_extensions.Literal["Refreshing"], typing_extensions.Literal["Thumb"], typing_extensions.Literal["Key"], typing_extensions.Literal["Type"], typing_extensions.Literal["Title"], typing_extensions.Literal["Agent"], typing_extensions.Literal["Scanner"], typing_extensions.Literal["Language"], typing_extensions.Literal["Uuid"], typing_extensions.Literal["UpdatedAt"], typing_extensions.Literal["CreatedAt"], typing_extensions.Literal["Location"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        AllowSync: typing.Union[MetaOapg.properties.AllowSync, bool, schemas.Unset] = schemas.unset,
        Art: typing.Union[MetaOapg.properties.Art, None, str, schemas.Unset] = schemas.unset,
        Composite: typing.Union[MetaOapg.properties.Composite, None, str, schemas.Unset] = schemas.unset,
        Filters: typing.Union[MetaOapg.properties.Filters, bool, schemas.Unset] = schemas.unset,
        Refreshing: typing.Union[MetaOapg.properties.Refreshing, bool, schemas.Unset] = schemas.unset,
        Thumb: typing.Union[MetaOapg.properties.Thumb, None, str, schemas.Unset] = schemas.unset,
        Key: typing.Union[MetaOapg.properties.Key, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Type: typing.Union['PlexPlexType', schemas.Unset] = schemas.unset,
        Title: typing.Union[MetaOapg.properties.Title, None, str, schemas.Unset] = schemas.unset,
        Agent: typing.Union[MetaOapg.properties.Agent, None, str, schemas.Unset] = schemas.unset,
        Scanner: typing.Union[MetaOapg.properties.Scanner, None, str, schemas.Unset] = schemas.unset,
        Language: typing.Union[MetaOapg.properties.Language, None, str, schemas.Unset] = schemas.unset,
        Uuid: typing.Union[MetaOapg.properties.Uuid, None, str, schemas.Unset] = schemas.unset,
        UpdatedAt: typing.Union[MetaOapg.properties.UpdatedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        CreatedAt: typing.Union[MetaOapg.properties.CreatedAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Location: typing.Union[MetaOapg.properties.Location, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'LibrariesDirectory':
        return super().__new__(
            cls,
            *_args,
            AllowSync=AllowSync,
            Art=Art,
            Composite=Composite,
            Filters=Filters,
            Refreshing=Refreshing,
            Thumb=Thumb,
            Key=Key,
            Type=Type,
            Title=Title,
            Agent=Agent,
            Scanner=Scanner,
            Language=Language,
            Uuid=Uuid,
            UpdatedAt=UpdatedAt,
            CreatedAt=CreatedAt,
            Location=Location,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.libraries_location import LibrariesLocation
from lib.shoko.v3.lib.shoko.v3.models.plex_plex_type import PlexPlexType
