# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class FileSeriesCrossReference(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def SeriesID() -> typing.Type['FileCrossReferenceIDs']:
                return FileCrossReferenceIDs
            
            
            class EpisodeIDs(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FileCrossReferenceIDs']:
                        return FileCrossReferenceIDs
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'EpisodeIDs':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "SeriesID": SeriesID,
                "EpisodeIDs": EpisodeIDs,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SeriesID"]) -> 'FileCrossReferenceIDs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EpisodeIDs"]) -> MetaOapg.properties.EpisodeIDs: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["SeriesID"], typing_extensions.Literal["EpisodeIDs"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SeriesID"]) -> typing.Union['FileCrossReferenceIDs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EpisodeIDs"]) -> typing.Union[MetaOapg.properties.EpisodeIDs, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["SeriesID"], typing_extensions.Literal["EpisodeIDs"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        SeriesID: typing.Union['FileCrossReferenceIDs', schemas.Unset] = schemas.unset,
        EpisodeIDs: typing.Union[MetaOapg.properties.EpisodeIDs, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'FileSeriesCrossReference':
        return super().__new__(
            cls,
            *_args,
            SeriesID=SeriesID,
            EpisodeIDs=EpisodeIDs,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.file_cross_reference_ids import FileCrossReferenceIDs
