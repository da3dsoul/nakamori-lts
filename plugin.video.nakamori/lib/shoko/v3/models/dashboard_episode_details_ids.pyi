# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class DashboardEpisodeDetailsIDs(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Object holding ids related to the episode.
    """


    class MetaOapg:
        
        class properties:
            ID = schemas.Int32Schema
            Series = schemas.Int32Schema
            
            
            class ShokoFile(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ShokoFile':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ShokoEpisode(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ShokoEpisode':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ShokoSeries(
                schemas.Int32Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ShokoSeries':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "ID": ID,
                "Series": Series,
                "ShokoFile": ShokoFile,
                "ShokoEpisode": ShokoEpisode,
                "ShokoSeries": ShokoSeries,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Series"]) -> MetaOapg.properties.Series: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ShokoFile"]) -> MetaOapg.properties.ShokoFile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ShokoEpisode"]) -> MetaOapg.properties.ShokoEpisode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ShokoSeries"]) -> MetaOapg.properties.ShokoSeries: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ID"], typing_extensions.Literal["Series"], typing_extensions.Literal["ShokoFile"], typing_extensions.Literal["ShokoEpisode"], typing_extensions.Literal["ShokoSeries"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Series"]) -> typing.Union[MetaOapg.properties.Series, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ShokoFile"]) -> typing.Union[MetaOapg.properties.ShokoFile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ShokoEpisode"]) -> typing.Union[MetaOapg.properties.ShokoEpisode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ShokoSeries"]) -> typing.Union[MetaOapg.properties.ShokoSeries, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ID"], typing_extensions.Literal["Series"], typing_extensions.Literal["ShokoFile"], typing_extensions.Literal["ShokoEpisode"], typing_extensions.Literal["ShokoSeries"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ID: typing.Union[MetaOapg.properties.ID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Series: typing.Union[MetaOapg.properties.Series, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ShokoFile: typing.Union[MetaOapg.properties.ShokoFile, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ShokoEpisode: typing.Union[MetaOapg.properties.ShokoEpisode, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ShokoSeries: typing.Union[MetaOapg.properties.ShokoSeries, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DashboardEpisodeDetailsIDs':
        return super().__new__(
            cls,
            *_args,
            ID=ID,
            Series=Series,
            ShokoFile=ShokoFile,
            ShokoEpisode=ShokoEpisode,
            ShokoSeries=ShokoSeries,
            _configuration=_configuration,
        )
