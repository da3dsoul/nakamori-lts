# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class MediaInfoVideoStreamInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            Width = schemas.Int32Schema
            Height = schemas.Int32Schema
            
            
            class Resolution(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Resolution':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            PixelAspectRatio = schemas.Float64Schema
            FrameRate = schemas.Float64Schema
            
            
            class FrameRateMode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'FrameRateMode':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            FrameCount = schemas.Int32Schema
            
            
            class ScanType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ScanType':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ColorSpace(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ColorSpace':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ChromaSubsampling(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ChromaSubsampling':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class MatrixCoefficients(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'MatrixCoefficients':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            BitRate = schemas.Int32Schema
            BitDepth = schemas.Int32Schema
            ID = schemas.Int32Schema
            
            
            class UID(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'UID':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Title':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            Order = schemas.Int32Schema
            IsDefault = schemas.BoolSchema
            IsForced = schemas.BoolSchema
        
            @staticmethod
            def Language() -> typing.Type['DataModelsTitleLanguage']:
                return DataModelsTitleLanguage
            
            
            class LanguageCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'LanguageCode':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def Codec() -> typing.Type['MediaInfoStreamCodecInfo']:
                return MediaInfoStreamCodecInfo
        
            @staticmethod
            def Format() -> typing.Type['MediaInfoStreamFormatInfo']:
                return MediaInfoStreamFormatInfo
            __annotations__ = {
                "Width": Width,
                "Height": Height,
                "Resolution": Resolution,
                "PixelAspectRatio": PixelAspectRatio,
                "FrameRate": FrameRate,
                "FrameRateMode": FrameRateMode,
                "FrameCount": FrameCount,
                "ScanType": ScanType,
                "ColorSpace": ColorSpace,
                "ChromaSubsampling": ChromaSubsampling,
                "MatrixCoefficients": MatrixCoefficients,
                "BitRate": BitRate,
                "BitDepth": BitDepth,
                "ID": ID,
                "UID": UID,
                "Title": Title,
                "Order": Order,
                "IsDefault": IsDefault,
                "IsForced": IsForced,
                "Language": Language,
                "LanguageCode": LanguageCode,
                "Codec": Codec,
                "Format": Format,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Width"]) -> MetaOapg.properties.Width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Height"]) -> MetaOapg.properties.Height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Resolution"]) -> MetaOapg.properties.Resolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PixelAspectRatio"]) -> MetaOapg.properties.PixelAspectRatio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FrameRate"]) -> MetaOapg.properties.FrameRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FrameRateMode"]) -> MetaOapg.properties.FrameRateMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FrameCount"]) -> MetaOapg.properties.FrameCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ScanType"]) -> MetaOapg.properties.ScanType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ColorSpace"]) -> MetaOapg.properties.ColorSpace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ChromaSubsampling"]) -> MetaOapg.properties.ChromaSubsampling: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MatrixCoefficients"]) -> MetaOapg.properties.MatrixCoefficients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BitRate"]) -> MetaOapg.properties.BitRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BitDepth"]) -> MetaOapg.properties.BitDepth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UID"]) -> MetaOapg.properties.UID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Title"]) -> MetaOapg.properties.Title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Order"]) -> MetaOapg.properties.Order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsDefault"]) -> MetaOapg.properties.IsDefault: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsForced"]) -> MetaOapg.properties.IsForced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Language"]) -> 'DataModelsTitleLanguage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LanguageCode"]) -> MetaOapg.properties.LanguageCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Codec"]) -> 'MediaInfoStreamCodecInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Format"]) -> 'MediaInfoStreamFormatInfo': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Width"], typing_extensions.Literal["Height"], typing_extensions.Literal["Resolution"], typing_extensions.Literal["PixelAspectRatio"], typing_extensions.Literal["FrameRate"], typing_extensions.Literal["FrameRateMode"], typing_extensions.Literal["FrameCount"], typing_extensions.Literal["ScanType"], typing_extensions.Literal["ColorSpace"], typing_extensions.Literal["ChromaSubsampling"], typing_extensions.Literal["MatrixCoefficients"], typing_extensions.Literal["BitRate"], typing_extensions.Literal["BitDepth"], typing_extensions.Literal["ID"], typing_extensions.Literal["UID"], typing_extensions.Literal["Title"], typing_extensions.Literal["Order"], typing_extensions.Literal["IsDefault"], typing_extensions.Literal["IsForced"], typing_extensions.Literal["Language"], typing_extensions.Literal["LanguageCode"], typing_extensions.Literal["Codec"], typing_extensions.Literal["Format"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Width"]) -> typing.Union[MetaOapg.properties.Width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Height"]) -> typing.Union[MetaOapg.properties.Height, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Resolution"]) -> typing.Union[MetaOapg.properties.Resolution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PixelAspectRatio"]) -> typing.Union[MetaOapg.properties.PixelAspectRatio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FrameRate"]) -> typing.Union[MetaOapg.properties.FrameRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FrameRateMode"]) -> typing.Union[MetaOapg.properties.FrameRateMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FrameCount"]) -> typing.Union[MetaOapg.properties.FrameCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ScanType"]) -> typing.Union[MetaOapg.properties.ScanType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ColorSpace"]) -> typing.Union[MetaOapg.properties.ColorSpace, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ChromaSubsampling"]) -> typing.Union[MetaOapg.properties.ChromaSubsampling, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MatrixCoefficients"]) -> typing.Union[MetaOapg.properties.MatrixCoefficients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BitRate"]) -> typing.Union[MetaOapg.properties.BitRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BitDepth"]) -> typing.Union[MetaOapg.properties.BitDepth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UID"]) -> typing.Union[MetaOapg.properties.UID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Title"]) -> typing.Union[MetaOapg.properties.Title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Order"]) -> typing.Union[MetaOapg.properties.Order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsDefault"]) -> typing.Union[MetaOapg.properties.IsDefault, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsForced"]) -> typing.Union[MetaOapg.properties.IsForced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Language"]) -> typing.Union['DataModelsTitleLanguage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LanguageCode"]) -> typing.Union[MetaOapg.properties.LanguageCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Codec"]) -> typing.Union['MediaInfoStreamCodecInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Format"]) -> typing.Union['MediaInfoStreamFormatInfo', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Width"], typing_extensions.Literal["Height"], typing_extensions.Literal["Resolution"], typing_extensions.Literal["PixelAspectRatio"], typing_extensions.Literal["FrameRate"], typing_extensions.Literal["FrameRateMode"], typing_extensions.Literal["FrameCount"], typing_extensions.Literal["ScanType"], typing_extensions.Literal["ColorSpace"], typing_extensions.Literal["ChromaSubsampling"], typing_extensions.Literal["MatrixCoefficients"], typing_extensions.Literal["BitRate"], typing_extensions.Literal["BitDepth"], typing_extensions.Literal["ID"], typing_extensions.Literal["UID"], typing_extensions.Literal["Title"], typing_extensions.Literal["Order"], typing_extensions.Literal["IsDefault"], typing_extensions.Literal["IsForced"], typing_extensions.Literal["Language"], typing_extensions.Literal["LanguageCode"], typing_extensions.Literal["Codec"], typing_extensions.Literal["Format"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Width: typing.Union[MetaOapg.properties.Width, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Height: typing.Union[MetaOapg.properties.Height, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Resolution: typing.Union[MetaOapg.properties.Resolution, None, str, schemas.Unset] = schemas.unset,
        PixelAspectRatio: typing.Union[MetaOapg.properties.PixelAspectRatio, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        FrameRate: typing.Union[MetaOapg.properties.FrameRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        FrameRateMode: typing.Union[MetaOapg.properties.FrameRateMode, None, str, schemas.Unset] = schemas.unset,
        FrameCount: typing.Union[MetaOapg.properties.FrameCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ScanType: typing.Union[MetaOapg.properties.ScanType, None, str, schemas.Unset] = schemas.unset,
        ColorSpace: typing.Union[MetaOapg.properties.ColorSpace, None, str, schemas.Unset] = schemas.unset,
        ChromaSubsampling: typing.Union[MetaOapg.properties.ChromaSubsampling, None, str, schemas.Unset] = schemas.unset,
        MatrixCoefficients: typing.Union[MetaOapg.properties.MatrixCoefficients, None, str, schemas.Unset] = schemas.unset,
        BitRate: typing.Union[MetaOapg.properties.BitRate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        BitDepth: typing.Union[MetaOapg.properties.BitDepth, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ID: typing.Union[MetaOapg.properties.ID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        UID: typing.Union[MetaOapg.properties.UID, None, str, schemas.Unset] = schemas.unset,
        Title: typing.Union[MetaOapg.properties.Title, None, str, schemas.Unset] = schemas.unset,
        Order: typing.Union[MetaOapg.properties.Order, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        IsDefault: typing.Union[MetaOapg.properties.IsDefault, bool, schemas.Unset] = schemas.unset,
        IsForced: typing.Union[MetaOapg.properties.IsForced, bool, schemas.Unset] = schemas.unset,
        Language: typing.Union['DataModelsTitleLanguage', schemas.Unset] = schemas.unset,
        LanguageCode: typing.Union[MetaOapg.properties.LanguageCode, None, str, schemas.Unset] = schemas.unset,
        Codec: typing.Union['MediaInfoStreamCodecInfo', schemas.Unset] = schemas.unset,
        Format: typing.Union['MediaInfoStreamFormatInfo', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MediaInfoVideoStreamInfo':
        return super().__new__(
            cls,
            *_args,
            Width=Width,
            Height=Height,
            Resolution=Resolution,
            PixelAspectRatio=PixelAspectRatio,
            FrameRate=FrameRate,
            FrameRateMode=FrameRateMode,
            FrameCount=FrameCount,
            ScanType=ScanType,
            ColorSpace=ColorSpace,
            ChromaSubsampling=ChromaSubsampling,
            MatrixCoefficients=MatrixCoefficients,
            BitRate=BitRate,
            BitDepth=BitDepth,
            ID=ID,
            UID=UID,
            Title=Title,
            Order=Order,
            IsDefault=IsDefault,
            IsForced=IsForced,
            Language=Language,
            LanguageCode=LanguageCode,
            Codec=Codec,
            Format=Format,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.data_models_title_language import DataModelsTitleLanguage
from lib.shoko.v3.lib.shoko.v3.models.media_info_stream_codec_info import MediaInfoStreamCodecInfo
from lib.shoko.v3.lib.shoko.v3.models.media_info_stream_format_info import MediaInfoStreamFormatInfo
