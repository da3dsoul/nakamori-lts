# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class ShokoSeriesSizes(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Downloaded, Watched, Total, etc
    """


    class MetaOapg:
        required = {
            "Total",
            "Local",
            "FileSources",
        }
        
        class properties:
        
            @staticmethod
            def FileSources() -> typing.Type['SeriesSizesFileSourceCounts']:
                return SeriesSizesFileSourceCounts
        
            @staticmethod
            def Local() -> typing.Type['SeriesSizesEpisodeTypeCounts']:
                return SeriesSizesEpisodeTypeCounts
        
            @staticmethod
            def Total() -> typing.Type['SeriesSizesEpisodeTypeCounts']:
                return SeriesSizesEpisodeTypeCounts
            Missing = schemas.Int32Schema
            Hidden = schemas.Int32Schema
        
            @staticmethod
            def Watched() -> typing.Type['SeriesSizesEpisodeTypeCounts']:
                return SeriesSizesEpisodeTypeCounts
            __annotations__ = {
                "FileSources": FileSources,
                "Local": Local,
                "Total": Total,
                "Missing": Missing,
                "Hidden": Hidden,
                "Watched": Watched,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    Total: 'SeriesSizesEpisodeTypeCounts'
    Local: 'SeriesSizesEpisodeTypeCounts'
    FileSources: 'SeriesSizesFileSourceCounts'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Total"]) -> 'SeriesSizesEpisodeTypeCounts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Local"]) -> 'SeriesSizesEpisodeTypeCounts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FileSources"]) -> 'SeriesSizesFileSourceCounts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Missing"]) -> MetaOapg.properties.Missing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Hidden"]) -> MetaOapg.properties.Hidden: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Watched"]) -> 'SeriesSizesEpisodeTypeCounts': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Total"], typing_extensions.Literal["Local"], typing_extensions.Literal["FileSources"], typing_extensions.Literal["Missing"], typing_extensions.Literal["Hidden"], typing_extensions.Literal["Watched"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Total"]) -> 'SeriesSizesEpisodeTypeCounts': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Local"]) -> 'SeriesSizesEpisodeTypeCounts': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FileSources"]) -> 'SeriesSizesFileSourceCounts': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Missing"]) -> typing.Union[MetaOapg.properties.Missing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Hidden"]) -> typing.Union[MetaOapg.properties.Hidden, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Watched"]) -> typing.Union['SeriesSizesEpisodeTypeCounts', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Total"], typing_extensions.Literal["Local"], typing_extensions.Literal["FileSources"], typing_extensions.Literal["Missing"], typing_extensions.Literal["Hidden"], typing_extensions.Literal["Watched"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Total: 'SeriesSizesEpisodeTypeCounts',
        Local: 'SeriesSizesEpisodeTypeCounts',
        FileSources: 'SeriesSizesFileSourceCounts',
        Missing: typing.Union[MetaOapg.properties.Missing, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Hidden: typing.Union[MetaOapg.properties.Hidden, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        Watched: typing.Union['SeriesSizesEpisodeTypeCounts', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ShokoSeriesSizes':
        return super().__new__(
            cls,
            *_args,
            Total=Total,
            Local=Local,
            FileSources=FileSources,
            Missing=Missing,
            Hidden=Hidden,
            Watched=Watched,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.series_sizes_episode_type_counts import SeriesSizesEpisodeTypeCounts
from lib.shoko.v3.lib.shoko.v3.models.series_sizes_file_source_counts import SeriesSizesFileSourceCounts
