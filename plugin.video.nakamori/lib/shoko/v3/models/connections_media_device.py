# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class ConnectionsMediaDevice(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class Connection(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ConnectionsConnection']:
                        return ConnectionsConnection
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Connection':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Product(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Product':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ProductVersion(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ProductVersion':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Platform(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Platform':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class PlatformVersion(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'PlatformVersion':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Device(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Device':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class ClientIdentifier(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ClientIdentifier':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class CreatedAt(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'CreatedAt':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class LastSeenAt(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'LastSeenAt':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Provides(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Provides':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Owned(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Owned':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class AccessToken(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'AccessToken':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class PublicAddress(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'PublicAddress':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class HttpsRequired(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'HttpsRequired':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Synced(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Synced':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Relay(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Relay':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class PublicAddressMatches(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'PublicAddressMatches':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Presence(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Presence':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class OwnerId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'OwnerId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Home(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Home':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class SourceTitle(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'SourceTitle':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "Connection": Connection,
                "Name": Name,
                "Product": Product,
                "ProductVersion": ProductVersion,
                "Platform": Platform,
                "PlatformVersion": PlatformVersion,
                "Device": Device,
                "ClientIdentifier": ClientIdentifier,
                "CreatedAt": CreatedAt,
                "LastSeenAt": LastSeenAt,
                "Provides": Provides,
                "Owned": Owned,
                "AccessToken": AccessToken,
                "PublicAddress": PublicAddress,
                "HttpsRequired": HttpsRequired,
                "Synced": Synced,
                "Relay": Relay,
                "PublicAddressMatches": PublicAddressMatches,
                "Presence": Presence,
                "OwnerId": OwnerId,
                "Home": Home,
                "SourceTitle": SourceTitle,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Connection"]) -> MetaOapg.properties.Connection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Product"]) -> MetaOapg.properties.Product: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ProductVersion"]) -> MetaOapg.properties.ProductVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Platform"]) -> MetaOapg.properties.Platform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PlatformVersion"]) -> MetaOapg.properties.PlatformVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Device"]) -> MetaOapg.properties.Device: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ClientIdentifier"]) -> MetaOapg.properties.ClientIdentifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreatedAt"]) -> MetaOapg.properties.CreatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastSeenAt"]) -> MetaOapg.properties.LastSeenAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Provides"]) -> MetaOapg.properties.Provides: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Owned"]) -> MetaOapg.properties.Owned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AccessToken"]) -> MetaOapg.properties.AccessToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PublicAddress"]) -> MetaOapg.properties.PublicAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["HttpsRequired"]) -> MetaOapg.properties.HttpsRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Synced"]) -> MetaOapg.properties.Synced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Relay"]) -> MetaOapg.properties.Relay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PublicAddressMatches"]) -> MetaOapg.properties.PublicAddressMatches: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Presence"]) -> MetaOapg.properties.Presence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OwnerId"]) -> MetaOapg.properties.OwnerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Home"]) -> MetaOapg.properties.Home: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SourceTitle"]) -> MetaOapg.properties.SourceTitle: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Connection"], typing_extensions.Literal["Name"], typing_extensions.Literal["Product"], typing_extensions.Literal["ProductVersion"], typing_extensions.Literal["Platform"], typing_extensions.Literal["PlatformVersion"], typing_extensions.Literal["Device"], typing_extensions.Literal["ClientIdentifier"], typing_extensions.Literal["CreatedAt"], typing_extensions.Literal["LastSeenAt"], typing_extensions.Literal["Provides"], typing_extensions.Literal["Owned"], typing_extensions.Literal["AccessToken"], typing_extensions.Literal["PublicAddress"], typing_extensions.Literal["HttpsRequired"], typing_extensions.Literal["Synced"], typing_extensions.Literal["Relay"], typing_extensions.Literal["PublicAddressMatches"], typing_extensions.Literal["Presence"], typing_extensions.Literal["OwnerId"], typing_extensions.Literal["Home"], typing_extensions.Literal["SourceTitle"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Connection"]) -> typing.Union[MetaOapg.properties.Connection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> typing.Union[MetaOapg.properties.Name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Product"]) -> typing.Union[MetaOapg.properties.Product, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ProductVersion"]) -> typing.Union[MetaOapg.properties.ProductVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Platform"]) -> typing.Union[MetaOapg.properties.Platform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PlatformVersion"]) -> typing.Union[MetaOapg.properties.PlatformVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Device"]) -> typing.Union[MetaOapg.properties.Device, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ClientIdentifier"]) -> typing.Union[MetaOapg.properties.ClientIdentifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreatedAt"]) -> typing.Union[MetaOapg.properties.CreatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastSeenAt"]) -> typing.Union[MetaOapg.properties.LastSeenAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Provides"]) -> typing.Union[MetaOapg.properties.Provides, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Owned"]) -> typing.Union[MetaOapg.properties.Owned, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AccessToken"]) -> typing.Union[MetaOapg.properties.AccessToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PublicAddress"]) -> typing.Union[MetaOapg.properties.PublicAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["HttpsRequired"]) -> typing.Union[MetaOapg.properties.HttpsRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Synced"]) -> typing.Union[MetaOapg.properties.Synced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Relay"]) -> typing.Union[MetaOapg.properties.Relay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PublicAddressMatches"]) -> typing.Union[MetaOapg.properties.PublicAddressMatches, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Presence"]) -> typing.Union[MetaOapg.properties.Presence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OwnerId"]) -> typing.Union[MetaOapg.properties.OwnerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Home"]) -> typing.Union[MetaOapg.properties.Home, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SourceTitle"]) -> typing.Union[MetaOapg.properties.SourceTitle, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Connection"], typing_extensions.Literal["Name"], typing_extensions.Literal["Product"], typing_extensions.Literal["ProductVersion"], typing_extensions.Literal["Platform"], typing_extensions.Literal["PlatformVersion"], typing_extensions.Literal["Device"], typing_extensions.Literal["ClientIdentifier"], typing_extensions.Literal["CreatedAt"], typing_extensions.Literal["LastSeenAt"], typing_extensions.Literal["Provides"], typing_extensions.Literal["Owned"], typing_extensions.Literal["AccessToken"], typing_extensions.Literal["PublicAddress"], typing_extensions.Literal["HttpsRequired"], typing_extensions.Literal["Synced"], typing_extensions.Literal["Relay"], typing_extensions.Literal["PublicAddressMatches"], typing_extensions.Literal["Presence"], typing_extensions.Literal["OwnerId"], typing_extensions.Literal["Home"], typing_extensions.Literal["SourceTitle"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Connection: typing.Union[MetaOapg.properties.Connection, list, tuple, None, schemas.Unset] = schemas.unset,
        Name: typing.Union[MetaOapg.properties.Name, None, str, schemas.Unset] = schemas.unset,
        Product: typing.Union[MetaOapg.properties.Product, None, str, schemas.Unset] = schemas.unset,
        ProductVersion: typing.Union[MetaOapg.properties.ProductVersion, None, str, schemas.Unset] = schemas.unset,
        Platform: typing.Union[MetaOapg.properties.Platform, None, str, schemas.Unset] = schemas.unset,
        PlatformVersion: typing.Union[MetaOapg.properties.PlatformVersion, None, str, schemas.Unset] = schemas.unset,
        Device: typing.Union[MetaOapg.properties.Device, None, str, schemas.Unset] = schemas.unset,
        ClientIdentifier: typing.Union[MetaOapg.properties.ClientIdentifier, None, str, schemas.Unset] = schemas.unset,
        CreatedAt: typing.Union[MetaOapg.properties.CreatedAt, None, str, schemas.Unset] = schemas.unset,
        LastSeenAt: typing.Union[MetaOapg.properties.LastSeenAt, None, str, schemas.Unset] = schemas.unset,
        Provides: typing.Union[MetaOapg.properties.Provides, None, str, schemas.Unset] = schemas.unset,
        Owned: typing.Union[MetaOapg.properties.Owned, None, str, schemas.Unset] = schemas.unset,
        AccessToken: typing.Union[MetaOapg.properties.AccessToken, None, str, schemas.Unset] = schemas.unset,
        PublicAddress: typing.Union[MetaOapg.properties.PublicAddress, None, str, schemas.Unset] = schemas.unset,
        HttpsRequired: typing.Union[MetaOapg.properties.HttpsRequired, None, str, schemas.Unset] = schemas.unset,
        Synced: typing.Union[MetaOapg.properties.Synced, None, str, schemas.Unset] = schemas.unset,
        Relay: typing.Union[MetaOapg.properties.Relay, None, str, schemas.Unset] = schemas.unset,
        PublicAddressMatches: typing.Union[MetaOapg.properties.PublicAddressMatches, None, str, schemas.Unset] = schemas.unset,
        Presence: typing.Union[MetaOapg.properties.Presence, None, str, schemas.Unset] = schemas.unset,
        OwnerId: typing.Union[MetaOapg.properties.OwnerId, None, str, schemas.Unset] = schemas.unset,
        Home: typing.Union[MetaOapg.properties.Home, None, str, schemas.Unset] = schemas.unset,
        SourceTitle: typing.Union[MetaOapg.properties.SourceTitle, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ConnectionsMediaDevice':
        return super().__new__(
            cls,
            *_args,
            Connection=Connection,
            Name=Name,
            Product=Product,
            ProductVersion=ProductVersion,
            Platform=Platform,
            PlatformVersion=PlatformVersion,
            Device=Device,
            ClientIdentifier=ClientIdentifier,
            CreatedAt=CreatedAt,
            LastSeenAt=LastSeenAt,
            Provides=Provides,
            Owned=Owned,
            AccessToken=AccessToken,
            PublicAddress=PublicAddress,
            HttpsRequired=HttpsRequired,
            Synced=Synced,
            Relay=Relay,
            PublicAddressMatches=PublicAddressMatches,
            Presence=Presence,
            OwnerId=OwnerId,
            Home=Home,
            SourceTitle=SourceTitle,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.connections_connection import ConnectionsConnection
