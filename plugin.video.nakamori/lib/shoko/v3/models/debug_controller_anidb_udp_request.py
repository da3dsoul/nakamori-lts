# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class DebugControllerAnidbUdpRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An abstraction for an AniDB UDP API Request.
    """


    class MetaOapg:
        required = {
            "Action",
        }
        
        class properties:
            
            
            class Action(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            Unsafe = schemas.BoolSchema
            
            
            class Payload(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
            
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'Payload':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "Action": Action,
                "Unsafe": Unsafe,
                "Payload": Payload,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    Action: MetaOapg.properties.Action
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Action"]) -> MetaOapg.properties.Action: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Unsafe"]) -> MetaOapg.properties.Unsafe: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Payload"]) -> MetaOapg.properties.Payload: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Action"], typing_extensions.Literal["Unsafe"], typing_extensions.Literal["Payload"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Action"]) -> MetaOapg.properties.Action: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Unsafe"]) -> typing.Union[MetaOapg.properties.Unsafe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Payload"]) -> typing.Union[MetaOapg.properties.Payload, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Action"], typing_extensions.Literal["Unsafe"], typing_extensions.Literal["Payload"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Action: typing.Union[MetaOapg.properties.Action, str, ],
        Unsafe: typing.Union[MetaOapg.properties.Unsafe, bool, schemas.Unset] = schemas.unset,
        Payload: typing.Union[MetaOapg.properties.Payload, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DebugControllerAnidbUdpRequest':
        return super().__new__(
            cls,
            *_args,
            Action=Action,
            Unsafe=Unsafe,
            Payload=Payload,
            _configuration=_configuration,
        )
