# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class ShokoGroup(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Group object, stores all of the group info. Groups are Shoko Internal Objects, so they are handled a bit differently
    """


    class MetaOapg:
        required = {
            "Size",
            "Name",
        }
        
        class properties:
            
            
            class Name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            Size = schemas.Int32Schema
        
            @staticmethod
            def IDs() -> typing.Type['GroupGroupIDs']:
                return GroupGroupIDs
            
            
            class SortName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'SortName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class Description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            HasCustomName = schemas.BoolSchema
            HasCustomDescription = schemas.BoolSchema
        
            @staticmethod
            def Images() -> typing.Type['CommonImages']:
                return CommonImages
        
            @staticmethod
            def Sizes() -> typing.Type['ShokoGroupSizes']:
                return ShokoGroupSizes
            __annotations__ = {
                "Name": Name,
                "Size": Size,
                "IDs": IDs,
                "SortName": SortName,
                "Description": Description,
                "HasCustomName": HasCustomName,
                "HasCustomDescription": HasCustomDescription,
                "Images": Images,
                "Sizes": Sizes,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    Size: MetaOapg.properties.Size
    Name: MetaOapg.properties.Name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Size"]) -> MetaOapg.properties.Size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IDs"]) -> 'GroupGroupIDs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SortName"]) -> MetaOapg.properties.SortName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["HasCustomName"]) -> MetaOapg.properties.HasCustomName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["HasCustomDescription"]) -> MetaOapg.properties.HasCustomDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Images"]) -> 'CommonImages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sizes"]) -> 'ShokoGroupSizes': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Size"], typing_extensions.Literal["Name"], typing_extensions.Literal["IDs"], typing_extensions.Literal["SortName"], typing_extensions.Literal["Description"], typing_extensions.Literal["HasCustomName"], typing_extensions.Literal["HasCustomDescription"], typing_extensions.Literal["Images"], typing_extensions.Literal["Sizes"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Size"]) -> MetaOapg.properties.Size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IDs"]) -> typing.Union['GroupGroupIDs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SortName"]) -> typing.Union[MetaOapg.properties.SortName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> typing.Union[MetaOapg.properties.Description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["HasCustomName"]) -> typing.Union[MetaOapg.properties.HasCustomName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["HasCustomDescription"]) -> typing.Union[MetaOapg.properties.HasCustomDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Images"]) -> typing.Union['CommonImages', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sizes"]) -> typing.Union['ShokoGroupSizes', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Size"], typing_extensions.Literal["Name"], typing_extensions.Literal["IDs"], typing_extensions.Literal["SortName"], typing_extensions.Literal["Description"], typing_extensions.Literal["HasCustomName"], typing_extensions.Literal["HasCustomDescription"], typing_extensions.Literal["Images"], typing_extensions.Literal["Sizes"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Size: typing.Union[MetaOapg.properties.Size, decimal.Decimal, int, ],
        Name: typing.Union[MetaOapg.properties.Name, str, ],
        IDs: typing.Union['GroupGroupIDs', schemas.Unset] = schemas.unset,
        SortName: typing.Union[MetaOapg.properties.SortName, None, str, schemas.Unset] = schemas.unset,
        Description: typing.Union[MetaOapg.properties.Description, None, str, schemas.Unset] = schemas.unset,
        HasCustomName: typing.Union[MetaOapg.properties.HasCustomName, bool, schemas.Unset] = schemas.unset,
        HasCustomDescription: typing.Union[MetaOapg.properties.HasCustomDescription, bool, schemas.Unset] = schemas.unset,
        Images: typing.Union['CommonImages', schemas.Unset] = schemas.unset,
        Sizes: typing.Union['ShokoGroupSizes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ShokoGroup':
        return super().__new__(
            cls,
            *_args,
            Size=Size,
            Name=Name,
            IDs=IDs,
            SortName=SortName,
            Description=Description,
            HasCustomName=HasCustomName,
            HasCustomDescription=HasCustomDescription,
            Images=Images,
            Sizes=Sizes,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.common_images import CommonImages
from lib.shoko.v3.lib.shoko.v3.models.group_group_ids import GroupGroupIDs
from lib.shoko.v3.lib.shoko.v3.models.shoko_group_sizes import ShokoGroupSizes
