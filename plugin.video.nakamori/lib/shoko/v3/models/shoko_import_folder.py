# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class ShokoImportFolder(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "Size",
            "Name",
        }
        
        class properties:
            
            
            class Name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    min_length = 1
            Size = schemas.Int32Schema
            ID = schemas.Int32Schema
            WatchForNewFiles = schemas.BoolSchema
        
            @staticmethod
            def DropFolderType() -> typing.Type['ShokoDropFolderType']:
                return ShokoDropFolderType
            
            
            class Path(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Path':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            FileSize = schemas.Int64Schema
            __annotations__ = {
                "Name": Name,
                "Size": Size,
                "ID": ID,
                "WatchForNewFiles": WatchForNewFiles,
                "DropFolderType": DropFolderType,
                "Path": Path,
                "FileSize": FileSize,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    Size: MetaOapg.properties.Size
    Name: MetaOapg.properties.Name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Size"]) -> MetaOapg.properties.Size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> MetaOapg.properties.ID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["WatchForNewFiles"]) -> MetaOapg.properties.WatchForNewFiles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DropFolderType"]) -> 'ShokoDropFolderType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Path"]) -> MetaOapg.properties.Path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FileSize"]) -> MetaOapg.properties.FileSize: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Size"], typing_extensions.Literal["Name"], typing_extensions.Literal["ID"], typing_extensions.Literal["WatchForNewFiles"], typing_extensions.Literal["DropFolderType"], typing_extensions.Literal["Path"], typing_extensions.Literal["FileSize"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Size"]) -> MetaOapg.properties.Size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> typing.Union[MetaOapg.properties.ID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["WatchForNewFiles"]) -> typing.Union[MetaOapg.properties.WatchForNewFiles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DropFolderType"]) -> typing.Union['ShokoDropFolderType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Path"]) -> typing.Union[MetaOapg.properties.Path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FileSize"]) -> typing.Union[MetaOapg.properties.FileSize, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Size"], typing_extensions.Literal["Name"], typing_extensions.Literal["ID"], typing_extensions.Literal["WatchForNewFiles"], typing_extensions.Literal["DropFolderType"], typing_extensions.Literal["Path"], typing_extensions.Literal["FileSize"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Size: typing.Union[MetaOapg.properties.Size, decimal.Decimal, int, ],
        Name: typing.Union[MetaOapg.properties.Name, str, ],
        ID: typing.Union[MetaOapg.properties.ID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        WatchForNewFiles: typing.Union[MetaOapg.properties.WatchForNewFiles, bool, schemas.Unset] = schemas.unset,
        DropFolderType: typing.Union['ShokoDropFolderType', schemas.Unset] = schemas.unset,
        Path: typing.Union[MetaOapg.properties.Path, None, str, schemas.Unset] = schemas.unset,
        FileSize: typing.Union[MetaOapg.properties.FileSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ShokoImportFolder':
        return super().__new__(
            cls,
            *_args,
            Size=Size,
            Name=Name,
            ID=ID,
            WatchForNewFiles=WatchForNewFiles,
            DropFolderType=DropFolderType,
            Path=Path,
            FileSize=FileSize,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.shoko_drop_folder_type import ShokoDropFolderType
