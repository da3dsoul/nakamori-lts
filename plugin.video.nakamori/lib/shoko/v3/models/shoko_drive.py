# coding: utf-8

"""
    Shoko API 3

    Shoko Server API.  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lib.shoko.v3 import schemas  # noqa: F401


class ShokoDrive(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def Type() -> typing.Type['IODriveType']:
                return IODriveType
            
            
            class Path(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Path':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            IsAccessible = schemas.BoolSchema
        
            @staticmethod
            def Sizes() -> typing.Type['ShokoChildItems']:
                return ShokoChildItems
            __annotations__ = {
                "Type": Type,
                "Path": Path,
                "IsAccessible": IsAccessible,
                "Sizes": Sizes,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> 'IODriveType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Path"]) -> MetaOapg.properties.Path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsAccessible"]) -> MetaOapg.properties.IsAccessible: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Sizes"]) -> 'ShokoChildItems': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Type"], typing_extensions.Literal["Path"], typing_extensions.Literal["IsAccessible"], typing_extensions.Literal["Sizes"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> typing.Union['IODriveType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Path"]) -> typing.Union[MetaOapg.properties.Path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsAccessible"]) -> typing.Union[MetaOapg.properties.IsAccessible, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Sizes"]) -> typing.Union['ShokoChildItems', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Type"], typing_extensions.Literal["Path"], typing_extensions.Literal["IsAccessible"], typing_extensions.Literal["Sizes"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        Type: typing.Union['IODriveType', schemas.Unset] = schemas.unset,
        Path: typing.Union[MetaOapg.properties.Path, None, str, schemas.Unset] = schemas.unset,
        IsAccessible: typing.Union[MetaOapg.properties.IsAccessible, bool, schemas.Unset] = schemas.unset,
        Sizes: typing.Union['ShokoChildItems', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ShokoDrive':
        return super().__new__(
            cls,
            *_args,
            Type=Type,
            Path=Path,
            IsAccessible=IsAccessible,
            Sizes=Sizes,
            _configuration=_configuration,
        )

from lib.shoko.v3.lib.shoko.v3.models.io_drive_type import IODriveType
from lib.shoko.v3.lib.shoko.v3.models.shoko_child_items import ShokoChildItems
