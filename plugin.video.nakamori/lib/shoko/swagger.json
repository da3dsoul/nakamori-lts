{
  "openapi": "3.0.1",
  "info": {
    "title": "Shoko API 3",
    "description": "Shoko Server API.",
    "version": "3"
  },
  "servers": [
    {
      "url": "/api/v3/"
    }
  ],
  "paths": {
    "/Action/RunImport": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Run Import. This checks for new files, hashes them etc, scans Drop Folders, checks and scans for community site links (tvdb, trakt, moviedb, etc), and downloads missing images.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/ImportNewFiles": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Queues a task to import only new files found in the import folder",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/SyncHashes": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "This was for web cache hash syncing, and will be for perceptual hashing maybe eventually.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/SyncVotes": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Sync the votes from Shoko to AniDB.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/SyncTrakt": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Sync Trakt states. Requires Trakt to be set up, obviously",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/RemoveMissingFiles/{removeFromMyList}": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Remove Entries in the Shoko Database for Files that are no longer accessible",
        "parameters": [
          {
            "name": "removeFromMyList",
            "in": "path",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/UpdateAllTvDBInfo": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Update All TvDB Series Info",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/UpdateAllImages": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Updates and Downloads Missing Images",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/UpdateAllMovieDBInfo": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Updates All MovieDB Info",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/UpdateAllTraktInfo": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Update all Trakt info. Right now, that's not much.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/ValidateAllImages": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Validates invalid images and redownloads them",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/AVDumpMismatchedFiles": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Gets files whose data does not match AniDB",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/DownloadMissingAniDBAnimeData": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "This Downloads XML data from AniDB where there is none. This should only happen:\r\nA. If someone deleted or corrupted them.\r\nB. If the server closed unexpectedly at the wrong time (it'll only be one).\r\nC. If there was a catastrophic error.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/RegenerateAllTvDBEpisodeMatchings": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Regenerate All Episode Matchings for TvDB. Generally, don't do this unless there was an error that was fixed.\r\nIn those cases, you'd be told to.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/SyncMyList": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "BEWARE this is a dangerous command!\r\nIt syncs all of the states in Shoko's library to AniDB.\r\nONE WAY. THIS CAN ERASE ANIDB DATA IRREVERSIBLY",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/UpdateAllAniDBInfo": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Update All AniDB Series Info",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/UpdateAllMediaInfo": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Queues a task to Update all media info",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/UpdateSeriesStats": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Queues commands to Update All Series Stats and Force a Recalculation of All Group Filters",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/UpdateMissingAniDBFileInfo": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Update AniDB Files with missing file info, including with missing release\r\ngroups and/or with out-of-date internal data versions.",
        "parameters": [
          {
            "name": "missingInfo",
            "in": "query",
            "description": "Update files with missing release group info",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "outOfDate",
            "in": "query",
            "description": "Update files with and out-of-date internal version.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/UpdateAniDBCalendar": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Update the AniDB Calendar data for use on the dashboard.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/RecreateAllGroups": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Recreate all Shoko.Server.API.v3.Models.Shoko.Groups. This will delete any and all existing groups.",
        "description": "This action requires an admin account because it's a destructive action.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/RenameAllGroups": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Rename al Shoko.Server.API.v3.Models.Shoko.Groups. This won't recreate the whole library,\r\nonly rename any groups without a custom name set based on the current\r\nlanguage preference.",
        "description": "This action requires an admin account because it affects all groups.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/PlexSyncAll": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Sync watch states with plex.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Action/AddAllManualLinksToMyList": {
      "get": {
        "tags": [
          "Action"
        ],
        "summary": "Forcibly runs AddToMyList commands for all manual links",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/auth": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Get an authentication token for the user.",
        "requestBody": {
          "description": "The authentication details for the user.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/core.AuthUser"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/core.AuthUser"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/core.AuthUser"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/core.AuthUser"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Auth"
        ],
        "summary": "Delete an APIKey from the database.",
        "parameters": [
          {
            "name": "apikey",
            "in": "query",
            "description": "The API key to delete.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/auth/ChangePassword": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Change the password. Invalidates the current user's apikeys. Reauth after using this!",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Dashboard/Stats": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get the counters of various collection stats",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard.CollectionStats"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard.CollectionStats"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard.CollectionStats"
                }
              }
            }
          }
        }
      }
    },
    "/Dashboard/TopTags/{number}": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Gets the top <br>number of the most common tags visible to the current user.",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "The max number of results to return. (Defaults to 10)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The Shoko.Server.TagFilter.Filter to use. (Defaults to Shoko.Server.TagFilter.Filter.AnidbInternal | Shoko.Server.TagFilter.Filter.Misc | Shoko.Server.TagFilter.Filter.Source)",
            "schema": {
              "$ref": "#/components/schemas/TagFilter.Filter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Tag"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Tag"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Tag"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/Dashboard/TopTags": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Gets the top number of the most common tags visible to the current user.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The Shoko.Server.TagFilter.Filter to use. (Defaults to Shoko.Server.TagFilter.Filter.AnidbInternal | Shoko.Server.TagFilter.Filter.Misc | Shoko.Server.TagFilter.Filter.Source)",
            "schema": {
              "$ref": "#/components/schemas/TagFilter.Filter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Tag"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Tag"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Tag"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Dashboard/QueueSummary": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Gets counts for all of the commands currently queued",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ProcessFile": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetAnimeHTTP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetFileUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_AddFileUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_UpdateWatchedUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDBSearch": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetCharsCreators": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetCharacter": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetCreator": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "HashFile": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetReviews": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetReleaseGroupStatus": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetUpdated": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_SyncMyList": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetReleaseGroup": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetCalendar": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetTitles": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_SyncVotes": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_VoteAnime": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_VoteEpisode": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDB_UpdateSeries": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDB_DownloadImages": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDB_SearchAnime": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "ImageDownload": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_DeleteFileUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "MovieDB_SearchAnime": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_SearchAnime": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_UpdateInfo": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_EpisodeHistory": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_SyncCollection": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_SyncCollectionSeries": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_EpisodeCollection": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_UpdateAllSeries": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "ReadMediaInfo": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_UpdateMylistStats": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetEpisodeUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Refresh_AnimeStats": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "LinkAniDBTvDB": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Refresh_GroupFilter": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Plex_Sync": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "LinkFileManually": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetMyListFile": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "ValidateAllImages": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDB_UpdateEpisode": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "NullCommand": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "DownloadAniDBImages": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ProcessFile": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetAnimeHTTP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetFileUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_AddFileUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_UpdateWatchedUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDBSearch": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetCharsCreators": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetCharacter": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetCreator": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "HashFile": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetReviews": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetReleaseGroupStatus": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetUpdated": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_SyncMyList": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetReleaseGroup": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetCalendar": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetTitles": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_SyncVotes": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_VoteAnime": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_VoteEpisode": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDB_UpdateSeries": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDB_DownloadImages": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDB_SearchAnime": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "ImageDownload": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_DeleteFileUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "MovieDB_SearchAnime": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_SearchAnime": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_UpdateInfo": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_EpisodeHistory": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_SyncCollection": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_SyncCollectionSeries": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_EpisodeCollection": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_UpdateAllSeries": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "ReadMediaInfo": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_UpdateMylistStats": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetEpisodeUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Refresh_AnimeStats": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "LinkAniDBTvDB": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Refresh_GroupFilter": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Plex_Sync": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "LinkFileManually": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetMyListFile": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "ValidateAllImages": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDB_UpdateEpisode": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "NullCommand": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "DownloadAniDBImages": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ProcessFile": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetAnimeHTTP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetFileUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_AddFileUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_UpdateWatchedUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDBSearch": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetCharsCreators": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetCharacter": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetCreator": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "HashFile": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetReviews": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetReleaseGroupStatus": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetUpdated": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_SyncMyList": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetReleaseGroup": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetCalendar": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetTitles": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_SyncVotes": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_VoteAnime": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_VoteEpisode": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDB_UpdateSeries": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDB_DownloadImages": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDB_SearchAnime": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "ImageDownload": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_DeleteFileUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "MovieDB_SearchAnime": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_SearchAnime": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_UpdateInfo": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_EpisodeHistory": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_SyncCollection": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_SyncCollectionSeries": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_EpisodeCollection": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Trakt_UpdateAllSeries": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "ReadMediaInfo": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_UpdateMylistStats": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetEpisodeUDP": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Refresh_AnimeStats": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "LinkAniDBTvDB": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Refresh_GroupFilter": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "Plex_Sync": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "LinkFileManually": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "AniDB_GetMyListFile": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "ValidateAllImages": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "TvDB_UpdateEpisode": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "NullCommand": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "DownloadAniDBImages": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/Dashboard/SeriesSummary": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Gets a breakdown of which types of anime the user has access to",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard.SeriesSummary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard.SeriesSummary"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard.SeriesSummary"
                }
              }
            }
          }
        }
      }
    },
    "/Dashboard/RecentlyAddedEpisodes": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get a list of recently added Shoko.Server.API.v3.Models.Shoko.Dashboard.EpisodeDetails.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "includeRestricted",
            "in": "query",
            "description": "Include episodes from restricted (H) series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard.EpisodeDetails"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard.EpisodeDetails"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard.EpisodeDetails"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Dashboard/RecentlyAddedSeries": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get a list of recently added Shoko.Server.API.v3.Models.Shoko.Series.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "includeRestricted",
            "in": "query",
            "description": "Include restricted (H) series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Dashboard/ContinueWatchingEpisodes": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get a list of the episodes to continue watching (soon-to-be) in recently watched order.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "includeSpecials",
            "in": "query",
            "description": "Include specials in the search.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeRestricted",
            "in": "query",
            "description": "Include episodes from restricted (H) series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard.EpisodeDetails"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard.EpisodeDetails"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard.EpisodeDetails"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Dashboard/NextUpEpisodes": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get the next episodes for series that currently don't have an active watch session for the user.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "onlyUnwatched",
            "in": "query",
            "description": "Only show unwatched episodes.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeSpecials",
            "in": "query",
            "description": "Include specials in the search.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeRestricted",
            "in": "query",
            "description": "Include episodes from restricted (H) series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeMissing",
            "in": "query",
            "description": "Include missing episodes in the list.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeHidden",
            "in": "query",
            "description": "Include hidden episodes in the list.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeRewatching",
            "in": "query",
            "description": "Include already watched episodes in the\r\n            search if we determine the user is \"re-watching\" the series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard.EpisodeDetails"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard.EpisodeDetails"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard.EpisodeDetails"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Dashboard/AniDBCalendar": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get the next numberOfDays from the AniDB Calendar.",
        "parameters": [
          {
            "name": "numberOfDays",
            "in": "query",
            "description": "Number of days to show.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 7
            }
          },
          {
            "name": "showAll",
            "in": "query",
            "description": "Show all series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeRestricted",
            "in": "query",
            "description": "Include episodes from restricted (H) series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard.EpisodeDetails"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard.EpisodeDetails"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard.EpisodeDetails"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Debug/AniDB/UDP/Call": {
      "post": {
        "tags": [
          "Debug"
        ],
        "summary": "Call the AniDB UDP API using the",
        "description": "Most of the code here is just copy-pasted from the UDPRequest class, and\r\nafterwards modified to fit the new request/response models.",
        "requestBody": {
          "description": "The AniDB UDP Request to make.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DebugController.AnidbUdpRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DebugController.AnidbUdpRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DebugController.AnidbUdpRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DebugController.AnidbUdpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DebugController.AnidbUdpResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebugController.AnidbUdpResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DebugController.AnidbUdpResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Episode": {
      "get": {
        "tags": [
          "Episode"
        ],
        "summary": "Get all Shoko.Server.API.v3.Models.Shoko.Episodes for the given filter.",
        "description": "Shoko.Server.API.v3.Models.Shoko.Filter or Shoko.Server.API.v3.Models.Shoko.Group is irrelevant at this level.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size. Set to ```0``` to disable pagination.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "includeMissing",
            "in": "query",
            "description": "Include missing episodes in the list.",
            "schema": {
              "$ref": "#/components/schemas/Common.IncludeOnlyFilter"
            }
          },
          {
            "name": "includeHidden",
            "in": "query",
            "description": "Include hidden episodes in the list.",
            "schema": {
              "$ref": "#/components/schemas/Common.IncludeOnlyFilter"
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          },
          {
            "name": "includeWatched",
            "in": "query",
            "description": "Include watched episodes in the list.",
            "schema": {
              "$ref": "#/components/schemas/Common.IncludeOnlyFilter"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter episodes by the specified Shoko.Server.API.v3.Models.Shoko.EpisodeTypes.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "An optional search query to filter episodes based on their titles.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fuzzy",
            "in": "query",
            "description": "Indicates that fuzzy-matching should be used for the search query.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Episode]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Episode]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Episode]"
                }
              }
            }
          }
        }
      }
    },
    "/Episode/AniDB": {
      "get": {
        "tags": [
          "Episode"
        ],
        "summary": "Get all Shoko.Server.API.v3.Models.Shoko.Episode.AniDBs. Admins only.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size. Set to ```0``` to disable pagination.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter episodes by the specified Shoko.Server.API.v3.Models.Shoko.EpisodeTypes.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Episode.AniDB]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Episode.AniDB]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Episode.AniDB]"
                }
              }
            }
          }
        }
      }
    },
    "/Episode/TvDB": {
      "get": {
        "tags": [
          "Episode"
        ],
        "summary": "Get all Shoko.Server.API.v3.Models.Shoko.Episode.TvDBs. Admins only.",
        "description": "It's admins only since i don't want to add the logic to",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size. Set to ```0``` to disable pagination.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Episode.TvDB]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Episode.TvDB]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Episode.TvDB]"
                }
              }
            }
          }
        }
      }
    },
    "/Episode/{episodeID}": {
      "get": {
        "tags": [
          "Episode"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.Episode entry for the given episodeID.",
        "parameters": [
          {
            "name": "episodeID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Episode"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Episode"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Episode"
                }
              }
            }
          }
        }
      }
    },
    "/Episode/{episodeID}/SetHidden": {
      "post": {
        "tags": [
          "Episode"
        ],
        "summary": "Set or unset the episode hidden status by the given episodeID.",
        "parameters": [
          {
            "name": "episodeID",
            "in": "path",
            "description": "Shoko episode ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The new value to set.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "updateStats",
            "in": "query",
            "description": "Update series and group stats.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Episode/{episodeID}/AniDB": {
      "get": {
        "tags": [
          "Episode"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.Episode.AniDB entry for the given episodeID.",
        "parameters": [
          {
            "name": "episodeID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Episode.AniDB"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Episode.AniDB"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Episode.AniDB"
                }
              }
            }
          }
        }
      }
    },
    "/Episode/AniDB/{anidbEpisodeID}": {
      "get": {
        "tags": [
          "Episode"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.Episode.AniDB entry for the given anidbEpisodeID.",
        "parameters": [
          {
            "name": "anidbEpisodeID",
            "in": "path",
            "description": "AniDB Episode ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Episode.AniDB"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Episode.AniDB"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Episode.AniDB"
                }
              }
            }
          }
        }
      }
    },
    "/Episode/AniDB/{anidbEpisodeID}/Episode": {
      "get": {
        "tags": [
          "Episode"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.Episode entry for the given anidbEpisodeID, if any.",
        "parameters": [
          {
            "name": "anidbEpisodeID",
            "in": "path",
            "description": "AniDB Episode ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Episode"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Episode"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Episode"
                }
              }
            }
          }
        }
      }
    },
    "/Episode/{episodeID}/Vote": {
      "post": {
        "tags": [
          "Episode"
        ],
        "summary": "Add a permanent user-submitted rating for the episode.",
        "parameters": [
          {
            "name": "episodeID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Common.Vote"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Common.Vote"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Common.Vote"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Common.Vote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Episode/{episodeID}/TvDB": {
      "get": {
        "tags": [
          "Episode"
        ],
        "summary": "Get the TvDB details for episode with Shoko ID",
        "parameters": [
          {
            "name": "episodeID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Episode.TvDB"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Episode.TvDB"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Episode.TvDB"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Episode/{episodeID}/Watched/{watched}": {
      "post": {
        "tags": [
          "Episode"
        ],
        "summary": "Set the watched status on an episode",
        "parameters": [
          {
            "name": "episodeID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "watched",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Episode/WithMultipleFiles": {
      "get": {
        "tags": [
          "Episode"
        ],
        "summary": "Get episodes with multiple files attached.",
        "parameters": [
          {
            "name": "ignoreVariations",
            "in": "query",
            "description": "Ignore manually toggled variations in the results.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "onlyFinishedSeries",
            "in": "query",
            "description": "Only show finished series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Episode]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Episode]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Episode]"
                }
              }
            }
          }
        }
      }
    },
    "/Episode/WithNoFiles": {
      "get": {
        "tags": [
          "Episode"
        ],
        "summary": "Get all episodes with no files.",
        "parameters": [
          {
            "name": "includeSpecials",
            "in": "query",
            "description": "Include specials in the list.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "onlyFinishedSeries",
            "in": "query",
            "description": "Only show episodes for completed series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Episode]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Episode]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Episode]"
                }
              }
            }
          }
        }
      }
    },
    "/File": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get or search through the files accessible to the current user.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "includeMissing",
            "in": "query",
            "description": "Include missing files among the results.",
            "schema": {
              "$ref": "#/components/schemas/Common.IncludeOnlyFilter"
            }
          },
          {
            "name": "includeIgnored",
            "in": "query",
            "description": "Include ignored files among the results.",
            "schema": {
              "$ref": "#/components/schemas/Common.IncludeOnlyFilter"
            }
          },
          {
            "name": "includeVariations",
            "in": "query",
            "description": "Include files marked as a variation among the results.",
            "schema": {
              "$ref": "#/components/schemas/Common.IncludeOnlyFilter"
            }
          },
          {
            "name": "includeDuplicates",
            "in": "query",
            "description": "Include files with multiple locations (and thus have duplicates) among the results.",
            "schema": {
              "$ref": "#/components/schemas/Common.IncludeOnlyFilter"
            }
          },
          {
            "name": "includeUnrecognized",
            "in": "query",
            "description": "Include unrecognized files among the results.",
            "schema": {
              "$ref": "#/components/schemas/Common.IncludeOnlyFilter"
            }
          },
          {
            "name": "includeLinked",
            "in": "query",
            "description": "Include manually linked files among the results.",
            "schema": {
              "$ref": "#/components/schemas/Common.IncludeOnlyFilter"
            }
          },
          {
            "name": "includeViewed",
            "in": "query",
            "description": "Include previously viewed files among the results.",
            "schema": {
              "$ref": "#/components/schemas/Common.IncludeOnlyFilter"
            }
          },
          {
            "name": "includeWatched",
            "in": "query",
            "description": "Include previously watched files among the results",
            "schema": {
              "$ref": "#/components/schemas/Common.IncludeOnlyFilter"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort ordering. Attach '-' at the start to reverse the order of the criteria.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          },
          {
            "name": "includeMediaInfo",
            "in": "query",
            "description": "Include media info data.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeXRefs",
            "in": "query",
            "description": "Include series and episode cross-references.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "An optional search query to filter files based on their absolute paths.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fuzzy",
            "in": "query",
            "description": "Indicates that fuzzy-matching should be used for the search query.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              }
            }
          }
        }
      }
    },
    "/File/{fileID}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get File Details",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "Shoko VideoLocalID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeXRefs",
            "in": "query",
            "description": "Set to true to include series and episode cross-references.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          },
          {
            "name": "includeMediaInfo",
            "in": "query",
            "description": "Include media info data.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.File"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.File"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.File"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "File"
        ],
        "summary": "Delete a file.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "The VideoLocal_Place ID. This cares about which location we are deleting from.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "removeFiles",
            "in": "query",
            "description": "Remove all physical file locations.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "removeFolder",
            "in": "query",
            "description": "This causes the empty folder removal to skipped if set to false.\r\n            This significantly speeds up batch deleting if you are deleting many files in the same folder.\r\n            It may be specified in the query.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/File/{fileID}/AniDB": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.File.AniDB using the fileID.",
        "description": "This isn't a list because AniDB only has one File mapping even if there are multiple episodes.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "Shoko File ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/File.AniDB"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File.AniDB"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/File.AniDB"
                }
              }
            }
          }
        }
      }
    },
    "/File/AniDB/{anidbFileID}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.File.AniDB using the anidbFileID.",
        "description": "This isn't a list because AniDB only has one File mapping even if there are multiple episodes.",
        "parameters": [
          {
            "name": "anidbFileID",
            "in": "path",
            "description": "AniDB File ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/File.AniDB"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File.AniDB"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/File.AniDB"
                }
              }
            }
          }
        }
      }
    },
    "/File/AniDB/{anidbFileID}/File": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.File.AniDBfor file using the anidbFileID.",
        "description": "This isn't a list because AniDB only has one File mapping even if there are multiple episodes.",
        "parameters": [
          {
            "name": "anidbFileID",
            "in": "path",
            "description": "AniDB File ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeXRefs",
            "in": "query",
            "description": "Set to true to include series and episode cross-references.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          },
          {
            "name": "includeMediaInfo",
            "in": "query",
            "description": "Include media info data.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.File"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.File"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.File"
                }
              }
            }
          }
        }
      }
    },
    "/File/{fileID}/Stream": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Returns a file stream for the specified file ID.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/File/{fileID}/MediaInfo": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get the MediaInfo model for file with VideoLocal ID",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.MediaInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.MediaInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.MediaInfo"
                }
              }
            }
          }
        }
      }
    },
    "/File/{fileID}/UserStats": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Return the user stats for the file with the given fileID.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "Shoko file ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/File.FileUserStats"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File.FileUserStats"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/File.FileUserStats"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "File"
        ],
        "summary": "Put a Shoko.Server.API.v3.Models.Shoko.File.FileUserStats object down for the Shoko.Server.API.v3.Models.Shoko.File with the given fileID.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "Shoko file ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The new and/or update file stats to put for the file.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/File.FileUserStats"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/File.FileUserStats"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/File.FileUserStats"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/File.FileUserStats"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/File.FileUserStats"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File.FileUserStats"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/File.FileUserStats"
                }
              }
            }
          }
        }
      }
    },
    "/File/{fileID}/Watched/{watched}": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Mark a file as watched or unwatched.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "VideoLocal ID. Watched Status is kept per file, no matter how many copies or where they are.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "watched",
            "in": "path",
            "description": "Is it watched?",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/File/{fileID}/Scrobble": {
      "patch": {
        "tags": [
          "File"
        ],
        "summary": "Update either watch status, resume position, or both.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "VideoLocal ID. Watch status and resume position is kept per file, regardless of how many duplicates the file has.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "The name of the event that triggered the scrobble.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "episodeID",
            "in": "query",
            "description": "The episode id to scrobble to trakt.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "watched",
            "in": "query",
            "description": "True if file should be marked as watched, false if file should be unmarked, or null if it shall not be updated.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "resumePosition",
            "in": "query",
            "description": "Number of ticks into the video to resume from, or null if it shall not be updated.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/File/{fileID}/Ignore": {
      "put": {
        "tags": [
          "File"
        ],
        "summary": "Mark or unmark a file as ignored.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "VideoLocal ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "Thew new ignore value.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/File/{fileID}/AVDump": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Run a file through AVDump and return the result.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "VideoLocal ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Common.AVDumpResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.AVDumpResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.AVDumpResult"
                }
              }
            }
          }
        }
      }
    },
    "/File/{fileID}/Rescan": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Rescan a file on AniDB.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "VideoLocal ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "priority",
            "in": "query",
            "description": "Increase the priority to the max for the queued command.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/File/{fileID}/Rehash": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Rehash a file.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "VideoLocal ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/File/{fileID}/Link": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Link one or more episodes to the same file.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "The file id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The body.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkEpisodesBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkEpisodesBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkEpisodesBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkEpisodesBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "File"
        ],
        "summary": "Unlink all the episodes if no body is given, or only the spesified episodes from the file.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "The file id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Optional. The body.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.UnlinkEpisodesBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.UnlinkEpisodesBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.UnlinkEpisodesBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.UnlinkEpisodesBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/File/{fileID}/LinkFromSeries": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Link one or more episodes from a series to the same file.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "The file id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The body.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkSeriesBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkSeriesBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkSeriesBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkSeriesBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/File/LinkFromSeries": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Link multiple files to one or more episodes in a series.",
        "requestBody": {
          "description": "The body.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkSeriesMultipleBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkSeriesMultipleBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkSeriesMultipleBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkSeriesMultipleBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/File/Link": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Link multiple files to a single episode.",
        "requestBody": {
          "description": "The body.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkMultipleFilesBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkMultipleFilesBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkMultipleFilesBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.LinkMultipleFilesBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/File/PathEndsWith": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Search for a file by path or name. Internally, it will convert forward\r\nslash (/) and backwards slash (\\) to the system directory separator\r\nbefore matching.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeXRefs",
            "in": "query",
            "description": "Set to true to include series and episode cross-references.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of returned results.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/File/PathEndsWith/{path}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Search for a file by path or name. Internally, it will convert forward\r\nslash (/) and backwards slash (\\) to the system directory separator\r\nbefore matching.",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "The path to search for. URL encoded.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeXRefs",
            "in": "query",
            "description": "Set to true to include series and episode cross-references.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of returned results.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/File/PathRegex/{path}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Search for a file by path or name via regex. Internally, it will convert \\/ to the system directory separator and match against the string",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "a path to search for. URL Encoded",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/File/FilenameRegex/{path}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Search for a file by path or name via regex. Internally, it will convert \\/ to the system directory separator and match against the string",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "a path to search for. URL Encoded",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/File/Recent/{limit}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get recently added files.",
        "parameters": [
          {
            "name": "limit",
            "in": "path",
            "required": true,
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/File/Recent": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get recently added files.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "includeXRefs",
            "in": "query",
            "description": "Set to false to exclude series and episode cross-references.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/File/Ignored": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get ignored files.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/File/Duplicates": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get files with more than one location.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "includeXRefs",
            "in": "query",
            "description": "Set to true to include series and episode cross-references.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/File/Linked": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get files with no cross-reference.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "includeXRefs",
            "in": "query",
            "description": "Set to false to exclude series and episode cross-references.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/File/MissingCrossReferenceData": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get all files with missing cross-references data.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "includeXRefs",
            "in": "query",
            "description": "Set to false to exclude series and episode cross-references.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              }
            }
          }
        }
      }
    },
    "/File/Unrecognized": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get unrecognized files.\r\nUse pageSize and page (index 0) in the query to enable pagination.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/Filter": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Get all Shoko.Server.API.v3.Models.Shoko.Filters except the live filter.",
        "parameters": [
          {
            "name": "includeEmpty",
            "in": "query",
            "description": "Include empty filters.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "showHidden",
            "in": "query",
            "description": "Show hidden filters.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size. Set to ```0``` to disable pagination.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "withConditions",
            "in": "query",
            "description": "Include conditions and sort criteria in the response.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Filter]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Filter]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Filter]"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Filter"
        ],
        "summary": "Add a new group filter. Requires admin.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              }
            }
          }
        }
      }
    },
    "/Filter/{filterID}": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.Filter for the given filterID.",
        "parameters": [
          {
            "name": "filterID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Filter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "withConditions",
            "in": "query",
            "description": "Include conditions and sort criteria in the response.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Filter"
        ],
        "summary": "Edit an existing filter using a JSON patch document to do a partial\r\nupdate. Requires admin.",
        "parameters": [
          {
            "name": "filterID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Filter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JSON patch document for the partial update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Filter"
        ],
        "summary": "Edit an existing filter using a raw object. Requires admin.",
        "parameters": [
          {
            "name": "filterID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Filter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The full document for the changes to be made to the filter.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Filter"
        ],
        "summary": "Removes an existing filter. Requires admin.",
        "parameters": [
          {
            "name": "filterID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Filter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Filter/Preview": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Get the live filter for the current user.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Filter"
        ],
        "summary": "Edit the live filter for the current user using a JSON patch document to\r\ndo a partial update.",
        "requestBody": {
          "description": "JSON patch document for the partial update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Filter"
        ],
        "summary": "Edit the live filter for the current user using a raw object.",
        "requestBody": {
          "description": "The full document for the changes to be made to the filter.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Input.CreateOrUpdateFilterBody"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Filter"
        ],
        "summary": "Resets the live filter for the current user.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Filter/Preview/Group": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Get a paginated list of all the top-level Shoko.Server.API.v3.Models.Shoko.Groups for the live filter.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size. Set to ```0``` to disable pagination.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "includeEmpty",
            "in": "query",
            "description": "Include Shoko.Server.API.v3.Models.Shoko.Series with missing Shoko.Server.API.v3.Models.Shoko.Episodes in the search.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for the Shoko.Server.API.v3.Models.Shoko.Group.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "orderByName",
            "in": "query",
            "description": "Ignore the group filter sort critaria and always order the returned list by name.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Group]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Group]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Group]"
                }
              }
            }
          }
        }
      }
    },
    "/Filter/Preview/Group/Letters": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Get a dictionary with the count for each starting character in each of\r\nthe top-level group's name with the live filter applied.",
        "parameters": [
          {
            "name": "includeEmpty",
            "in": "query",
            "description": "Include Shoko.Server.API.v3.Models.Shoko.Series with missing\r\n            Shoko.Server.API.v3.Models.Shoko.Episodes in the count.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Filter/Preview/Series": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Get a paginated list of all the Shoko.Server.API.v3.Models.Shoko.Series within the live filter.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size. Set to ```0``` to disable pagination.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for each Shoko.Server.API.v3.Models.Shoko.Series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeMissing",
            "in": "query",
            "description": "Include Shoko.Server.API.v3.Models.Shoko.Series with missing\r\n            Shoko.Server.API.v3.Models.Shoko.Episodes in the count.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              }
            }
          }
        }
      }
    },
    "/Filter/Preview/Group/{groupID}/Group": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Get a list of all the sub-Shoko.Server.API.v3.Models.Shoko.Groups belonging to the Shoko.Server.API.v3.Models.Shoko.Group with the given groupID and which are present within the live filter.",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for the Shoko.Server.API.v3.Models.Shoko.Group.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeEmpty",
            "in": "query",
            "description": "Include Shoko.Server.API.v3.Models.Shoko.Series with missing Shoko.Server.API.v3.Models.Shoko.Episodes in the search.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Group"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Group"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Group"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Filter/Preview/Group/{groupID}/Series": {
      "get": {
        "tags": [
          "Filter"
        ],
        "summary": "Get a list of all the Shoko.Server.API.v3.Models.Shoko.Series for the Shoko.Server.API.v3.Models.Shoko.Group within the live filter.",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "Show all the Shoko.Server.API.v3.Models.Shoko.Series within the Shoko.Server.API.v3.Models.Shoko.Group. Even the Shoko.Server.API.v3.Models.Shoko.Series within the sub-Shoko.Server.API.v3.Models.Shoko.Groups.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeMissing",
            "in": "query",
            "description": "Include Shoko.Server.API.v3.Models.Shoko.Series with missing Shoko.Server.API.v3.Models.Shoko.Episodes in the list.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for each Shoko.Server.API.v3.Models.Shoko.Series within the Shoko.Server.API.v3.Models.Shoko.Group.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Folder/Drives": {
      "get": {
        "tags": [
          "Folder"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Drive"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Drive"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Drive"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Folder": {
      "get": {
        "tags": [
          "Folder"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Folder"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Folder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Folder"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Group": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get a list of all groups available to the current user",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "includeEmpty",
            "in": "query",
            "description": "Include Shoko.Server.API.v3.Models.Shoko.Series with missing Shoko.Server.API.v3.Models.Shoko.Episodes in the search.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for the main Shoko.Server.API.v3.Models.Shoko.Series within the Shoko.Server.API.v3.Models.Shoko.Group.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "topLevelOnly",
            "in": "query",
            "description": "Only list the top level groups if set.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "startsWith",
            "in": "query",
            "description": "Search only for groups that start with the given query.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Group]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Group]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Group]"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Create a new group using the provided details.",
        "description": "Use M:Shoko.Server.API.v3.Controllers.SeriesController.MoveSeries(System.Int32,System.Int32) to move a single series to\r\nthe group, or use M:Shoko.Server.API.v3.Controllers.GroupController.PutGroup(System.Int32,Shoko.Server.API.v3.Models.Shoko.Group.Input.CreateOrUpdateGroupBody) or\r\nM:Shoko.Server.API.v3.Controllers.GroupController.PatchGroup(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{Shoko.Server.API.v3.Models.Shoko.Group.Input.CreateOrUpdateGroupBody}) to move multiple series and/or\r\nchild groups to the group.",
        "requestBody": {
          "description": "The details for the group to be created.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateGroupBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateGroupBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateGroupBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateGroupBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              }
            }
          }
        }
      }
    },
    "/Group/Letters": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get a dictionary with the count for each starting character in each of\r\nthe group's name.",
        "parameters": [
          {
            "name": "includeEmpty",
            "in": "query",
            "description": "Include Shoko.Server.API.v3.Models.Shoko.Series with missing\r\n            Shoko.Server.API.v3.Models.Shoko.Episodes in the count.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "topLevelOnly",
            "in": "query",
            "description": "Only count top-level groups (groups with no\r\n            parent group).",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Group/{groupID}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get the group with ID",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Group"
        ],
        "summary": "Update an existing group using the provided details.",
        "description": "Use this method to update the details or merge more series/groups into\r\nan existing group.",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "The ID of the group to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The new details for the group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateGroupBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateGroupBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateGroupBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateGroupBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Group"
        ],
        "summary": "Partially update an existing group using the provided JSON Patch document.",
        "description": "Use this method to apply a set of changes to an existing group.\r\nThe changes are described in the JSON Patch document included in the request body.\r\nIf you need to completely replace the details of a group, use\r\nM:Shoko.Server.API.v3.Controllers.GroupController.PutGroup(System.Int32,Shoko.Server.API.v3.Models.Shoko.Group.Input.CreateOrUpdateGroupBody) instead.",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "The ID of the group to be updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The JSON Patch document containing the changes to be applied to the group.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Delete a group recursively.",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "The ID of the group to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deleteSeries",
            "in": "query",
            "description": "Whether to delete the series in the group. It will error if this is false and the group is not empty.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "deleteFiles",
            "in": "query",
            "description": "Whether to delete the all of the files in the group from the disk.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Group/{groupID}/Relations": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get all relations to locally available series within the group.",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "Shoko Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "Show relations for all series within the group, even for series within sub-groups.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.SeriesRelation"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.SeriesRelation"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.SeriesRelation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Group/{groupID}/Recalculate": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Recalculate all stats and contracts for a group",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Group/RecreateAllGroups": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Recreate all groups from scratch. Use M:Shoko.Server.API.v3.Controllers.ActionController.RecreateAllGroups instead.",
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": true
      }
    },
    "/Image/{source}/{type}/{value}": {
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "Returns the image for the given source, type and value.",
        "parameters": [
          {
            "name": "source",
            "in": "path",
            "description": "AniDB, TvDB, MovieDB, Shoko",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Image.ImageSource"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Poster, Fanart, Banner, Thumb, Static",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Image.ImageType"
            }
          },
          {
            "name": "value",
            "in": "path",
            "description": "Usually the ID, but the resource name in the case of image/Shoko/Static/{value}",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Image/Random/{imageType}": {
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "Returns a random image for the imageType.",
        "parameters": [
          {
            "name": "imageType",
            "in": "path",
            "description": "Poster, Fanart, Banner, Thumb, Static",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Image.ImageType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/Image/Random/{imageType}/Metadata": {
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "Returns the metadata for a random image for the imageType.",
        "parameters": [
          {
            "name": "imageType",
            "in": "path",
            "description": "Poster, Fanart, Banner, Thumb",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Image.ImageType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Image"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Image"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Image"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/ImportFolder": {
      "get": {
        "tags": [
          "ImportFolder"
        ],
        "summary": "List all Import Folders",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.ImportFolder"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.ImportFolder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.ImportFolder"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ImportFolder"
        ],
        "summary": "Add an Import Folder. Does not run import on the folder, so you must scan it yourself.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Shoko.ImportFolder"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shoko.ImportFolder"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Shoko.ImportFolder"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Shoko.ImportFolder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.ImportFolder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.ImportFolder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.ImportFolder"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ImportFolder"
        ],
        "summary": "Edit Import Folder. This replaces all values.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Shoko.ImportFolder"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shoko.ImportFolder"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Shoko.ImportFolder"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Shoko.ImportFolder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/ImportFolder/{folderID}": {
      "get": {
        "tags": [
          "ImportFolder"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.ImportFolder by the given folderID.",
        "parameters": [
          {
            "name": "folderID",
            "in": "path",
            "description": "Import Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.ImportFolder"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.ImportFolder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.ImportFolder"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "ImportFolder"
        ],
        "summary": "Patch the Shoko.Server.API.v3.Models.Shoko.ImportFolder by the given folderID using JSON Patch.",
        "parameters": [
          {
            "name": "folderID",
            "in": "path",
            "description": "Import Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JSON Patch document",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "ImportFolder"
        ],
        "summary": "Delete an Import Folder",
        "parameters": [
          {
            "name": "folderID",
            "in": "path",
            "description": "Import Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "removeRecords",
            "in": "query",
            "description": "If this is false, then VideoLocals, DuplicateFiles, and several other things will be left intact. This is for migration of files to new locations.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "updateMyList",
            "in": "query",
            "description": "Pretty self explanatory. If this is true, and removeRecords is true, then it will update the list status",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/ImportFolder/{folderID}/Scan": {
      "get": {
        "tags": [
          "ImportFolder"
        ],
        "summary": "Scan a Specific Import Folder. This checks ALL files, not just new ones. Good for cleaning up files in strange states and making drop folders retry moves",
        "parameters": [
          {
            "name": "folderID",
            "in": "path",
            "description": "Import Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Init/Version": {
      "get": {
        "tags": [
          "Init"
        ],
        "summary": "Return current version of ShokoServer and several modules\r\nThis will work after init",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Common.ComponentVersionSet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.ComponentVersionSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.ComponentVersionSet"
                }
              }
            }
          }
        }
      }
    },
    "/Init/Status": {
      "get": {
        "tags": [
          "Init"
        ],
        "summary": "Gets various information about the startup status of the server\r\nThis will work after init",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.ServerStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.ServerStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.ServerStatus"
                }
              }
            }
          }
        }
      }
    },
    "/Init/InUse": {
      "get": {
        "tags": [
          "Init"
        ],
        "summary": "Gets whether anything is actively using the API",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/Init/DefaultUser": {
      "get": {
        "tags": [
          "Init"
        ],
        "summary": "Gets the Default user's credentials. Will only return on first run",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Credentials"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Credentials"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Credentials"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Init"
        ],
        "summary": "Sets the default user's credentials",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Common.Credentials"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Common.Credentials"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Common.Credentials"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Common.Credentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Init/StartServer": {
      "get": {
        "tags": [
          "Init"
        ],
        "summary": "Starts the server, or does nothing",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Init/Database/Test": {
      "get": {
        "tags": [
          "Init"
        ],
        "summary": "Test Database Connection with Current Settings",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/IntegrityCheck": {
      "post": {
        "tags": [
          "IntegrityCheck"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Server.Scan"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Server.Scan"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Server.Scan"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Server.Scan"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Server.Scan"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server.Scan"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server.Scan"
                }
              }
            }
          }
        }
      }
    },
    "/IntegrityCheck/{id}/Start": {
      "get": {
        "tags": [
          "IntegrityCheck"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/plex.json": {
      "post": {
        "tags": [
          "PlexWebhook"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "payload": {
                    "$ref": "#/components/schemas/PlexWebhook.PlexEvent"
                  }
                }
              },
              "encoding": {
                "payload": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/plex": {
      "post": {
        "tags": [
          "PlexWebhook"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "payload": {
                    "$ref": "#/components/schemas/PlexWebhook.PlexEvent"
                  }
                }
              },
              "encoding": {
                "payload": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/plex/loginurl": {
      "get": {
        "tags": [
          "PlexWebhook"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/plex/pin/authenticated": {
      "get": {
        "tags": [
          "PlexWebhook"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/plex/token/invalidate": {
      "get": {
        "tags": [
          "PlexWebhook"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/plex/sync": {
      "get": {
        "tags": [
          "PlexWebhook"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/plex/sync/all": {
      "get": {
        "tags": [
          "PlexWebhook"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/plex/sync/{id}": {
      "get": {
        "tags": [
          "PlexWebhook"
        ],
        "parameters": [
          {
            "name": "uid",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/plex/libraries": {
      "get": {
        "tags": [
          "PlexWebhook"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Libraries.Directory"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Libraries.Directory"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Libraries.Directory"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PlexWebhook"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/plex/server/list": {
      "get": {
        "tags": [
          "PlexWebhook"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Connections.MediaDevice"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Connections.MediaDevice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Connections.MediaDevice"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/plex/server": {
      "post": {
        "tags": [
          "PlexWebhook"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/plex/libraries/{id}": {
      "get": {
        "tags": [
          "PlexWebhook"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Collection.PlexLibrary"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Collection.PlexLibrary"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Collection.PlexLibrary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Renamer": {
      "get": {
        "tags": [
          "Renamer"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.RenamerInfo"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.RenamerInfo"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.RenamerInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Renamer/{renamerID}": {
      "delete": {
        "tags": [
          "Renamer"
        ],
        "parameters": [
          {
            "name": "renamerID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "patch": {
        "tags": [
          "Renamer"
        ],
        "parameters": [
          {
            "name": "renamerID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "text/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Filter/{filterID}/Parent": {
      "get": {
        "tags": [
          "ReverseTree"
        ],
        "summary": "Get the parent Shoko.Server.API.v3.Models.Shoko.Filter for the Shoko.Server.API.v3.Models.Shoko.Filter with the given filterID.",
        "description": "This endpoint can be used to get the direct Shoko.Server.API.v3.Models.Shoko.Filter parent to a Shoko.Server.API.v3.Models.Shoko.Filter (in case\r\nit's within a sub-Filter) or to always get the top-level  Shoko.Server.API.v3.Models.Shoko.Filter regardless if\r\ntopLevel is set to ```true```.\r\n\r\nTrying to get the parent of a top-level Shoko.Server.API.v3.Models.Shoko.Filter is an user error and will throw a complaint.",
        "parameters": [
          {
            "name": "filterID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Filter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "topLevel",
            "in": "query",
            "description": "Always get the top-level Shoko.Server.API.v3.Models.Shoko.Filter",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Filter"
                }
              }
            }
          }
        }
      }
    },
    "/Group/{groupID}/Parent": {
      "get": {
        "tags": [
          "ReverseTree"
        ],
        "summary": "Get the parent Shoko.Server.API.v3.Models.Shoko.Group for the Shoko.Server.API.v3.Models.Shoko.Group with the given groupID.",
        "description": "This endpoint can be used to get the direct Shoko.Server.API.v3.Models.Shoko.Group parent to a Shoko.Server.API.v3.Models.Shoko.Group (in case\r\nit's within a sub-group) or to always get the top-level  Shoko.Server.API.v3.Models.Shoko.Group regardless if\r\ntopLevel is set to ```true```.\r\n\r\nTrying to get the parent of a top-level Shoko.Server.API.v3.Models.Shoko.Group is an user error and will throw a complaint.",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "topLevel",
            "in": "query",
            "description": "Always get the top-level Shoko.Server.API.v3.Models.Shoko.Group",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/Group": {
      "get": {
        "tags": [
          "ReverseTree"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.Group for the Shoko.Server.API.v3.Models.Shoko.Series with the given seriesID.",
        "description": "This endpoint can be used to get the direct Shoko.Server.API.v3.Models.Shoko.Group parent to a Shoko.Server.API.v3.Models.Shoko.Series (in case\r\nit's within a sub-group) or to always get the top-level  Shoko.Server.API.v3.Models.Shoko.Group regardless if\r\ntopLevel is set to ```true```.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Series ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "topLevel",
            "in": "query",
            "description": "Always get the top-level Shoko.Server.API.v3.Models.Shoko.Group",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Group"
                }
              }
            }
          }
        }
      }
    },
    "/Episode/{episodeID}/Series": {
      "get": {
        "tags": [
          "ReverseTree"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.Series for the Shoko.Server.API.v3.Models.Shoko.Episode with the given episodeID.",
        "parameters": [
          {
            "name": "episodeID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Episode ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for the Shoko.Server.API.v3.Models.Shoko.Series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Series"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Series"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Series"
                }
              }
            }
          }
        }
      }
    },
    "/File/{fileID}/Episode": {
      "get": {
        "tags": [
          "ReverseTree"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.Episodes for the Shoko.Server.API.v3.Models.Shoko.File with the given fileID.",
        "parameters": [
          {
            "name": "fileID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.File ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Episode"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Episode"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Episode"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Series": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get a paginated list of all Shoko.Server.API.v3.Models.Shoko.Series available to the current Shoko.Server.API.v3.Models.Shoko.User.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "startsWith",
            "in": "query",
            "description": "Search only for series with a main title that start with the given query.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get the series with ID",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for the Shoko.Server.API.v3.Models.Shoko.Series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Series"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Series"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Series"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Series"
        ],
        "summary": "Delete a Series",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "The ID of the Series",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deleteFiles",
            "in": "query",
            "description": "Whether to delete all of the files in the series from the disk.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "completelyRemove",
            "in": "query",
            "description": "Removes all records relating to the series. Use with caution, as you may get banned if it's abused.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Series/{seriesID}/AutoMatchSettings": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get the auto-matching settings for the series.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AutoMatchSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AutoMatchSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AutoMatchSettings"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Series"
        ],
        "summary": "Patch the auto-matching settings in the v3 model and merge it back into\r\nthe database model.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AutoMatchSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AutoMatchSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AutoMatchSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Series"
        ],
        "summary": "Replace the auto-matching settings with the representation sent from the\r\nclient.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Series.AutoMatchSettings"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Series.AutoMatchSettings"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Series.AutoMatchSettings"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Series.AutoMatchSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AutoMatchSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AutoMatchSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AutoMatchSettings"
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/Relations": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get all relations to series available in the local database for series with ID",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.SeriesRelation"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.SeriesRelation"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.SeriesRelation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Series/WithoutFiles": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get a paginated list of Shoko.Server.API.v3.Models.Shoko.Series without local files, available to the current Shoko.Server.API.v3.Models.Shoko.User.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              }
            }
          }
        }
      }
    },
    "/Series/WithManuallyLinkedFiles": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get a paginated list of Shoko.Server.API.v3.Models.Shoko.Series with manually linked local files, available to the current Shoko.Server.API.v3.Models.Shoko.User.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              }
            }
          }
        }
      }
    },
    "/Series/AniDB": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get a paginated list of all Shoko.Server.API.v3.Models.Shoko.Series.AniDB available to the current Shoko.Server.API.v3.Models.Shoko.User.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "startsWith",
            "in": "query",
            "description": "Search only for anime with a main title that start with the given query.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Series.AniDBWithDate]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Series.AniDBWithDate]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Series.AniDBWithDate]"
                }
              }
            }
          }
        }
      }
    },
    "/Series/AniDB/Relations": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get a paginated list of all AniDB Shoko.Server.API.v3.Models.Common.SeriesRelations.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Common.SeriesRelation]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Common.SeriesRelation]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Common.SeriesRelation]"
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/AniDB": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get AniDB Info for series with ID",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AniDBWithDate"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AniDBWithDate"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AniDBWithDate"
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/AniDB/Similar": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get all similar Shoko.Server.API.v3.Models.Shoko.Series.AniDB entries for the seriesID.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.AniDB"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.AniDB"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.AniDB"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/AniDB/Related": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get all similar Shoko.Server.API.v3.Models.Shoko.Series.AniDB entries for the seriesID.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.AniDB"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.AniDB"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.AniDB"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/AniDB/Relations": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get all AniDB relations for the seriesID.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.SeriesRelation"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.SeriesRelation"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.SeriesRelation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Series/AniDB/RecommendedForYou": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Gets anidb recommendation for the user.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "Limits the number of results per page. Set to 0 to disable the limit.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "showAll",
            "in": "query",
            "description": "If enabled will show recommendations across all the anidb available in Shoko, if disabled will only show for the user's collection.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date to use if recommending for a watch period. Only setting the startDate and not endDate will result in using the watch history from the start date to the present date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date to use if recommending for a watch period.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "approval",
            "in": "query",
            "description": "Minumum approval percentage for similar animes.",
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Series.AniDBRecommendedForYou]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Series.AniDBRecommendedForYou]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Series.AniDBRecommendedForYou]"
                }
              }
            }
          }
        }
      }
    },
    "/Series/AniDB/{anidbID}": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get AniDB Info from the AniDB ID",
        "parameters": [
          {
            "name": "anidbID",
            "in": "path",
            "description": "AniDB ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AniDBWithDate"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AniDBWithDate"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Series.AniDBWithDate"
                }
              }
            }
          }
        }
      }
    },
    "/Series/AniDB/{anidbID}/Similar": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get all similar Shoko.Server.API.v3.Models.Shoko.Series.AniDB entries for the anidbID.",
        "parameters": [
          {
            "name": "anidbID",
            "in": "path",
            "description": "AniDB ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.AniDB"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.AniDB"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.AniDB"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Series/AniDB/{anidbID}/Related": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get all related Shoko.Server.API.v3.Models.Shoko.Series.AniDB entries for the anidbID.",
        "parameters": [
          {
            "name": "anidbID",
            "in": "path",
            "description": "AniDB ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.AniDB"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.AniDB"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.AniDB"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Series/AniDB/{anidbID}/Relations": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get all anidb relations for the anidbID.",
        "parameters": [
          {
            "name": "anidbID",
            "in": "path",
            "description": "AniDB ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.SeriesRelation"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.SeriesRelation"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.SeriesRelation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Series/AniDB/{anidbID}/Series": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get a Series from the AniDB ID",
        "parameters": [
          {
            "name": "anidbID",
            "in": "path",
            "description": "AniDB ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for the Shoko.Server.API.v3.Models.Shoko.Series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Series"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Series"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Series"
                }
              }
            }
          }
        }
      }
    },
    "/Series/AniDB/{anidbID}/Refresh": {
      "post": {
        "tags": [
          "Series"
        ],
        "summary": "Queue a refresh of the AniDB Info for series with AniDB ID",
        "parameters": [
          {
            "name": "anidbID",
            "in": "path",
            "description": "AniDB ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Try to forcefully retrive updated data from AniDB if\r\n            we're not banned and if the the last update is outside the no-update\r\n            window (configured in the settings).",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "downloadRelations",
            "in": "query",
            "description": "Download relations for the series",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "createSeriesEntry",
            "in": "query",
            "description": "Also create the Series entries if\r\n            it/they do not exist",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "immediate",
            "in": "query",
            "description": "Try to immediately refresh the data if we're\r\n            not HTTP banned.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "cacheOnly",
            "in": "query",
            "description": "Only used data from the cache when performing the refresh. force takes precedence over this option.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/AniDB/Refresh": {
      "post": {
        "tags": [
          "Series"
        ],
        "summary": "Queue a refresh of the AniDB Info for series with ID",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Try to forcefully retrive updated data from AniDB if\r\n            we're not banned and if the the last update is outside the no-update\r\n            window (configured in the settings).",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "downloadRelations",
            "in": "query",
            "description": "Download relations for the series",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "createSeriesEntry",
            "in": "query",
            "description": "Also create the Series entries if\r\n            it/they do not exist",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "immediate",
            "in": "query",
            "description": "Try to immediately refresh the data if we're\r\n            not HTTP banned.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "cacheOnly",
            "in": "query",
            "description": "Only used data from the cache when performing the refresh. force takes precedence over this option.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/AniDB/Refresh/ForceFromXML": {
      "post": {
        "tags": [
          "Series"
        ],
        "summary": "Forcefully refresh the AniDB Info from XML on disk for series with ID",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/Series/{seriesID}/TvDB": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get TvDB Info for series with ID",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.TvDB"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.TvDB"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Series.TvDB"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/{tvdbID}/Refresh": {
      "post": {
        "tags": [
          "Series"
        ],
        "summary": "Queue a refresh of the all the Shoko.Server.API.v3.Models.Shoko.Series.TvDB linked to the\r\nShoko.Server.API.v3.Models.Shoko.Series using the seriesID.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Forcefully retrive updated data from TvDB",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "tvdbID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Series/TvDB/{tvdbID}": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get TvDB Info from the TvDB ID",
        "parameters": [
          {
            "name": "tvdbID",
            "in": "path",
            "description": "TvDB ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Series.TvDB"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Series.TvDB"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Series.TvDB"
                }
              }
            }
          }
        }
      }
    },
    "/Series/TvDB/{tvdbID}/Refresh": {
      "post": {
        "tags": [
          "Series"
        ],
        "summary": "Directly queue a refresh of the the Shoko.Server.API.v3.Models.Shoko.Series.TvDB data using\r\nthe tvdbID.",
        "parameters": [
          {
            "name": "tvdbID",
            "in": "path",
            "description": "TvDB ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Forcefully retrive updated data from TvDB",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "immediate",
            "in": "query",
            "description": "Try to immediately refresh the data.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/Series/TvDB/{tvdbID}/Series": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get a Series from the TvDB ID",
        "parameters": [
          {
            "name": "tvdbID",
            "in": "path",
            "description": "TvDB ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/Vote": {
      "post": {
        "tags": [
          "Series"
        ],
        "summary": "Add a permanent or temprary user-submitted rating for the series.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Common.Vote"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Common.Vote"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Common.Vote"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Common.Vote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Series/{seriesID}/Images": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get all images for series with ID, optionally with Disabled images, as well.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeDisabled",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Images"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Images"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Images"
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/Images/{imageType}": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get the default Shoko.Server.API.v3.Models.Common.Image for the given imageType for the Shoko.Server.API.v3.Models.Shoko.Series.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Series ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "imageType",
            "in": "path",
            "description": "Poster, Banner, Fanart",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Image.ImageType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Image"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Image"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Image"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Series"
        ],
        "summary": "Set the default Shoko.Server.API.v3.Models.Common.Image for the given imageType for the Shoko.Server.API.v3.Models.Shoko.Series.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Series ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "imageType",
            "in": "path",
            "description": "Poster, Banner, Fanart",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Image.ImageType"
            }
          }
        ],
        "requestBody": {
          "description": "The body containing the source and id used to set.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.DefaultImageBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.DefaultImageBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.DefaultImageBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.DefaultImageBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Image"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Image"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Image"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Series"
        ],
        "summary": "Unset the default Shoko.Server.API.v3.Models.Common.Image for the given imageType for the Shoko.Server.API.v3.Models.Shoko.Series.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "imageType",
            "in": "path",
            "description": "Poster, Banner, Fanart",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Image.ImageType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Series/{seriesID}/Tags": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get tags for Series with ID, optionally applying the given Shoko.Server.TagFilter.Filter",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/TagFilter.Filter"
            }
          },
          {
            "name": "excludeDescriptions",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "orderByName",
            "in": "query",
            "description": "Order tags by name (and source) only. Don't use the tag weights for ordering.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "onlyVerified",
            "in": "query",
            "description": "Only show verified tags.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Tag"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Tag"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Tag"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/Tags/{filter}": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get tags for Series with ID, applying the given TagFilter (0 is show all)",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TagFilter.Filter"
            }
          },
          {
            "name": "excludeDescriptions",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Tag"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Tag"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Tag"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/Series/{seriesID}/Cast": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get the cast listing for series with ID",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "roleType",
            "in": "query",
            "description": "Filter by role type",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Role.CreatorRoleType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Role"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Role"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Common.Role"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/Move/{groupID}": {
      "patch": {
        "tags": [
          "Series"
        ],
        "summary": "Move the series to a new group, and update accordingly",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Shoko ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/Series/Search": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Search for series with given query in name or tag",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "target string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fuzzy",
            "in": "query",
            "description": "whether or not to use fuzzy search",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "number of return items",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.SeriesSearchResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.SeriesSearchResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.SeriesSearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Series/Search/{query}": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Search for series with given query in name or tag",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "target string",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fuzzy",
            "in": "query",
            "description": "whether or not to use fuzzy search",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "number of return items",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.SeriesSearchResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.SeriesSearchResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.SeriesSearchResult"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/Series/AniDB/Search": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Search the title dump for the given query or directly using the anidb id.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Query to search for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fuzzy",
            "in": "query",
            "description": "Indicates fuzzy-matching should be used for the search.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "local",
            "in": "query",
            "description": "Only search for results in the local collection if it's true and only search for results not in the local collection if false. Omit to include both.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeTitles",
            "in": "query",
            "description": "Include titles in the results.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Series.AniDB]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Series.AniDB]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Series.AniDB]"
                }
              }
            }
          }
        }
      }
    },
    "/Series/AniDB/Search/{query}": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Search the title dump for the given query or directly using the anidb id.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "Query to search for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fuzzy",
            "in": "query",
            "description": "Indicates fuzzy-matching should be used for the search.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "local",
            "in": "query",
            "description": "Only search for results in the local collection if it's true and only search for results not in the local collection if false. Omit to include both.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeTitles",
            "in": "query",
            "description": "Include titles in the results.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Series.AniDB]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Series.AniDB]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Series.AniDB]"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/Series/StartsWith/{query}": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Searches for series whose title starts with a string",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 2147483647
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.SeriesSearchResult"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.SeriesSearchResult"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.SeriesSearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Series/PathEndsWith/{path}": {
      "get": {
        "tags": [
          "Series"
        ],
        "summary": "Get the series that reside in the path that ends with <param name=\"path\"></param>",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Tag/AniDB": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Get a list of all known anidb tags, optionally with a\r\nfilter applied.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Tag filter.",
            "schema": {
              "$ref": "#/components/schemas/TagFilter.Filter"
            }
          },
          {
            "name": "excludeDescriptions",
            "in": "query",
            "description": "Exclude tag descriptions from response.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "onlyVerified",
            "in": "query",
            "description": "Only show verified tags.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Common.Tag]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Common.Tag]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Common.Tag]"
                }
              }
            }
          }
        }
      }
    },
    "/Tag/AniDB/{tagID}": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Get an anidb tag by it's id.",
        "parameters": [
          {
            "name": "tagID",
            "in": "path",
            "description": "Anidb Tag ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "excludeDescription",
            "in": "query",
            "description": "Exclude tag description from response.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Tag"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Tag"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Tag"
                }
              }
            }
          }
        }
      }
    },
    "/Tag/User": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Get a list of all user tags.",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "excludeDescriptions",
            "in": "query",
            "description": "Exclude tag descriptions from response.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Common.Tag]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Common.Tag]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Common.Tag]"
                }
              }
            }
          }
        }
      }
    },
    "/Tag/User/{tagID}": {
      "get": {
        "tags": [
          "Tag"
        ],
        "summary": "Get an user tag by it's tagID.",
        "parameters": [
          {
            "name": "tagID",
            "in": "path",
            "description": "User Tag ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "excludeDescription",
            "in": "query",
            "description": "Exclude tag description from response.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Tag"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Tag"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Tag"
                }
              }
            }
          }
        }
      }
    },
    "/ImportFolder/{folderID}/File": {
      "get": {
        "tags": [
          "Tree"
        ],
        "summary": "Get all Shoko.Server.API.v3.Models.Shoko.Files in the Shoko.Server.API.v3.Models.Shoko.ImportFolder with the given folderID.",
        "parameters": [
          {
            "name": "folderID",
            "in": "path",
            "description": "Import folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size. Set to ```0``` to disable pagination.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "includeXRefs",
            "in": "query",
            "description": "Set to true to include series and episode cross-references.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.File]"
                }
              }
            }
          }
        }
      }
    },
    "/Filter/{filterID}/Filter": {
      "get": {
        "tags": [
          "Tree"
        ],
        "summary": "Get a list of all the sub-Shoko.Server.API.v3.Models.Shoko.Filter for the Shoko.Server.API.v3.Models.Shoko.Filter with the given filterID.",
        "description": "The Shoko.Server.API.v3.Models.Shoko.Filter must have Shoko.Server.API.v3.Models.Shoko.Filter.IsDirectory set to true to use\r\nthis endpoint.",
        "parameters": [
          {
            "name": "filterID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Filter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size. Set to ```0``` to disable pagination.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "showHidden",
            "in": "query",
            "description": "Show hidden filters",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Filter]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Filter]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Filter]"
                }
              }
            }
          }
        }
      }
    },
    "/Filter/{filterID}/Group": {
      "get": {
        "tags": [
          "Tree"
        ],
        "summary": "Get a paginated list of all the top-level Shoko.Server.API.v3.Models.Shoko.Groups for the Shoko.Server.API.v3.Models.Shoko.Filter with the given filterID.",
        "description": "The Shoko.Server.API.v3.Models.Shoko.Filter must have Shoko.Server.API.v3.Models.Shoko.Filter.IsDirectory set to false to use\r\nthis endpoint.",
        "parameters": [
          {
            "name": "filterID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Filter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size. Set to ```0``` to disable pagination.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "includeEmpty",
            "in": "query",
            "description": "Include Shoko.Server.API.v3.Models.Shoko.Series with missing Shoko.Server.API.v3.Models.Shoko.Episodes in the search.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for the Shoko.Server.API.v3.Models.Shoko.Group.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "orderByName",
            "in": "query",
            "description": "Ignore the group filter sort critaria and always order the returned list by name.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Group]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Group]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Group]"
                }
              }
            }
          }
        }
      }
    },
    "/Filter/{filterID}/Group/Letters": {
      "get": {
        "tags": [
          "Tree"
        ],
        "summary": "Get a dictionary with the count for each starting character in each of\r\nthe top-level group's name with the filter for the given\r\nfilterID applied.",
        "description": "The Shoko.Server.API.v3.Models.Shoko.Filter must have Shoko.Server.API.v3.Models.Shoko.Filter.IsDirectory set to false to use\r\nthis endpoint.",
        "parameters": [
          {
            "name": "filterID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Filter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeEmpty",
            "in": "query",
            "description": "Include Shoko.Server.API.v3.Models.Shoko.Series with missing\r\n            Shoko.Server.API.v3.Models.Shoko.Episodes in the count.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Filter/{filterID}/Series": {
      "get": {
        "tags": [
          "Tree"
        ],
        "summary": "Get a paginated list of all the Shoko.Server.API.v3.Models.Shoko.Series within a Shoko.Server.API.v3.Models.Shoko.Filter.",
        "description": " Pass a filterID of ```0``` to disable filter.\r\n<br />\r\nThe Shoko.Server.API.v3.Models.Shoko.Filter must have Shoko.Server.API.v3.Models.Shoko.Filter.IsDirectory set to false to use\r\nthis endpoint.",
        "parameters": [
          {
            "name": "filterID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Filter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size. Set to ```0``` to disable pagination.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for each Shoko.Server.API.v3.Models.Shoko.Series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeMissing",
            "in": "query",
            "description": "Include Shoko.Server.API.v3.Models.Shoko.Series with missing\r\n            Shoko.Server.API.v3.Models.Shoko.Episodes in the count.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Series]"
                }
              }
            }
          }
        }
      }
    },
    "/Filter/{filterID}/Group/{groupID}/Group": {
      "get": {
        "tags": [
          "Tree"
        ],
        "summary": "Get a list of all the sub-Shoko.Server.API.v3.Models.Shoko.Groups belonging to the Shoko.Server.API.v3.Models.Shoko.Group with the given groupID and which are present within the Shoko.Server.API.v3.Models.Shoko.Filter with the given filterID.",
        "description": "The Shoko.Server.API.v3.Models.Shoko.Filter must have Shoko.Server.API.v3.Models.Shoko.Filter.IsDirectory set to false to use\r\nthis endpoint.",
        "parameters": [
          {
            "name": "filterID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Filter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for the Shoko.Server.API.v3.Models.Shoko.Group.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeEmpty",
            "in": "query",
            "description": "Include Shoko.Server.API.v3.Models.Shoko.Series with missing Shoko.Server.API.v3.Models.Shoko.Episodes in the search.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Group"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Group"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Group"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Filter/{filterID}/Group/{groupID}/Series": {
      "get": {
        "tags": [
          "Tree"
        ],
        "summary": "Get a list of all the Shoko.Server.API.v3.Models.Shoko.Series for the Shoko.Server.API.v3.Models.Shoko.Group within the Shoko.Server.API.v3.Models.Shoko.Filter.",
        "description": " Pass a filterID of ```0``` to disable filter.\r\n<br />\r\nThe Shoko.Server.API.v3.Models.Shoko.Filter must have Shoko.Server.API.v3.Models.Shoko.Filter.IsDirectory set to false to use\r\nthis endpoint.",
        "parameters": [
          {
            "name": "filterID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Filter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "Show all the Shoko.Server.API.v3.Models.Shoko.Series within the Shoko.Server.API.v3.Models.Shoko.Group. Even the Shoko.Server.API.v3.Models.Shoko.Series within the sub-Shoko.Server.API.v3.Models.Shoko.Groups.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeMissing",
            "in": "query",
            "description": "Include Shoko.Server.API.v3.Models.Shoko.Series with missing Shoko.Server.API.v3.Models.Shoko.Episodes in the list.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for each Shoko.Server.API.v3.Models.Shoko.Series within the Shoko.Server.API.v3.Models.Shoko.Group.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Group/{groupID}/Group": {
      "get": {
        "tags": [
          "Tree"
        ],
        "summary": "Get a list of sub-Shoko.Server.API.v3.Models.Shoko.Groups a the Shoko.Server.API.v3.Models.Shoko.Group.",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for the Shoko.Server.API.v3.Models.Shoko.Group.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeEmpty",
            "in": "query",
            "description": "Include Shoko.Server.API.v3.Models.Shoko.Series with missing Shoko.Server.API.v3.Models.Shoko.Episodes in the search.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Group"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Group"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Group"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Group/{groupID}/Series": {
      "get": {
        "tags": [
          "Tree"
        ],
        "summary": "Get a list of Shoko.Server.API.v3.Models.Shoko.Series within a Shoko.Server.API.v3.Models.Shoko.Group.",
        "description": "It will return all the Shoko.Server.API.v3.Models.Shoko.Series within the group and all sub-groups if\r\nrecursive is set to ```true```.",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "Show all the Shoko.Server.API.v3.Models.Shoko.Series within the Shoko.Server.API.v3.Models.Shoko.Group",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeMissing",
            "in": "query",
            "description": "Include Shoko.Server.API.v3.Models.Shoko.Series with missing Shoko.Server.API.v3.Models.Shoko.Episodes in the list.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for each Shoko.Server.API.v3.Models.Shoko.Series within the Shoko.Server.API.v3.Models.Shoko.Group.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.Series"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Group/{groupID}/MainSeries": {
      "get": {
        "tags": [
          "Tree"
        ],
        "summary": "Get the main Shoko.Server.API.v3.Models.Shoko.Series in a Shoko.Server.API.v3.Models.Shoko.Group.",
        "description": "It will return 1) the default series or 2) the earliest running\r\nseries if the group contains a series, or nothing if the group is\r\nempty.",
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "Shoko.Server.API.v3.Models.Shoko.Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "randomImages",
            "in": "query",
            "description": "Randomise images shown for the Shoko.Server.API.v3.Models.Shoko.Series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Series"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Series"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Series"
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/Episode": {
      "get": {
        "tags": [
          "Tree"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.Episodes for the Shoko.Server.API.v3.Models.Shoko.Series with seriesID.",
        "description": "Shoko.Server.API.v3.Models.Shoko.Filter or Shoko.Server.API.v3.Models.Shoko.Group is irrelevant at this level.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Series ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The page size. Set to ```0``` to disable pagination.",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page index.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "includeMissing",
            "in": "query",
            "description": "Include missing episodes in the list.",
            "schema": {
              "$ref": "#/components/schemas/Common.IncludeOnlyFilter"
            }
          },
          {
            "name": "includeHidden",
            "in": "query",
            "description": "Include hidden episodes in the list.",
            "schema": {
              "$ref": "#/components/schemas/Common.IncludeOnlyFilter"
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          },
          {
            "name": "includeWatched",
            "in": "query",
            "description": "Include watched episodes in the list.",
            "schema": {
              "$ref": "#/components/schemas/Common.IncludeOnlyFilter"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter episodes by the specified Shoko.Server.API.v3.Models.Shoko.EpisodeTypes.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "An optional search query to filter episodes based on their titles.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fuzzy",
            "in": "query",
            "description": "Indicates that fuzzy-matching should be used for the search query.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Episode]"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Episode]"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResult[Shoko.Episode]"
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/NextUpEpisode": {
      "get": {
        "tags": [
          "Tree"
        ],
        "summary": "Get the next Shoko.Server.API.v3.Models.Shoko.Episode for the Shoko.Server.API.v3.Models.Shoko.Series with seriesID.",
        "description": "Shoko.Server.API.v3.Models.Shoko.Filter or Shoko.Server.API.v3.Models.Shoko.Group is irrelevant at this level.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Series ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "onlyUnwatched",
            "in": "query",
            "description": "Only show the next unwatched episode.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeSpecials",
            "in": "query",
            "description": "Include specials in the search.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeMissing",
            "in": "query",
            "description": "Include missing episodes in the list.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeHidden",
            "in": "query",
            "description": "Include hidden episodes in the list.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeRewatching",
            "in": "query",
            "description": "Include already watched episodes in the\r\n            search if we determine the user is \"re-watching\" the series.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Episode"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Episode"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.Episode"
                }
              }
            }
          }
        }
      }
    },
    "/Series/{seriesID}/File": {
      "get": {
        "tags": [
          "Tree"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.Files for the Shoko.Server.API.v3.Models.Shoko.Series with the given seriesID.",
        "parameters": [
          {
            "name": "seriesID",
            "in": "path",
            "description": "Series ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeXRefs",
            "in": "query",
            "description": "Set to true to include series and episode cross-references.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          },
          {
            "name": "isManuallyLinked",
            "in": "query",
            "description": "Omit to select all files. Set to true to only select manually\r\n            linked files, or set to false to only select automatically linked files.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeMediaInfo",
            "in": "query",
            "description": "Include media info data.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Episode/{episodeID}/File": {
      "get": {
        "tags": [
          "Tree"
        ],
        "summary": "Get the Shoko.Server.API.v3.Models.Shoko.Files for the Shoko.Server.API.v3.Models.Shoko.Episode with the given episodeID.",
        "parameters": [
          {
            "name": "episodeID",
            "in": "path",
            "description": "Episode ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeXRefs",
            "in": "query",
            "description": "Set to true to include series and episode cross-references.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeDataFrom",
            "in": "query",
            "description": "Include data from selected Shoko.Server.API.v3.Models.Common.DataSources.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Common.DataSource"
              }
            }
          },
          {
            "name": "isManuallyLinked",
            "in": "query",
            "description": "Omit to select all files. Set to true to only select manually\r\n            linked files, or set to false to only select automatically linked files.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeMediaInfo",
            "in": "query",
            "description": "Include media info data.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.File"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/User": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List all available users.",
        "description": "Only for administrators.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.User"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.User"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Shoko.User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add a new user.",
        "description": "Only for administrators.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateUserBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateUserBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateUserBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateUserBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              }
            }
          }
        }
      }
    },
    "/User/Current": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the current user.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Edit the current user using a JSON patch document to do a partial\r\nupdate.",
        "requestBody": {
          "description": "JSON patch document for the partial update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Edit the current user using a raw object to do a partial update.",
        "requestBody": {
          "description": "The partial document for the changes to be made to\r\n            the user.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateUserBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateUserBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateUserBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateUserBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              }
            }
          }
        }
      }
    },
    "/User/Current/ChangePassword": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Change the password for the current user.",
        "requestBody": {
          "description": "The body with the new password.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.ChangePasswordBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.ChangePasswordBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.ChangePasswordBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.ChangePasswordBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/User/{userID}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a user by id.",
        "description": "Only for administrators.",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Edit an user by id using a JSON patch document to do a partial update.",
        "description": "Only for administrators.",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JSON patch document for the partial update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Edit an user by id using a raw object to do a partial update.",
        "description": "Only for administrators.",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The partial document for the changes to be made to\r\n            the user.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateUserBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateUserBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateUserBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.CreateOrUpdateUserBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Shoko.User"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete a user by id. This updates group filters and wipes internal watched states, so be careful.",
        "description": "Only for administrators.",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/User/{userID}/ChangePassword": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Change the password for a user.",
        "description": "Can only be called by admins or the user the password belongs to.",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The change password request body.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.ChangePasswordBody"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.ChangePasswordBody"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Input.ChangePasswordBody"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Input.ChangePasswordBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AniDB.AniDBReleaseGroup": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The Release Group's Name (Unlimited Translation Works)",
            "nullable": true
          },
          "ShortName": {
            "type": "string",
            "description": "The Release Group's Name (UTW)",
            "nullable": true
          },
          "ID": {
            "type": "integer",
            "description": "AniDB ID",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AniDB.UDPReturnCode": {
        "enum": [
          200,
          201,
          203,
          205,
          206,
          207,
          208,
          209,
          210,
          211,
          214,
          215,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          227,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          237,
          238,
          240,
          243,
          244,
          245,
          246,
          247,
          248,
          249,
          250,
          251,
          253,
          254,
          255,
          256,
          257,
          258,
          260,
          261,
          262,
          263,
          265,
          266,
          267,
          270,
          281,
          282,
          290,
          291,
          292,
          293,
          294,
          295,
          297,
          300,
          301,
          305,
          309,
          310,
          311,
          312,
          313,
          314,
          315,
          316,
          317,
          318,
          319,
          320,
          321,
          322,
          323,
          324,
          325,
          330,
          333,
          334,
          335,
          336,
          337,
          338,
          340,
          343,
          344,
          345,
          350,
          351,
          355,
          356,
          357,
          358,
          360,
          361,
          362,
          363,
          364,
          365,
          366,
          367,
          370,
          381,
          382,
          392,
          393,
          394,
          397,
          399,
          403,
          410,
          411,
          412,
          500,
          501,
          502,
          503,
          504,
          505,
          506,
          509,
          519,
          555,
          598,
          600,
          601,
          602,
          603,
          604,
          666,
          701,
          702,
          998
        ],
        "type": "integer",
        "format": "int32"
      },
      "Collection.PlexLibrary": {
        "type": "object",
        "properties": {
          "RatingKey": {
            "type": "string",
            "nullable": true
          },
          "Key": {
            "type": "string",
            "nullable": true
          },
          "Type": {
            "$ref": "#/components/schemas/Plex.PlexType"
          },
          "Title": {
            "type": "string",
            "nullable": true
          },
          "ContentRating": {
            "type": "string",
            "nullable": true
          },
          "Summary": {
            "type": "string",
            "nullable": true
          },
          "Index": {
            "type": "integer",
            "format": "int64"
          },
          "Rating": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Year": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "Thumb": {
            "type": "string",
            "nullable": true
          },
          "Art": {
            "type": "string",
            "nullable": true
          },
          "Banner": {
            "type": "string",
            "nullable": true
          },
          "OriginallyAvailableAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "LeafCount": {
            "type": "integer",
            "format": "int64"
          },
          "ViewedLeafCount": {
            "type": "integer",
            "format": "int64"
          },
          "ChildCount": {
            "type": "integer",
            "format": "int64"
          },
          "AddedAt": {
            "type": "integer",
            "format": "int64"
          },
          "UpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "Genre": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Plex.TagHolder"
            },
            "nullable": true
          },
          "Role": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Plex.TagHolder"
            },
            "nullable": true
          },
          "SkipChildren": {
            "type": "boolean",
            "nullable": true
          },
          "Theme": {
            "type": "string",
            "nullable": true
          },
          "ViewCount": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "LastViewedAt": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "TitleSort": {
            "type": "string",
            "nullable": true
          },
          "UserRating": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Common.AVDumpResult": {
        "required": [
          "Ed2k",
          "FullOutput"
        ],
        "type": "object",
        "properties": {
          "FullOutput": {
            "minLength": 1,
            "type": "string"
          },
          "Ed2k": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Common.ComponentVersion": {
        "type": "object",
        "properties": {
          "Version": {
            "type": "string",
            "description": "Version number.",
            "nullable": true
          },
          "Commit": {
            "type": "string",
            "description": "Commit SHA.",
            "nullable": true
          },
          "ReleaseChannel": {
            "$ref": "#/components/schemas/Common.ReleaseChannel"
          },
          "ReleaseDate": {
            "type": "string",
            "description": "Release date.",
            "format": "date-time",
            "nullable": true
          },
          "Tag": {
            "type": "string",
            "description": "Git Tag.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "A short description about this release/version.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Common.ComponentVersionSet": {
        "type": "object",
        "properties": {
          "Server": {
            "$ref": "#/components/schemas/Common.ComponentVersion"
          },
          "Commons": {
            "$ref": "#/components/schemas/Common.ComponentVersion"
          },
          "Models": {
            "$ref": "#/components/schemas/Common.ComponentVersion"
          },
          "MediaInfo": {
            "$ref": "#/components/schemas/Common.ComponentVersion"
          },
          "WebUI": {
            "$ref": "#/components/schemas/Common.ComponentVersion"
          }
        },
        "additionalProperties": false
      },
      "Common.Credentials": {
        "type": "object",
        "properties": {
          "Username": {
            "type": "string",
            "description": "A generic Username field",
            "nullable": true
          },
          "Password": {
            "type": "string",
            "description": "A generic password field",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Common.DataSource": {
        "enum": [
          "None",
          "AniDB",
          "TvDB",
          "TMDB",
          "Trakt",
          "MAL",
          "AniList",
          "Animeshon",
          "Kitsu",
          "Shoko"
        ],
        "type": "string",
        "description": "Available data sources to chose from."
      },
      "Common.Image": {
        "required": [
          "ID",
          "Source",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Source": {
            "$ref": "#/components/schemas/Image.ImageSource"
          },
          "Type": {
            "$ref": "#/components/schemas/Image.ImageType"
          },
          "ID": {
            "minLength": 1,
            "type": "string",
            "description": "The image's ID, usually an int, but in the case of Static resources, it is the resource name."
          },
          "RelativeFilepath": {
            "type": "string",
            "description": "The relative path from the base image directory. A client with access to the server's filesystem can map\r\nthese for quick access and no need for caching",
            "nullable": true
          },
          "Preferred": {
            "type": "boolean",
            "description": "Is it marked as default. Only one default is possible for a given Shoko.Server.API.v3.Models.Common.Image.Type."
          },
          "Width": {
            "type": "integer",
            "description": "Width of the image.",
            "format": "int32",
            "nullable": true
          },
          "Height": {
            "type": "integer",
            "description": "Height of the image.",
            "format": "int32",
            "nullable": true
          },
          "Disabled": {
            "type": "boolean",
            "description": "Is it marked as disabled. You must explicitly ask for these, for obvious reasons."
          },
          "Series": {
            "$ref": "#/components/schemas/Image.ImageSeriesInfo"
          }
        },
        "additionalProperties": false,
        "description": "Image container"
      },
      "Common.Images": {
        "type": "object",
        "properties": {
          "Posters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.Image"
            },
            "nullable": true
          },
          "Fanarts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.Image"
            },
            "nullable": true
          },
          "Banners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.Image"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Common.IncludeOnlyFilter": {
        "enum": [
          "false",
          "true",
          "only"
        ],
        "type": "string"
      },
      "Common.Rating": {
        "required": [
          "MaxValue",
          "Source",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Value": {
            "type": "number",
            "description": "rating",
            "format": "double"
          },
          "MaxValue": {
            "type": "integer",
            "description": "out of what? Assuming int, as the max should be",
            "format": "int32"
          },
          "Source": {
            "minLength": 1,
            "type": "string",
            "description": "AniDB, etc"
          },
          "Votes": {
            "type": "integer",
            "description": "number of votes",
            "format": "int32"
          },
          "Type": {
            "type": "string",
            "description": "for temporary vs permanent, or any other situations that may arise later",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Rating object. Shared between sources, episodes vs series, etc"
      },
      "Common.ReleaseChannel": {
        "enum": [
          "Stable",
          "Dev",
          "Debug"
        ],
        "type": "string"
      },
      "Common.Role": {
        "required": [
          "Language",
          "RoleName",
          "Staff"
        ],
        "type": "object",
        "properties": {
          "Language": {
            "minLength": 1,
            "type": "string",
            "description": "Most will be Japanese. Once AniList is in, it will have multiple options"
          },
          "Staff": {
            "$ref": "#/components/schemas/Role.Person"
          },
          "Character": {
            "$ref": "#/components/schemas/Role.Person"
          },
          "RoleName": {
            "$ref": "#/components/schemas/Role.CreatorRoleType"
          },
          "RoleDetails": {
            "type": "string",
            "description": "Extra info about the role. For example, role can be voice actor, while role_details is Main Character",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is for cast/staff"
      },
      "Common.SeriesRelation": {
        "required": [
          "Source",
          "Type"
        ],
        "type": "object",
        "properties": {
          "IDs": {
            "$ref": "#/components/schemas/SeriesRelation.RelationIDs"
          },
          "RelatedIDs": {
            "$ref": "#/components/schemas/SeriesRelation.RelationIDs"
          },
          "Type": {
            "$ref": "#/components/schemas/DataModels.RelationType"
          },
          "Source": {
            "minLength": 1,
            "type": "string",
            "description": "AniDB, etc."
          }
        },
        "additionalProperties": false,
        "description": "Describes relations between two series entries."
      },
      "Common.Tag": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "Tag id. Relative to it's source for now.",
            "format": "int32"
          },
          "ParentID": {
            "type": "integer",
            "description": "The parent tag id, if any. Relative to it's source for now.",
            "format": "int32",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "The tag itself.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "What does the tag mean/what's it for.",
            "nullable": true
          },
          "IsVerified": {
            "type": "boolean",
            "description": "True if the tag has been verified.",
            "nullable": true
          },
          "IsSpoiler": {
            "type": "boolean",
            "description": "True if the tag is considered a spoiler for all series it appears on."
          },
          "IsLocalSpoiler": {
            "type": "boolean",
            "description": "True if the tag is considered a spoiler for that particular series it is\r\nset on.",
            "nullable": true
          },
          "Weight": {
            "type": "integer",
            "description": "How relevant is it to the series",
            "format": "int32",
            "nullable": true
          },
          "LastUpdated": {
            "type": "string",
            "description": "When the tag info was last updated.",
            "format": "date-time",
            "nullable": true
          },
          "Source": {
            "type": "string",
            "description": "Source. Anidb, User, etc.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Common.Title": {
        "required": [
          "Language",
          "Name",
          "Source"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "the title"
          },
          "Language": {
            "minLength": 1,
            "type": "string",
            "description": "convert to AniDB style (x-jat is the special one, but most are standard 3-digit short names)"
          },
          "Type": {
            "$ref": "#/components/schemas/DataModels.TitleType"
          },
          "Default": {
            "type": "boolean",
            "description": "If this is the default title"
          },
          "Source": {
            "minLength": 1,
            "type": "string",
            "description": "AniDB, TvDB, AniList, etc"
          }
        },
        "additionalProperties": false,
        "description": "Title object, stores the title, type, language, and source\r\nif using a TvDB title, assume \"eng:official\". If using AniList, assume \"x-jat:main\"\r\nAniDB's MainTitle is \"x-jat:main\""
      },
      "Common.Vote": {
        "required": [
          "Value"
        ],
        "type": "object",
        "properties": {
          "Value": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "number",
            "description": "The user-submitted rating relative to Shoko.Server.API.v3.Models.Common.Vote.MaxValue.",
            "format": "double"
          },
          "MaxValue": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Max allowed value for the user-submitted rating. Assumes 10 if not set.",
            "format": "int32",
            "default": 10
          },
          "Type": {
            "type": "string",
            "description": "for temporary vs permanent, or any other situations that may arise later.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Vote object. Shared between sources, episodes vs series, etc.\r\nNormalises the value"
      },
      "Connections.Connection": {
        "type": "object",
        "properties": {
          "Protocol": {
            "type": "string",
            "nullable": true
          },
          "Address": {
            "type": "string",
            "nullable": true
          },
          "Port": {
            "type": "string",
            "nullable": true
          },
          "Uri": {
            "type": "string",
            "nullable": true
          },
          "Local": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Connections.MediaDevice": {
        "type": "object",
        "properties": {
          "Connection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connections.Connection"
            },
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Product": {
            "type": "string",
            "nullable": true
          },
          "ProductVersion": {
            "type": "string",
            "nullable": true
          },
          "Platform": {
            "type": "string",
            "nullable": true
          },
          "PlatformVersion": {
            "type": "string",
            "nullable": true
          },
          "Device": {
            "type": "string",
            "nullable": true
          },
          "ClientIdentifier": {
            "type": "string",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "nullable": true
          },
          "LastSeenAt": {
            "type": "string",
            "nullable": true
          },
          "Provides": {
            "type": "string",
            "nullable": true
          },
          "Owned": {
            "type": "string",
            "nullable": true
          },
          "AccessToken": {
            "type": "string",
            "nullable": true
          },
          "PublicAddress": {
            "type": "string",
            "nullable": true
          },
          "HttpsRequired": {
            "type": "string",
            "nullable": true
          },
          "Synced": {
            "type": "string",
            "nullable": true
          },
          "Relay": {
            "type": "string",
            "nullable": true
          },
          "PublicAddressMatches": {
            "type": "string",
            "nullable": true
          },
          "Presence": {
            "type": "string",
            "nullable": true
          },
          "OwnerId": {
            "type": "string",
            "nullable": true
          },
          "Home": {
            "type": "string",
            "nullable": true
          },
          "SourceTitle": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Dashboard.CollectionStats": {
        "type": "object",
        "properties": {
          "FileCount": {
            "type": "integer",
            "description": "Number of Files in the collection (visible to the current user)",
            "format": "int32"
          },
          "SeriesCount": {
            "type": "integer",
            "description": "Number of Series in the Collection (visible to the current user)",
            "format": "int32"
          },
          "GroupCount": {
            "type": "integer",
            "description": "The number of Groups in the Collection (visible to the current user)",
            "format": "int32"
          },
          "FileSize": {
            "type": "integer",
            "description": "Total amount of space the collection takes (of what's visible to the current user)",
            "format": "int64"
          },
          "FinishedSeries": {
            "type": "integer",
            "description": "Number of Series Completely Watched",
            "format": "int32"
          },
          "WatchedEpisodes": {
            "type": "integer",
            "description": "Number of Episodes Watched",
            "format": "int32"
          },
          "WatchedHours": {
            "type": "number",
            "description": "Watched Hours, rounded to one place",
            "format": "double"
          },
          "PercentDuplicate": {
            "type": "number",
            "description": "The percentage of files that are either duplicates or belong to the same episode",
            "format": "double"
          },
          "MissingEpisodes": {
            "type": "integer",
            "description": "The Number of missing episodes, regardless of where they are from or available",
            "format": "int32"
          },
          "MissingEpisodesCollecting": {
            "type": "integer",
            "description": "The number of missing episodes from groups we are collecting. This should not be used as a rule, as it's not very reliable",
            "format": "int32"
          },
          "UnrecognizedFiles": {
            "type": "integer",
            "description": "Number of Unrecognized Files",
            "format": "int32"
          },
          "SeriesWithMissingLinks": {
            "type": "integer",
            "description": "The number of series missing both the TvDB and MovieDB Links",
            "format": "int32"
          },
          "EpisodesWithMultipleFiles": {
            "type": "integer",
            "description": "The number of Episodes with more than one File (not marked as a variation)",
            "format": "int32"
          },
          "FilesWithDuplicateLocations": {
            "type": "integer",
            "description": "The number of files that exist in more than one location",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Dashboard.EpisodeDetails": {
        "type": "object",
        "properties": {
          "IDs": {
            "$ref": "#/components/schemas/Dashboard.EpisodeDetailsIDs"
          },
          "Title": {
            "type": "string",
            "description": "Episode title.",
            "nullable": true
          },
          "Number": {
            "type": "integer",
            "description": "Episode number.",
            "format": "int32"
          },
          "Type": {
            "type": "string",
            "description": "Episode type."
          },
          "AirDate": {
            "type": "string",
            "description": "Air Date.",
            "format": "date-time",
            "nullable": true
          },
          "Duration": {
            "type": "string",
            "description": "The duration of the episode.",
            "format": "date-span"
          },
          "ResumePosition": {
            "type": "string",
            "description": "Where to resume the next playback.",
            "format": "date-span",
            "nullable": true
          },
          "Watched": {
            "type": "string",
            "description": "If the file/episode is considered watched.",
            "format": "date-time",
            "nullable": true
          },
          "SeriesTitle": {
            "type": "string",
            "description": "Series title.",
            "nullable": true
          },
          "SeriesPoster": {
            "$ref": "#/components/schemas/Common.Image"
          }
        },
        "additionalProperties": false,
        "description": "Episode details for displaying on the dashboard."
      },
      "Dashboard.EpisodeDetailsIDs": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "The related Shoko.Server.API.v3.Models.Shoko.Episode.AniDB id for the entry.",
            "format": "int32"
          },
          "Series": {
            "type": "integer",
            "description": "The related Shoko.Server.API.v3.Models.Shoko.Series.AniDB id for the entry.",
            "format": "int32"
          },
          "ShokoFile": {
            "type": "integer",
            "description": "The related Shoko Shoko.Server.API.v3.Models.Shoko.File id if a file is available\r\nand/or appropriate.",
            "format": "int32",
            "nullable": true
          },
          "ShokoEpisode": {
            "type": "integer",
            "description": "The related Shoko Shoko.Server.API.v3.Models.Shoko.Episode id if the episode is\r\navailable locally.",
            "format": "int32",
            "nullable": true
          },
          "ShokoSeries": {
            "type": "integer",
            "description": "The related Shoko Shoko.Server.API.v3.Models.Shoko.Series id if the series is\r\navailable locally.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Object holding ids related to the episode."
      },
      "Dashboard.SeriesSummary": {
        "type": "object",
        "properties": {
          "Series": {
            "type": "integer",
            "description": "The number of normal Series",
            "format": "int32"
          },
          "OVA": {
            "type": "integer",
            "description": "The Number of OVAs",
            "format": "int32"
          },
          "Movie": {
            "type": "integer",
            "description": "The Number of Movies",
            "format": "int32"
          },
          "Special": {
            "type": "integer",
            "description": "The Number of TV Specials",
            "format": "int32"
          },
          "Web": {
            "type": "integer",
            "description": "ONAs and the like, it's more of a new concept",
            "format": "int32"
          },
          "Other": {
            "type": "integer",
            "description": "Things marked on AniDB as Other, different from None",
            "format": "int32"
          },
          "None": {
            "type": "integer",
            "description": "Series that don't have AniDB Records. This is very bad, and usually means there was an error in the import process. It can also happen if the API is hit at just the right time.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DataModels.RelationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          20,
          21,
          22,
          40,
          41,
          42
        ],
        "type": "integer",
        "format": "int32"
      },
      "DataModels.TitleLanguage": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          84,
          85,
          86,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          104,
          105,
          106,
          107,
          108,
          109
        ],
        "type": "integer",
        "format": "int32"
      },
      "DataModels.TitleType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "DebugController.AnidbUdpRequest": {
        "required": [
          "Action"
        ],
        "type": "object",
        "properties": {
          "Action": {
            "minLength": 1,
            "type": "string",
            "description": "The action to run."
          },
          "Unsafe": {
            "type": "boolean",
            "description": "Run the action without checking if we're banned and what-not."
          },
          "Payload": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Extra payload to use with the action.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An abstraction for an AniDB UDP API Request."
      },
      "DebugController.AnidbUdpResponse": {
        "type": "object",
        "properties": {
          "Code": {
            "$ref": "#/components/schemas/AniDB.UDPReturnCode"
          },
          "Response": {
            "type": "string",
            "description": "The response body.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A response from the AniDB UDP API."
      },
      "Enums.AniDBFileDeleteType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "Enums.AniDBFile_State": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "Enums.CommunitySites": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "type": "integer",
        "format": "int32"
      },
      "Enums.DataSourceType": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          1024
        ],
        "type": "integer",
        "format": "int32"
      },
      "Enums.FileQualityFilterOperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "Enums.FileQualityFilterType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8
        ],
        "type": "integer",
        "format": "int32"
      },
      "Enums.GroupFilterConditionType": {
        "enum": [
          1,
          2,
          3,
          5,
          6,
          7,
          9,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          34,
          35,
          36
        ],
        "type": "integer",
        "format": "int32"
      },
      "Enums.GroupFilterOperator": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11
        ],
        "type": "integer",
        "format": "int32"
      },
      "Enums.GroupFilterSorting": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13
        ],
        "type": "integer",
        "format": "int32"
      },
      "Enums.RenamingLanguage": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "Enums.ScheduledUpdateFrequency": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "Episode.AniDB": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "AniDB Episode ID",
            "format": "int32"
          },
          "Type": {
            "type": "string",
            "description": "Episode Type"
          },
          "EpisodeNumber": {
            "type": "integer",
            "description": "Episode Number",
            "format": "int32"
          },
          "AirDate": {
            "type": "string",
            "description": "First Listed Air Date. This may not be when it aired, but an early release date",
            "format": "date-time",
            "nullable": true
          },
          "Titles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.Title"
            },
            "description": "Titles for the Episode",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "AniDB Episode Summary",
            "nullable": true
          },
          "Rating": {
            "$ref": "#/components/schemas/Common.Rating"
          }
        },
        "additionalProperties": false,
        "description": "AniDB specific data for an Episode"
      },
      "Episode.EpisodeIDs": {
        "required": [
          "AniDB",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ParentSeries": {
            "type": "integer",
            "description": "The id of the parent Shoko.Server.API.v3.Models.Shoko.Series.",
            "format": "int32"
          },
          "AniDB": {
            "type": "integer",
            "description": "The AniDB ID",
            "format": "int32"
          },
          "TvDB": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The TvDB IDs",
            "nullable": true
          },
          "ID": {
            "type": "integer",
            "description": "The Shoko internal ID, for easy lookup",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Episode.TvDB": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "TvDB Episode ID",
            "format": "int32"
          },
          "Season": {
            "type": "integer",
            "description": "Season Number, 0 is Specials. TvDB's Season system doesn't always make sense for anime, so don't count on it",
            "format": "int32"
          },
          "Number": {
            "type": "integer",
            "description": "Episode Number in the Season. This is not Absolute Number",
            "format": "int32"
          },
          "AbsoluteNumber": {
            "type": "integer",
            "description": "Absolute Episode Number. Keep in mind that due to reordering, this may not be accurate.",
            "format": "int32",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Episode Title, in the language selected for TvDB. TvDB doesn't allow pulling more than one language at a time, so this isn't a list.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Episode Description, in the language selected for TvDB. See Title for more info on Language.",
            "nullable": true
          },
          "AirDate": {
            "type": "string",
            "description": "Air Date. Unfortunately, the TvDB air date doesn't necessarily conform to a specific timezone, so it can be a day off. If you see one that's wrong, please fix it on TvDB. You have the ID here in this model for easy lookup.",
            "format": "date-time",
            "nullable": true
          },
          "AirsAfterSeason": {
            "type": "integer",
            "description": "Mostly for specials. It shows when in the timeline the episode aired. I wouldn't count on it, as it's often blank.",
            "format": "int32",
            "nullable": true
          },
          "AirsBeforeSeason": {
            "type": "integer",
            "description": "Mostly for specials. It shows when in the timeline the episode aired. I wouldn't count on it, as it's often blank.",
            "format": "int32",
            "nullable": true
          },
          "AirsBeforeEpisode": {
            "type": "integer",
            "description": "Like AirsAfterSeason, it is for determining where in the timeline an episode airs. Also often blank.",
            "format": "int32",
            "nullable": true
          },
          "Rating": {
            "$ref": "#/components/schemas/Common.Rating"
          },
          "Thumbnail": {
            "$ref": "#/components/schemas/Common.Image"
          }
        },
        "additionalProperties": false
      },
      "File.AniDB": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "The AniDB File ID",
            "format": "int32"
          },
          "Source": {
            "$ref": "#/components/schemas/Shoko.FileSource"
          },
          "ReleaseGroup": {
            "$ref": "#/components/schemas/AniDB.AniDBReleaseGroup"
          },
          "ReleaseDate": {
            "type": "string",
            "description": "The file's release date. This is probably not filled in",
            "format": "date-time",
            "nullable": true
          },
          "Version": {
            "type": "integer",
            "description": "The file's version, Usually 1, sometimes more when there are edits released later",
            "format": "int32"
          },
          "IsDeprecated": {
            "type": "boolean",
            "description": "Is the file marked as deprecated. Generally, yes if there's a V2, and this isn't it"
          },
          "IsCensored": {
            "type": "boolean",
            "description": "Mostly applicable to hentai, but on occasion a TV release is censored enough to earn this.",
            "nullable": true
          },
          "OriginalFileName": {
            "type": "string",
            "description": "The original FileName. Useful for when you obtained from a shady source or when you renamed it without thinking.",
            "nullable": true
          },
          "FileSize": {
            "type": "integer",
            "description": "The reported FileSize. If you got this far and it doesn't match, something very odd has occurred",
            "format": "int64"
          },
          "Duration": {
            "type": "string",
            "description": "The reported duration of the file",
            "format": "date-span"
          },
          "Description": {
            "type": "string",
            "description": "Any comments that were added to the file, such as something wrong with it.",
            "nullable": true
          },
          "AudioLanguages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The audio languages",
            "nullable": true
          },
          "SubLanguages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Sub languages",
            "nullable": true
          },
          "Chaptered": {
            "type": "boolean",
            "description": "Does the file have chapters. This may be wrong, since it was only added in AVDump2 (a more recent version at that)"
          },
          "Updated": {
            "type": "string",
            "description": "When we last got data on this file",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "AniDB_File info"
      },
      "File.CrossReferenceIDs": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "The Shoko ID\r\n///",
            "format": "int32"
          },
          "AniDB": {
            "type": "integer",
            "description": "Any AniDB ID linked to this object",
            "format": "int32"
          },
          "TvDB": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Any TvDB IDs linked to this object",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "File.FileUserStats": {
        "type": "object",
        "properties": {
          "ResumePosition": {
            "type": "string",
            "description": "Where to resume the next playback.",
            "format": "date-span",
            "nullable": true
          },
          "WatchedCount": {
            "type": "integer",
            "description": "Total number of times the file have been watched.",
            "format": "int32"
          },
          "LastWatchedAt": {
            "type": "string",
            "description": "When the file was last watched. Will be null if the full is\r\ncurrently marked as unwatched.",
            "format": "date-time",
            "nullable": true
          },
          "LastUpdatedAt": {
            "type": "string",
            "description": "When the entry was last updated.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "User stats for the file."
      },
      "File.Location": {
        "required": [
          "IsAccessible"
        ],
        "type": "object",
        "properties": {
          "ImportFolderID": {
            "type": "integer",
            "description": "The Import Folder that this file resides in",
            "format": "int32"
          },
          "RelativePath": {
            "type": "string",
            "description": "The relative path from the import folder's path on the server. The Filename can be easily extracted from this. Using the ImportFolder, you can get the full server path of the file or map it if the client has remote access to the filesystem.",
            "nullable": true
          },
          "IsAccessible": {
            "type": "boolean",
            "description": "Can the server access the file right now"
          }
        },
        "additionalProperties": false
      },
      "File.SeriesCrossReference": {
        "type": "object",
        "properties": {
          "SeriesID": {
            "$ref": "#/components/schemas/File.CrossReferenceIDs"
          },
          "EpisodeIDs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File.CrossReferenceIDs"
            },
            "description": "The Episode IDs",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileQualityTypeListPair[List[System.String]]": {
        "type": "object",
        "properties": {
          "Operator": {
            "$ref": "#/components/schemas/Enums.FileQualityFilterOperationType"
          },
          "Value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileQualityTypeListPair[System.Int32]": {
        "type": "object",
        "properties": {
          "Operator": {
            "$ref": "#/components/schemas/Enums.FileQualityFilterOperationType"
          },
          "Value": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Filter.FilterCondition": {
        "required": [
          "Operator",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/Enums.GroupFilterConditionType"
          },
          "Operator": {
            "$ref": "#/components/schemas/Enums.GroupFilterOperator"
          },
          "Parameter": {
            "type": "string",
            "description": "The actual value to compare",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Filter.FilterIDs": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "ParentFilter": {
            "type": "integer",
            "description": "The Shoko.Server.API.v3.Models.Common.IDs.ID of the parent Shoko.Server.API.v3.Models.Shoko.Filter, if it has one.",
            "format": "int32",
            "nullable": true
          },
          "ID": {
            "type": "integer",
            "description": "The Shoko internal ID, for easy lookup",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Filter.SortingCriteria": {
        "required": [
          "IsInverted",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/Enums.GroupFilterSorting"
          },
          "IsInverted": {
            "type": "boolean",
            "description": "Assumed Ascending unless this is specified. You must set this if you want highest rating, for example"
          }
        },
        "additionalProperties": false,
        "description": "Sorting Criteria hold info on how Group Filters sort their items.\r\nIt is in a List to follow an OrderBy().ThenBy().ThenBy(), allowing\r\nconsistent results with fallbacks."
      },
      "Group.GroupIDs": {
        "required": [
          "ID"
        ],
        "type": "object",
        "properties": {
          "DefaultSeries": {
            "type": "integer",
            "description": "The ID of the user selected default series, if it has one.\r\n            \r\nThe value of this field will be reflected in Shoko.Server.API.v3.Models.Shoko.Group.GroupIDs.MainSeries if it is set.",
            "format": "int32",
            "nullable": true
          },
          "MainSeries": {
            "type": "integer",
            "description": "The ID of the main series for the group.",
            "format": "int32"
          },
          "ParentGroup": {
            "type": "integer",
            "description": "The ID of the direct parent group, if it has one.",
            "format": "int32",
            "nullable": true
          },
          "TopLevelGroup": {
            "type": "integer",
            "description": "The ID of the top-level (ancestor) group this group belongs to.\r\nIf the current group is a top-level group then it refers to\r\nitself.",
            "format": "int32"
          },
          "ID": {
            "type": "integer",
            "description": "The Shoko internal ID, for easy lookup",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GroupSizes.SeriesTypeCounts": {
        "type": "object",
        "properties": {
          "Unknown": {
            "type": "integer",
            "format": "int32"
          },
          "Other": {
            "type": "integer",
            "format": "int32"
          },
          "TV": {
            "type": "integer",
            "format": "int32"
          },
          "TVSpecial": {
            "type": "integer",
            "format": "int32"
          },
          "Web": {
            "type": "integer",
            "format": "int32"
          },
          "Movie": {
            "type": "integer",
            "format": "int32"
          },
          "OVA": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IO.DriveType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "Image.ImageSeriesInfo": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "The shoko series id.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The preferred series name for the user.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Image.ImageSource": {
        "enum": [
          "AniDB",
          "TvDB",
          "TMDB",
          "User",
          "Shoko"
        ],
        "type": "string",
        "description": "Image source."
      },
      "Image.ImageType": {
        "enum": [
          "Poster",
          "Banner",
          "Thumb",
          "Fanart",
          "Character",
          "Staff",
          "Avatar",
          "Static"
        ],
        "type": "string",
        "description": "Image type."
      },
      "Input.ChangePasswordBody": {
        "required": [
          "Password"
        ],
        "type": "object",
        "properties": {
          "Password": {
            "maxLength": 1024,
            "type": "string",
            "description": "Password"
          },
          "RevokeAPIKeys": {
            "type": "boolean",
            "description": "Revoke all previous active API keys for the user.",
            "default": true
          }
        },
        "additionalProperties": false
      },
      "Input.CreateOrUpdateFilterBody": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The filter name.",
            "nullable": true
          },
          "ParentID": {
            "type": "integer",
            "description": "The id of the parent filter. If you want to add/move this filter\r\nas a sub-filter to an existing directory filter.",
            "format": "int32",
            "nullable": true
          },
          "IsDirectory": {
            "type": "boolean",
            "description": "Indicates the filter should be a directory filter."
          },
          "IsInverted": {
            "type": "boolean",
            "description": "Indicates that the filter is inverted and all conditions applied\r\nto it will be used to exclude groups and series instead of\r\ninclude them."
          },
          "IsHidden": {
            "type": "boolean",
            "description": "Indicates the filter should be hidden unless explictly requested. This will hide the filter from the normal UIs."
          },
          "ApplyAtSeriesLevel": {
            "type": "boolean",
            "description": "Inidcates the filter should be applied at the series level.\r\nFilter conditions like like Seasons, Years, Tags, etc only count series individually, rather than by group."
          },
          "Conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.FilterCondition"
            },
            "description": "List of Conditions. Order doesn't matter.",
            "nullable": true
          },
          "Sorting": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.SortingCriteria"
            },
            "description": "The sorting criteria. Order matters.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Used for creating new filters, updating existing filters, and/or\r\nupdating the live filter."
      },
      "Input.CreateOrUpdateGroupBody": {
        "type": "object",
        "properties": {
          "ParentID": {
            "type": "integer",
            "description": "The Shoko.Server.API.v3.Models.Shoko.Group parent ID. Omit it or set it to 0 to\r\ncreate a new top-level group.",
            "format": "int32",
            "nullable": true
          },
          "DefaultSeriesID": {
            "type": "integer",
            "description": "Manually select the default series for the group.",
            "format": "int32",
            "nullable": true
          },
          "SeriesIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "All the series to put into the group.",
            "nullable": true
          },
          "ChildIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "All groups to put into the group as sub-groups.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "The group's custom name.",
            "nullable": true
          },
          "SortName": {
            "type": "string",
            "description": "The group's custom sort name.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "The group's custom description.",
            "nullable": true
          },
          "HasCustomName": {
            "type": "boolean",
            "description": "Indicates the group should use a custom name.",
            "nullable": true
          },
          "HasCustomDescription": {
            "type": "boolean",
            "description": "Indicates the group should use a custom description.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Input.CreateOrUpdateUserBody": {
        "type": "object",
        "properties": {
          "Username": {
            "type": "string",
            "description": "The user's new name. Must not be empty or only white-spaces.",
            "nullable": true
          },
          "IsAdmin": {
            "type": "boolean",
            "description": "Change the user admin status. The viewer must have admin access\r\nyo change this.",
            "nullable": true
          },
          "CommunitySites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Enums.CommunitySites"
            },
            "description": "The updated list of services that the user can use. The viewer\r\nmust have admin access to change these.",
            "nullable": true
          },
          "RestrictedTags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The updated restricted tags for the user. The viewer must have\r\nadmin access to change these.",
            "nullable": true
          },
          "Avatar": {
            "type": "string",
            "description": "The new user's avatar image, base64 encoded. Set to an empty\r\nstring to remove the current avatar image.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Input.CreateUserBody": {
        "required": [
          "Password"
        ],
        "type": "object",
        "properties": {
          "Password": {
            "maxLength": 1024,
            "type": "string",
            "description": "The new password."
          },
          "Username": {
            "type": "string",
            "description": "The user's new name. Must not be empty or only white-spaces.",
            "nullable": true
          },
          "IsAdmin": {
            "type": "boolean",
            "description": "Change the user admin status. The viewer must have admin access\r\nyo change this.",
            "nullable": true
          },
          "CommunitySites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Enums.CommunitySites"
            },
            "description": "The updated list of services that the user can use. The viewer\r\nmust have admin access to change these.",
            "nullable": true
          },
          "RestrictedTags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The updated restricted tags for the user. The viewer must have\r\nadmin access to change these.",
            "nullable": true
          },
          "Avatar": {
            "type": "string",
            "description": "The new user's avatar image, base64 encoded. Set to an empty\r\nstring to remove the current avatar image.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Input.DefaultImageBody": {
        "required": [
          "ID",
          "Source"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "minLength": 1,
            "type": "string",
            "description": "The ID. A stringified int since we send the ID as a string\r\nfrom the API. Also see <seealso cref=\"P:Shoko.Server.API.v3.Models.Common.Image.ID\" />."
          },
          "Source": {
            "$ref": "#/components/schemas/Image.ImageSource"
          }
        },
        "additionalProperties": false
      },
      "Input.LinkEpisodesBody": {
        "required": [
          "EpisodeIDs"
        ],
        "type": "object",
        "properties": {
          "EpisodeIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "An array of episode identifiers to link to the file."
          }
        },
        "additionalProperties": false,
        "description": "Link a file to multiple episodes."
      },
      "Input.LinkMultipleFilesBody": {
        "required": [
          "EpisodeID",
          "FileIDs"
        ],
        "type": "object",
        "properties": {
          "FileIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "An array of file identifiers to link in batch."
          },
          "EpisodeID": {
            "type": "integer",
            "description": "The episode identifier.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Link a file to multiple episodes."
      },
      "Input.LinkSeriesBody": {
        "required": [
          "RangeEnd",
          "RangeStart",
          "SeriesID"
        ],
        "type": "object",
        "properties": {
          "SeriesID": {
            "type": "integer",
            "description": "The series identifier.",
            "format": "int32"
          },
          "RangeStart": {
            "minLength": 1,
            "type": "string",
            "description": "The start of the range of episodes to link to the file. Append a type prefix to use another episode type."
          },
          "RangeEnd": {
            "minLength": 1,
            "type": "string",
            "description": "The end of the range of episodes to link to the file. The prefix used should be the same as in Shoko.Server.API.v3.Models.Shoko.File.Input.LinkSeriesBody.RangeStart."
          }
        },
        "additionalProperties": false,
        "description": "Link a file to an episode range in a series."
      },
      "Input.LinkSeriesMultipleBody": {
        "required": [
          "FileIDs",
          "RangeStart",
          "SeriesID"
        ],
        "type": "object",
        "properties": {
          "FileIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "An array of file identifiers to link in batch."
          },
          "SeriesID": {
            "type": "integer",
            "description": "The series identifier.",
            "format": "int32"
          },
          "RangeStart": {
            "minLength": 1,
            "type": "string",
            "description": "The start of the range of episodes to link to the file. Append a type prefix to use another episode type."
          },
          "SingleEpisode": {
            "type": "boolean",
            "description": "If true then files will be linked to a single episode instead of a range spanning the amount of files to add.",
            "default": false
          }
        },
        "additionalProperties": false,
        "description": "Link multiple files to an episode range in a series."
      },
      "Input.UnlinkEpisodesBody": {
        "required": [
          "EpisodeIDs"
        ],
        "type": "object",
        "properties": {
          "EpisodeIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "An array of episode identifiers to unlink from the file."
          }
        },
        "additionalProperties": false,
        "description": "Unlink the spesified episodes from a file."
      },
      "Libraries.Directory": {
        "type": "object",
        "properties": {
          "AllowSync": {
            "type": "boolean"
          },
          "Art": {
            "type": "string",
            "nullable": true
          },
          "Composite": {
            "type": "string",
            "nullable": true
          },
          "Filters": {
            "type": "boolean"
          },
          "Refreshing": {
            "type": "boolean"
          },
          "Thumb": {
            "type": "string",
            "nullable": true
          },
          "Key": {
            "type": "integer",
            "format": "int32"
          },
          "Type": {
            "$ref": "#/components/schemas/Plex.PlexType"
          },
          "Title": {
            "type": "string",
            "nullable": true
          },
          "Agent": {
            "type": "string",
            "nullable": true
          },
          "Scanner": {
            "type": "string",
            "nullable": true
          },
          "Language": {
            "type": "string",
            "nullable": true
          },
          "Uuid": {
            "type": "string",
            "nullable": true
          },
          "UpdatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "CreatedAt": {
            "type": "integer",
            "format": "int64"
          },
          "Location": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Libraries.Location"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Libraries.Location": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Path": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListResult[Common.SeriesRelation]": {
        "type": "object",
        "properties": {
          "Total": {
            "type": "integer",
            "description": "Total number of <typeparamref name=\"T\" /> entries that matched the\r\napplied filter.",
            "format": "int32"
          },
          "List": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.SeriesRelation"
            },
            "description": "A sliced page or the whole list of <typeparamref name=\"T\" /> entries.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list with the total count of <typeparamref name=\"T\" /> entries that\r\nmatch the filter and a sliced or the full list of <typeparamref name=\"T\" />\r\nentries."
      },
      "ListResult[Common.Tag]": {
        "type": "object",
        "properties": {
          "Total": {
            "type": "integer",
            "description": "Total number of <typeparamref name=\"T\" /> entries that matched the\r\napplied filter.",
            "format": "int32"
          },
          "List": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.Tag"
            },
            "description": "A sliced page or the whole list of <typeparamref name=\"T\" /> entries.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list with the total count of <typeparamref name=\"T\" /> entries that\r\nmatch the filter and a sliced or the full list of <typeparamref name=\"T\" />\r\nentries."
      },
      "ListResult[Episode.AniDB]": {
        "type": "object",
        "properties": {
          "Total": {
            "type": "integer",
            "description": "Total number of <typeparamref name=\"T\" /> entries that matched the\r\napplied filter.",
            "format": "int32"
          },
          "List": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Episode.AniDB"
            },
            "description": "A sliced page or the whole list of <typeparamref name=\"T\" /> entries.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list with the total count of <typeparamref name=\"T\" /> entries that\r\nmatch the filter and a sliced or the full list of <typeparamref name=\"T\" />\r\nentries."
      },
      "ListResult[Episode.TvDB]": {
        "type": "object",
        "properties": {
          "Total": {
            "type": "integer",
            "description": "Total number of <typeparamref name=\"T\" /> entries that matched the\r\napplied filter.",
            "format": "int32"
          },
          "List": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Episode.TvDB"
            },
            "description": "A sliced page or the whole list of <typeparamref name=\"T\" /> entries.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list with the total count of <typeparamref name=\"T\" /> entries that\r\nmatch the filter and a sliced or the full list of <typeparamref name=\"T\" />\r\nentries."
      },
      "ListResult[Series.AniDBRecommendedForYou]": {
        "type": "object",
        "properties": {
          "Total": {
            "type": "integer",
            "description": "Total number of <typeparamref name=\"T\" /> entries that matched the\r\napplied filter.",
            "format": "int32"
          },
          "List": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Series.AniDBRecommendedForYou"
            },
            "description": "A sliced page or the whole list of <typeparamref name=\"T\" /> entries.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list with the total count of <typeparamref name=\"T\" /> entries that\r\nmatch the filter and a sliced or the full list of <typeparamref name=\"T\" />\r\nentries."
      },
      "ListResult[Series.AniDBWithDate]": {
        "type": "object",
        "properties": {
          "Total": {
            "type": "integer",
            "description": "Total number of <typeparamref name=\"T\" /> entries that matched the\r\napplied filter.",
            "format": "int32"
          },
          "List": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Series.AniDBWithDate"
            },
            "description": "A sliced page or the whole list of <typeparamref name=\"T\" /> entries.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list with the total count of <typeparamref name=\"T\" /> entries that\r\nmatch the filter and a sliced or the full list of <typeparamref name=\"T\" />\r\nentries."
      },
      "ListResult[Series.AniDB]": {
        "type": "object",
        "properties": {
          "Total": {
            "type": "integer",
            "description": "Total number of <typeparamref name=\"T\" /> entries that matched the\r\napplied filter.",
            "format": "int32"
          },
          "List": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Series.AniDB"
            },
            "description": "A sliced page or the whole list of <typeparamref name=\"T\" /> entries.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list with the total count of <typeparamref name=\"T\" /> entries that\r\nmatch the filter and a sliced or the full list of <typeparamref name=\"T\" />\r\nentries."
      },
      "ListResult[Shoko.Episode]": {
        "type": "object",
        "properties": {
          "Total": {
            "type": "integer",
            "description": "Total number of <typeparamref name=\"T\" /> entries that matched the\r\napplied filter.",
            "format": "int32"
          },
          "List": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shoko.Episode"
            },
            "description": "A sliced page or the whole list of <typeparamref name=\"T\" /> entries.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list with the total count of <typeparamref name=\"T\" /> entries that\r\nmatch the filter and a sliced or the full list of <typeparamref name=\"T\" />\r\nentries."
      },
      "ListResult[Shoko.File]": {
        "type": "object",
        "properties": {
          "Total": {
            "type": "integer",
            "description": "Total number of <typeparamref name=\"T\" /> entries that matched the\r\napplied filter.",
            "format": "int32"
          },
          "List": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shoko.File"
            },
            "description": "A sliced page or the whole list of <typeparamref name=\"T\" /> entries.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list with the total count of <typeparamref name=\"T\" /> entries that\r\nmatch the filter and a sliced or the full list of <typeparamref name=\"T\" />\r\nentries."
      },
      "ListResult[Shoko.Filter]": {
        "type": "object",
        "properties": {
          "Total": {
            "type": "integer",
            "description": "Total number of <typeparamref name=\"T\" /> entries that matched the\r\napplied filter.",
            "format": "int32"
          },
          "List": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shoko.Filter"
            },
            "description": "A sliced page or the whole list of <typeparamref name=\"T\" /> entries.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list with the total count of <typeparamref name=\"T\" /> entries that\r\nmatch the filter and a sliced or the full list of <typeparamref name=\"T\" />\r\nentries."
      },
      "ListResult[Shoko.Group]": {
        "type": "object",
        "properties": {
          "Total": {
            "type": "integer",
            "description": "Total number of <typeparamref name=\"T\" /> entries that matched the\r\napplied filter.",
            "format": "int32"
          },
          "List": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shoko.Group"
            },
            "description": "A sliced page or the whole list of <typeparamref name=\"T\" /> entries.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list with the total count of <typeparamref name=\"T\" /> entries that\r\nmatch the filter and a sliced or the full list of <typeparamref name=\"T\" />\r\nentries."
      },
      "ListResult[Shoko.Series]": {
        "type": "object",
        "properties": {
          "Total": {
            "type": "integer",
            "description": "Total number of <typeparamref name=\"T\" /> entries that matched the\r\napplied filter.",
            "format": "int32"
          },
          "List": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shoko.Series"
            },
            "description": "A sliced page or the whole list of <typeparamref name=\"T\" /> entries.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list with the total count of <typeparamref name=\"T\" /> entries that\r\nmatch the filter and a sliced or the full list of <typeparamref name=\"T\" />\r\nentries."
      },
      "MediaInfo.AudioStreamInfo": {
        "type": "object",
        "properties": {
          "Channels": {
            "type": "integer",
            "description": "Number of total channels in the audio stream.",
            "format": "int32",
            "readOnly": true
          },
          "ChannelLayout": {
            "type": "string",
            "description": "A text representation of the layout of the channels available in the\r\naudio stream.",
            "nullable": true,
            "readOnly": true
          },
          "SamplesPerFrame": {
            "type": "integer",
            "description": "Samples per frame.",
            "format": "int32",
            "readOnly": true
          },
          "SamplingRate": {
            "type": "integer",
            "description": "Sampling rate of the audio.",
            "format": "int32",
            "readOnly": true
          },
          "CompressionMode": {
            "type": "string",
            "description": "Compression mode used.",
            "nullable": true,
            "readOnly": true
          },
          "BitRate": {
            "type": "integer",
            "description": "Bit-rate of the audio-stream.",
            "format": "int32",
            "readOnly": true
          },
          "BitRateMode": {
            "type": "string",
            "description": "Bit-rate mode of the audio stream.",
            "nullable": true,
            "readOnly": true
          },
          "BitDepth": {
            "type": "integer",
            "description": "Bit-depth of the audio stream.",
            "format": "int32",
            "readOnly": true
          },
          "ID": {
            "type": "integer",
            "description": "Local id for the stream.",
            "format": "int32"
          },
          "UID": {
            "type": "string",
            "description": "Unique id for the stream.",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Stream title, if available.",
            "nullable": true
          },
          "Order": {
            "type": "integer",
            "description": "Stream order.",
            "format": "int32"
          },
          "IsDefault": {
            "type": "boolean",
            "description": "True if this is the default stream of the given type."
          },
          "IsForced": {
            "type": "boolean",
            "description": "True if the stream is forced to be used."
          },
          "Language": {
            "$ref": "#/components/schemas/DataModels.TitleLanguage"
          },
          "LanguageCode": {
            "type": "string",
            "description": "3 character language code of the language of the stream.",
            "nullable": true,
            "readOnly": true
          },
          "Codec": {
            "$ref": "#/components/schemas/MediaInfo.StreamCodecInfo"
          },
          "Format": {
            "$ref": "#/components/schemas/MediaInfo.StreamFormatInfo"
          }
        },
        "additionalProperties": false
      },
      "MediaInfo.ChapterInfo": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "description": "Chapter title.",
            "nullable": true
          },
          "Timestamp": {
            "type": "string",
            "description": "Chapter timestamp.",
            "format": "date-span"
          }
        },
        "additionalProperties": false
      },
      "MediaInfo.StreamCodecInfo": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Codec name, if available.",
            "nullable": true,
            "readOnly": true
          },
          "Simplified": {
            "type": "string",
            "description": "Simplified codec id.",
            "nullable": true,
            "readOnly": true
          },
          "Raw": {
            "type": "string",
            "description": "Raw codec id.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MediaInfo.StreamFormatInfo": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of the format used.",
            "nullable": true,
            "readOnly": true
          },
          "Profile": {
            "type": "string",
            "description": "Profile name of the format used, if available.",
            "nullable": true,
            "readOnly": true
          },
          "Level": {
            "type": "string",
            "description": "Compression level of the format used, if available.",
            "nullable": true,
            "readOnly": true
          },
          "Settings": {
            "type": "string",
            "description": "Format settings, if available.",
            "nullable": true,
            "readOnly": true
          },
          "AdditionalFeatures": {
            "type": "string",
            "description": "Known additional features enabled for the format, if available.",
            "nullable": true,
            "readOnly": true
          },
          "Endianness": {
            "type": "string",
            "description": "Format edianness, if available.",
            "nullable": true,
            "readOnly": true
          },
          "Tier": {
            "type": "string",
            "description": "Format tier, if available.",
            "nullable": true,
            "readOnly": true
          },
          "Commercial": {
            "type": "string",
            "description": "Format commercial information, if available.",
            "nullable": true,
            "readOnly": true
          },
          "HDR": {
            "type": "string",
            "description": "HDR format information, if available.",
            "nullable": true,
            "readOnly": true
          },
          "HDRCompatibility": {
            "type": "string",
            "description": "HDR format compatibility informaiton, if available.",
            "nullable": true,
            "readOnly": true
          },
          "CABAC": {
            "type": "boolean",
            "description": "Context-adaptive binary arithmetic coding (CABAC).",
            "nullable": true,
            "readOnly": true
          },
          "BVOP": {
            "type": "boolean",
            "description": "Bi-direcitonal video object planes (BVOP).",
            "nullable": true,
            "readOnly": true
          },
          "QPel": {
            "type": "boolean",
            "description": "Quarter-pixel motion (Qpel).",
            "nullable": true,
            "readOnly": true
          },
          "GMC": {
            "type": "string",
            "description": "Global Motion Compensation (GMC) mode, if available.",
            "nullable": true,
            "readOnly": true
          },
          "ReferenceFrames": {
            "type": "integer",
            "description": "Reference frames count, if known.",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "MediaInfo.TextStreamInfo": {
        "type": "object",
        "properties": {
          "SubTitle": {
            "type": "string",
            "description": "Sub-title of the text stream.",
            "nullable": true,
            "readOnly": true
          },
          "IsExternal": {
            "type": "boolean",
            "description": "Not From MediaInfo. Is this an external sub file",
            "readOnly": true
          },
          "ExternalFilename": {
            "type": "string",
            "description": "The name of the external subtitle file if this is stream is from an\r\nexternal source. This field is only sent if Shoko.Server.API.v3.Models.Shoko.MediaInfo.TextStreamInfo.IsExternal\r\nis set to ```true```.",
            "nullable": true,
            "readOnly": true
          },
          "ID": {
            "type": "integer",
            "description": "Local id for the stream.",
            "format": "int32"
          },
          "UID": {
            "type": "string",
            "description": "Unique id for the stream.",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Stream title, if available.",
            "nullable": true
          },
          "Order": {
            "type": "integer",
            "description": "Stream order.",
            "format": "int32"
          },
          "IsDefault": {
            "type": "boolean",
            "description": "True if this is the default stream of the given type."
          },
          "IsForced": {
            "type": "boolean",
            "description": "True if the stream is forced to be used."
          },
          "Language": {
            "$ref": "#/components/schemas/DataModels.TitleLanguage"
          },
          "LanguageCode": {
            "type": "string",
            "description": "3 character language code of the language of the stream.",
            "nullable": true,
            "readOnly": true
          },
          "Codec": {
            "$ref": "#/components/schemas/MediaInfo.StreamCodecInfo"
          },
          "Format": {
            "$ref": "#/components/schemas/MediaInfo.StreamFormatInfo"
          }
        },
        "additionalProperties": false
      },
      "MediaInfo.VideoStreamInfo": {
        "type": "object",
        "properties": {
          "Width": {
            "type": "integer",
            "description": "Width of the video stream.",
            "format": "int32",
            "readOnly": true
          },
          "Height": {
            "type": "integer",
            "description": "Height of the video stream.",
            "format": "int32",
            "readOnly": true
          },
          "Resolution": {
            "type": "string",
            "description": "Standarized resolution.",
            "nullable": true,
            "readOnly": true
          },
          "PixelAspectRatio": {
            "type": "number",
            "description": "Pixel aspect-ratio.",
            "format": "double",
            "readOnly": true
          },
          "FrameRate": {
            "type": "number",
            "description": "Frame-rate.",
            "format": "double",
            "readOnly": true
          },
          "FrameRateMode": {
            "type": "string",
            "description": "Frame-rate mode.",
            "nullable": true,
            "readOnly": true
          },
          "FrameCount": {
            "type": "integer",
            "description": "Total number of frames in the video stream.",
            "format": "int32",
            "readOnly": true
          },
          "ScanType": {
            "type": "string",
            "description": "Scan-type. Interlaced or progressive.",
            "nullable": true,
            "readOnly": true
          },
          "ColorSpace": {
            "type": "string",
            "description": "Color-space.",
            "nullable": true,
            "readOnly": true
          },
          "ChromaSubsampling": {
            "type": "string",
            "description": "Chroma sub-sampling.",
            "nullable": true,
            "readOnly": true
          },
          "MatrixCoefficients": {
            "type": "string",
            "description": "Matrix co-efficients.",
            "nullable": true,
            "readOnly": true
          },
          "BitRate": {
            "type": "integer",
            "description": "Bit-rate of the video stream.",
            "format": "int32",
            "readOnly": true
          },
          "BitDepth": {
            "type": "integer",
            "description": "Bit-depth of the video stream.",
            "format": "int32",
            "readOnly": true
          },
          "ID": {
            "type": "integer",
            "description": "Local id for the stream.",
            "format": "int32"
          },
          "UID": {
            "type": "string",
            "description": "Unique id for the stream.",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Stream title, if available.",
            "nullable": true
          },
          "Order": {
            "type": "integer",
            "description": "Stream order.",
            "format": "int32"
          },
          "IsDefault": {
            "type": "boolean",
            "description": "True if this is the default stream of the given type."
          },
          "IsForced": {
            "type": "boolean",
            "description": "True if the stream is forced to be used."
          },
          "Language": {
            "$ref": "#/components/schemas/DataModels.TitleLanguage"
          },
          "LanguageCode": {
            "type": "string",
            "description": "3 character language code of the language of the stream.",
            "nullable": true,
            "readOnly": true
          },
          "Codec": {
            "$ref": "#/components/schemas/MediaInfo.StreamCodecInfo"
          },
          "Format": {
            "$ref": "#/components/schemas/MediaInfo.StreamFormatInfo"
          }
        },
        "additionalProperties": false
      },
      "Models.FileQualityPreferences": {
        "type": "object",
        "properties": {
          "Require10BitVideo": {
            "type": "boolean"
          },
          "MaxNumberOfFilesToKeep": {
            "type": "integer",
            "format": "int32"
          },
          "PreferredTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Enums.FileQualityFilterType"
            },
            "nullable": true
          },
          "PreferredAudioCodecs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "PreferredResolutions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "PreferredSubGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "PreferredVideoCodecs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "Prefer8BitVideo": {
            "type": "boolean"
          },
          "AllowDeletionOfImportedFiles": {
            "type": "boolean"
          },
          "RequiredTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Enums.FileQualityFilterType"
            },
            "nullable": true
          },
          "RequiredAudioCodecs": {
            "$ref": "#/components/schemas/FileQualityTypeListPair[List[System.String]]"
          },
          "RequiredAudioStreamCount": {
            "$ref": "#/components/schemas/FileQualityTypeListPair[System.Int32]"
          },
          "RequiredResolutions": {
            "$ref": "#/components/schemas/FileQualityTypeListPair[List[System.String]]"
          },
          "RequiredSources": {
            "$ref": "#/components/schemas/FileQualityTypeListPair[List[System.String]]"
          },
          "RequiredSubGroups": {
            "$ref": "#/components/schemas/FileQualityTypeListPair[List[System.String]]"
          },
          "RequiredSubStreamCount": {
            "$ref": "#/components/schemas/FileQualityTypeListPair[System.Int32]"
          },
          "RequiredVideoCodecs": {
            "$ref": "#/components/schemas/FileQualityTypeListPair[List[System.String]]"
          },
          "PreferredSources": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "AllowDeletingFilesWithMissingInfo": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Mvc.ProblemDetails": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Detail": {
            "type": "string",
            "nullable": true
          },
          "Instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "Operations.Operation": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Plex.PlexType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "Plex.TagHolder": {
        "type": "object",
        "properties": {
          "Tag": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlexEvent.PlexAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "thumb": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlexEvent.PlexBasicInfo": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "uuid": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlexEvent.PlexMetadata": {
        "required": [
          "grandParentGuid",
          "guid",
          "parentGuid"
        ],
        "type": "object",
        "properties": {
          "librarySectionType": {
            "type": "string",
            "nullable": true
          },
          "librarySectionTitle": {
            "type": "string",
            "nullable": true
          },
          "librarySectionId": {
            "type": "integer",
            "format": "int32"
          },
          "librarySectionKey": {
            "type": "string",
            "nullable": true
          },
          "guid": {
            "minLength": 1,
            "type": "string"
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "index": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "contentRating": {
            "type": "string",
            "nullable": true
          },
          "studio": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "originalTitle": {
            "type": "string",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          },
          "thumb": {
            "type": "string",
            "nullable": true
          },
          "art": {
            "type": "string",
            "nullable": true
          },
          "addedAt": {
            "type": "integer",
            "format": "int32"
          },
          "updatedAt": {
            "type": "integer",
            "format": "int32"
          },
          "lastViewedAt": {
            "type": "integer",
            "format": "int32"
          },
          "viewOffset": {
            "type": "integer",
            "format": "int32"
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Guid": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlexEvent.PlexProviderInfo"
            },
            "nullable": true
          },
          "parentGuid": {
            "minLength": 1,
            "type": "string"
          },
          "parentIndex": {
            "type": "integer",
            "format": "int32"
          },
          "parentTitle": {
            "type": "string",
            "nullable": true
          },
          "parentThumb": {
            "type": "string",
            "nullable": true
          },
          "grandParentGuid": {
            "minLength": 1,
            "type": "string"
          },
          "grandParentTitle": {
            "type": "string",
            "nullable": true
          },
          "grandparentThumb": {
            "type": "string",
            "nullable": true
          },
          "grandparentArt": {
            "type": "string",
            "nullable": true
          },
          "grandparentTheme": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlexEvent.PlexPlayerInfo": {
        "type": "object",
        "properties": {
          "local": {
            "type": "boolean"
          },
          "publicAddress": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "uuid": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlexEvent.PlexProviderInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlexWebhook.PlexEvent": {
        "required": [
          "Account",
          "event",
          "Metadata",
          "Server"
        ],
        "type": "object",
        "properties": {
          "event": {
            "minLength": 1,
            "type": "string"
          },
          "user": {
            "type": "boolean"
          },
          "owner": {
            "type": "boolean"
          },
          "Account": {
            "$ref": "#/components/schemas/PlexEvent.PlexAccount"
          },
          "Server": {
            "$ref": "#/components/schemas/PlexEvent.PlexBasicInfo"
          },
          "Player": {
            "$ref": "#/components/schemas/PlexEvent.PlexPlayerInfo"
          },
          "Metadata": {
            "$ref": "#/components/schemas/PlexEvent.PlexMetadata"
          }
        },
        "additionalProperties": false
      },
      "Role.CreatorRoleType": {
        "enum": [
          "Seiyuu",
          "Staff",
          "Studio",
          "Producer",
          "Director",
          "SeriesComposer",
          "CharacterDesign",
          "Music",
          "SourceWork"
        ],
        "type": "string"
      },
      "Role.Person": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Main Name, romanized if needed\r\nex. Sawano Hiroyuki"
          },
          "AlternateName": {
            "type": "string",
            "description": "Alternate Name, this can be any other name, whether kanji, an alias, etc\r\nex. 澤野弘之",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "A description, bio, etc\r\nex. Sawano Hiroyuki was born September 12, 1980 in Tokyo, Japan. He is a composer and arranger.",
            "nullable": true
          },
          "Image": {
            "$ref": "#/components/schemas/Common.Image"
          }
        },
        "additionalProperties": false,
        "description": "A generic person object with the name, altname, description, and image"
      },
      "Series.AniDB": {
        "required": [
          "ID",
          "Poster",
          "Title",
          "Titles",
          "Type"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "AniDB ID",
            "format": "int32"
          },
          "ShokoID": {
            "type": "integer",
            "description": "Shoko.Server.API.v3.Models.Shoko.Series ID if the series is available locally.",
            "format": "int32",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "description": "Series type. Series, OVA, Movie, etc"
          },
          "Title": {
            "minLength": 1,
            "type": "string",
            "description": "Main Title, usually matches x-jat"
          },
          "Titles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.Title"
            },
            "description": "There should always be at least one of these, the Shoko.Server.API.v3.Models.Shoko.Series.AniDB.Title."
          },
          "Description": {
            "type": "string",
            "description": "Description.",
            "nullable": true
          },
          "Restricted": {
            "type": "boolean",
            "description": "Restricted content. Mainly porn."
          },
          "Poster": {
            "$ref": "#/components/schemas/Common.Image"
          },
          "EpisodeCount": {
            "type": "integer",
            "description": "Number of Shoko.Server.API.v3.Models.Shoko.EpisodeType.Normal episodes contained within the series if it's known.",
            "format": "int32",
            "nullable": true
          },
          "Rating": {
            "$ref": "#/components/schemas/Common.Rating"
          },
          "UserApproval": {
            "$ref": "#/components/schemas/Common.Rating"
          },
          "Relation": {
            "$ref": "#/components/schemas/DataModels.RelationType"
          }
        },
        "additionalProperties": false,
        "description": "Basic anidb data across all anidb types."
      },
      "Series.AniDBRecommendedForYou": {
        "type": "object",
        "properties": {
          "Anime": {
            "$ref": "#/components/schemas/Series.AniDBWithDate"
          },
          "SimilarTo": {
            "type": "integer",
            "description": "Number of similar anime that resulted in this recommendation.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The result entries for the \"Recommended For You\" algorithm."
      },
      "Series.AniDBWithDate": {
        "required": [
          "AirDate",
          "ID",
          "Poster",
          "Title",
          "Titles",
          "Type"
        ],
        "type": "object",
        "properties": {
          "AirDate": {
            "type": "string",
            "description": "Air date (2013-02-27, shut up avael). Anything without an air date is going to be missing a lot of info.",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "description": "End date, can be omitted. Omitted means that it's still airing (2013-02-27)",
            "format": "date-time",
            "nullable": true
          },
          "ID": {
            "type": "integer",
            "description": "AniDB ID",
            "format": "int32"
          },
          "ShokoID": {
            "type": "integer",
            "description": "Shoko.Server.API.v3.Models.Shoko.Series ID if the series is available locally.",
            "format": "int32",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "description": "Series type. Series, OVA, Movie, etc"
          },
          "Title": {
            "minLength": 1,
            "type": "string",
            "description": "Main Title, usually matches x-jat"
          },
          "Titles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.Title"
            },
            "description": "There should always be at least one of these, the Shoko.Server.API.v3.Models.Shoko.Series.AniDB.Title."
          },
          "Description": {
            "type": "string",
            "description": "Description.",
            "nullable": true
          },
          "Restricted": {
            "type": "boolean",
            "description": "Restricted content. Mainly porn."
          },
          "Poster": {
            "$ref": "#/components/schemas/Common.Image"
          },
          "EpisodeCount": {
            "type": "integer",
            "description": "Number of Shoko.Server.API.v3.Models.Shoko.EpisodeType.Normal episodes contained within the series if it's known.",
            "format": "int32",
            "nullable": true
          },
          "Rating": {
            "$ref": "#/components/schemas/Common.Rating"
          },
          "UserApproval": {
            "$ref": "#/components/schemas/Common.Rating"
          },
          "Relation": {
            "$ref": "#/components/schemas/DataModels.RelationType"
          }
        },
        "additionalProperties": false,
        "description": "The AniDB Data model for series"
      },
      "Series.AutoMatchSettings": {
        "required": [
          "TMDB",
          "Trakt",
          "TvDB"
        ],
        "type": "object",
        "properties": {
          "TvDB": {
            "type": "boolean",
            "description": "Auto-match against TvDB."
          },
          "TMDB": {
            "type": "boolean",
            "description": "Auto-match against The Movie Database (TMDB)."
          },
          "Trakt": {
            "type": "boolean",
            "description": "Auto-match against Trakt."
          }
        },
        "additionalProperties": false,
        "description": "Auto-matching settings for the series."
      },
      "Series.Resource": {
        "required": [
          "Name",
          "Type",
          "URL"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "minLength": 1,
            "type": "string",
            "description": "Resource type."
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "site name"
          },
          "URL": {
            "minLength": 1,
            "type": "string",
            "description": "the url to the series page"
          }
        },
        "additionalProperties": false,
        "description": "A site link, as in hyperlink."
      },
      "Series.TvDB": {
        "required": [
          "ID",
          "Title"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "TvDB ID",
            "format": "int32"
          },
          "AirDate": {
            "type": "string",
            "description": "Air date (2013-02-27, shut up avael)",
            "format": "date-time",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "description": "End date, can be null. Null means that it's still airing (2013-02-27)",
            "format": "date-time",
            "nullable": true
          },
          "Title": {
            "minLength": 1,
            "type": "string",
            "description": "TvDB only supports one title"
          },
          "Description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "Season": {
            "type": "integer",
            "description": "TvDB Season. This value is not guaranteed to be even kind of accurate\r\nTvDB matchings and links affect this. Null means no match. 0 means specials",
            "format": "int32",
            "nullable": true
          },
          "Posters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.Image"
            },
            "description": "Posters",
            "nullable": true
          },
          "Fanarts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.Image"
            },
            "description": "Fanarts",
            "nullable": true
          },
          "Banners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.Image"
            },
            "description": "Banners",
            "nullable": true
          },
          "Rating": {
            "$ref": "#/components/schemas/Common.Rating"
          }
        },
        "additionalProperties": false,
        "description": "The TvDB Data model for series"
      },
      "SeriesRelation.RelationIDs": {
        "type": "object",
        "properties": {
          "Shoko": {
            "type": "integer",
            "description": "The ID of the Shoko.Server.API.v3.Models.Shoko.Series entry.",
            "format": "int32",
            "nullable": true
          },
          "AniDB": {
            "type": "integer",
            "description": "The ID of the Shoko.Server.API.v3.Models.Shoko.Series.AniDB entry.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Relation IDs."
      },
      "SeriesSizes.EpisodeTypeCounts": {
        "type": "object",
        "properties": {
          "Unknown": {
            "type": "integer",
            "format": "int32"
          },
          "Episodes": {
            "type": "integer",
            "format": "int32"
          },
          "Specials": {
            "type": "integer",
            "format": "int32"
          },
          "Credits": {
            "type": "integer",
            "format": "int32"
          },
          "Trailers": {
            "type": "integer",
            "format": "int32"
          },
          "Parodies": {
            "type": "integer",
            "format": "int32"
          },
          "Others": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Lists the count of each type of episode."
      },
      "SeriesSizes.FileSourceCounts": {
        "type": "object",
        "properties": {
          "Unknown": {
            "type": "integer",
            "format": "int32"
          },
          "Other": {
            "type": "integer",
            "format": "int32"
          },
          "TV": {
            "type": "integer",
            "format": "int32"
          },
          "DVD": {
            "type": "integer",
            "format": "int32"
          },
          "BluRay": {
            "type": "integer",
            "format": "int32"
          },
          "Web": {
            "type": "integer",
            "format": "int32"
          },
          "VHS": {
            "type": "integer",
            "format": "int32"
          },
          "VCD": {
            "type": "integer",
            "format": "int32"
          },
          "LaserDisc": {
            "type": "integer",
            "format": "int32"
          },
          "Camera": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Server.Hashes": {
        "type": "object",
        "properties": {
          "ED2K": {
            "type": "string",
            "nullable": true
          },
          "SHA1": {
            "type": "string",
            "nullable": true
          },
          "CRC32": {
            "type": "string",
            "nullable": true
          },
          "MD5": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Server.Scan": {
        "type": "object",
        "properties": {
          "ScanID": {
            "type": "integer",
            "format": "int32"
          },
          "CreationTIme": {
            "type": "string",
            "format": "date-time"
          },
          "ImportFolders": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ServerState.DatabaseBlockedInfo": {
        "type": "object",
        "properties": {
          "Progress": {
            "type": "number",
            "description": "Out of 100, the progress percentage, if available",
            "format": "double",
            "nullable": true
          },
          "Blocked": {
            "type": "boolean",
            "description": "Whether the system is blocked or not"
          },
          "Status": {
            "type": "string",
            "description": "A message about the blocked state",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServerStatus.StartupState": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "Shoko.ChildItems": {
        "type": "object",
        "properties": {
          "Folders": {
            "type": "integer",
            "format": "int32"
          },
          "Files": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Shoko.Drive": {
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/IO.DriveType"
          },
          "Path": {
            "type": "string",
            "nullable": true
          },
          "IsAccessible": {
            "type": "boolean",
            "default": false
          },
          "Sizes": {
            "$ref": "#/components/schemas/Shoko.ChildItems"
          }
        },
        "additionalProperties": false
      },
      "Shoko.DropFolderType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "Shoko.Episode": {
        "required": [
          "Name",
          "Size"
        ],
        "type": "object",
        "properties": {
          "IDs": {
            "$ref": "#/components/schemas/Episode.EpisodeIDs"
          },
          "Duration": {
            "type": "string",
            "description": "The duration of the episode.",
            "format": "date-span"
          },
          "ResumePosition": {
            "type": "string",
            "description": "Where to resume the next playback for the most recently watched file, if\r\nany. Otherwise `null` if no files for the episode have any resume\r\npositions.",
            "format": "date-span",
            "nullable": true
          },
          "Watched": {
            "type": "string",
            "description": "The last watched date and time for the current user for the most\r\nrecently watched file, if any. Or `null` if it is considered\r\n\"unwatched.\"",
            "format": "date-time",
            "nullable": true
          },
          "WatchCount": {
            "type": "integer",
            "description": "Total number of times the episode have been watched (till completion) by\r\nthe user across all files.",
            "format": "int32"
          },
          "IsHidden": {
            "type": "boolean",
            "description": "Episode is marked as \"ignored.\" Which means it won't be show up in the\r\napi unless explictly requested, and will not count against the unwatched\r\ncounts and missing counts for the series."
          },
          "AniDB": {
            "$ref": "#/components/schemas/Episode.AniDB"
          },
          "TvDB": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Episode.TvDB"
            },
            "description": "The Shoko.Server.API.v3.Models.Shoko.Episode.TvDB entries, if Shoko.Server.API.v3.Models.Common.DataSource.TvDB\r\nis included in the data to add.",
            "nullable": true
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "The server's title. This will use overrides, the naming settings, MainTitle if all else fails. This is a guaranteed fallback"
          },
          "Size": {
            "type": "integer",
            "description": "number of direct children (number of series in group, eps in series, etc)",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Shoko.File": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "The ID of the File. You'll need this to play it.",
            "format": "int32"
          },
          "SeriesIDs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File.SeriesCrossReference"
            },
            "description": "The Cross Reference Models for every episode this file belongs to, created in a reverse tree and\r\ntransformed back into a tree. Series -> Episode such that only episodes that this file is linked to are\r\nshown. In many cases, this will have arrays of 1 item",
            "nullable": true
          },
          "Size": {
            "type": "integer",
            "description": "The Filesize in bytes",
            "format": "int64"
          },
          "IsVariation": {
            "type": "boolean",
            "description": "If this file is marked as a file variation."
          },
          "Hashes": {
            "$ref": "#/components/schemas/Server.Hashes"
          },
          "Locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File.Location"
            },
            "description": "All of the Locations that this file exists in",
            "nullable": true
          },
          "Resolution": {
            "type": "string",
            "description": "Try to fit this file's resolution to something like 1080p, 480p, etc",
            "nullable": true
          },
          "Duration": {
            "type": "string",
            "description": "The duration of the file.",
            "format": "date-span"
          },
          "ResumePosition": {
            "type": "string",
            "description": "Where to resume the next playback.",
            "format": "date-span",
            "nullable": true
          },
          "Viewed": {
            "type": "string",
            "description": "The last time the current user viewed the file. Will be null if the user\r\nhave not viewed the file yet.",
            "format": "date-time",
            "nullable": true
          },
          "Watched": {
            "type": "string",
            "description": "The last time the current user watched the file until completion, or\r\notherwise marked the file was watched. Will be null if the user have not\r\nwatched the file yet.",
            "format": "date-time",
            "nullable": true
          },
          "Imported": {
            "type": "string",
            "description": "When the file was last imported. Usually is a file only imported once,\r\nbut there may be exceptions.",
            "format": "date-time",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "description": "The file creation date of this file",
            "format": "date-time"
          },
          "Updated": {
            "type": "string",
            "description": "When the file was last updated (e.g. the hashes were added/updated).",
            "format": "date-time"
          },
          "AniDB": {
            "$ref": "#/components/schemas/File.AniDB"
          },
          "MediaInfo": {
            "$ref": "#/components/schemas/Shoko.MediaInfo"
          }
        },
        "additionalProperties": false
      },
      "Shoko.FileSource": {
        "enum": [
          "Unknown",
          "Other",
          "TV",
          "DVD",
          "BluRay",
          "Web",
          "VHS",
          "VCD",
          "LaserDisc",
          "Camera"
        ],
        "type": "string"
      },
      "Shoko.Filter": {
        "required": [
          "Name",
          "Size"
        ],
        "type": "object",
        "properties": {
          "IDs": {
            "$ref": "#/components/schemas/Filter.FilterIDs"
          },
          "IsLocked": {
            "type": "boolean",
            "description": "Indicates the filter cannot be edited by a user."
          },
          "IsDirectory": {
            "type": "boolean",
            "description": "Indicates the filter should be a directory filter."
          },
          "IsInverted": {
            "type": "boolean",
            "description": "Indicates that the filter is inverted and all conditions applied\r\nto it will be used to exclude groups and series instead of\r\ninclude them."
          },
          "IsHidden": {
            "type": "boolean",
            "description": "Indicates the filter should be hidden unless explictly requested. This will hide the filter from the normal UIs."
          },
          "ApplyAtSeriesLevel": {
            "type": "boolean",
            "description": "Inidcates the filter should be applied at the series level.\r\nFilter conditions like like Seasons, Years, Tags, etc only count series individually, rather than by group."
          },
          "Conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.FilterCondition"
            },
            "description": "List of Conditions. Order doesn't matter.",
            "nullable": true
          },
          "Sorting": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter.SortingCriteria"
            },
            "description": "The sorting criteria. Order matters.",
            "nullable": true
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "The server's title. This will use overrides, the naming settings, MainTitle if all else fails. This is a guaranteed fallback"
          },
          "Size": {
            "type": "integer",
            "description": "number of direct children (number of series in group, eps in series, etc)",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "A Filter. This is how Shoko serves and organizes Series/Groups. They can be\r\nused to keep track of what you're watching and many other things."
      },
      "Shoko.Folder": {
        "type": "object",
        "properties": {
          "Path": {
            "type": "string",
            "nullable": true
          },
          "IsAccessible": {
            "type": "boolean",
            "default": false
          },
          "Sizes": {
            "$ref": "#/components/schemas/Shoko.ChildItems"
          }
        },
        "additionalProperties": false
      },
      "Shoko.Group": {
        "required": [
          "Name",
          "Size"
        ],
        "type": "object",
        "properties": {
          "IDs": {
            "$ref": "#/components/schemas/Group.GroupIDs"
          },
          "SortName": {
            "type": "string",
            "description": "The sort name for the group.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "A short description of the group.",
            "nullable": true
          },
          "HasCustomName": {
            "type": "boolean",
            "description": "Indicates the group has a custom name set, different from the default\r\nname of the main series in the group."
          },
          "HasCustomDescription": {
            "type": "boolean",
            "description": "Indicates the group has a custom description set, different from the\r\ndefault description of the main series in the group."
          },
          "Images": {
            "$ref": "#/components/schemas/Common.Images"
          },
          "Sizes": {
            "$ref": "#/components/schemas/Shoko.GroupSizes"
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "The server's title. This will use overrides, the naming settings, MainTitle if all else fails. This is a guaranteed fallback"
          },
          "Size": {
            "type": "integer",
            "description": "number of direct children (number of series in group, eps in series, etc)",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Group object, stores all of the group info. Groups are Shoko Internal Objects, so they are handled a bit differently"
      },
      "Shoko.GroupSizes": {
        "required": [
          "FileSources",
          "Local",
          "SeriesTypes",
          "Total"
        ],
        "type": "object",
        "properties": {
          "SeriesTypes": {
            "$ref": "#/components/schemas/GroupSizes.SeriesTypeCounts"
          },
          "SubGroups": {
            "type": "integer",
            "description": "Number of direct sub-groups within the group.",
            "format": "int32"
          },
          "Missing": {
            "type": "integer",
            "description": "Count of missing episodes that are not hidden.",
            "format": "int32"
          },
          "Hidden": {
            "type": "integer",
            "description": "Count of hidden episodes, be it available or missing.",
            "format": "int32"
          },
          "FileSources": {
            "$ref": "#/components/schemas/SeriesSizes.FileSourceCounts"
          },
          "Local": {
            "$ref": "#/components/schemas/SeriesSizes.EpisodeTypeCounts"
          },
          "Watched": {
            "$ref": "#/components/schemas/SeriesSizes.EpisodeTypeCounts"
          },
          "Total": {
            "$ref": "#/components/schemas/SeriesSizes.EpisodeTypeCounts"
          }
        },
        "additionalProperties": false,
        "description": "Downloaded, Watched, Total, etc"
      },
      "Shoko.ImportFolder": {
        "required": [
          "Name",
          "Size"
        ],
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "Import Folder ID",
            "format": "int32"
          },
          "WatchForNewFiles": {
            "type": "boolean",
            "description": "Is the Folder watched by the filesystem watcher"
          },
          "DropFolderType": {
            "$ref": "#/components/schemas/Shoko.DropFolderType"
          },
          "Path": {
            "type": "string",
            "description": "Path on the server where the import folder exists. For docker, it's inside the container, so it'll look excessively simple",
            "nullable": true
          },
          "FileSize": {
            "type": "integer",
            "description": "Total FileSize of the contents of the ImportFolder",
            "format": "int64"
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "The server's title. This will use overrides, the naming settings, MainTitle if all else fails. This is a guaranteed fallback"
          },
          "Size": {
            "type": "integer",
            "description": "number of direct children (number of series in group, eps in series, etc)",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Shoko.MediaInfo": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "description": "General title for the media.",
            "nullable": true,
            "readOnly": true
          },
          "Duration": {
            "type": "string",
            "description": "Overall duration of the media.",
            "format": "date-span",
            "readOnly": true
          },
          "BitRate": {
            "type": "integer",
            "description": "Overall bit-rate across all streams in the media container.",
            "format": "int32",
            "readOnly": true
          },
          "FrameRate": {
            "type": "number",
            "description": "Average frame-rate across all the streams in the media container.",
            "format": "double",
            "readOnly": true
          },
          "Encoded": {
            "type": "string",
            "description": "Date when encoding took place, if known.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "IsStreamable": {
            "type": "boolean",
            "description": "True if the media is streaming-friendly.",
            "readOnly": true
          },
          "FileExtension": {
            "type": "string",
            "description": "Common file extension for the media container format.",
            "nullable": true,
            "readOnly": true
          },
          "MediaContainer": {
            "type": "string",
            "description": "The media container format.",
            "nullable": true
          },
          "MediaContainerVersion": {
            "type": "integer",
            "description": "The media container format version.",
            "format": "int32",
            "readOnly": true
          },
          "Video": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaInfo.VideoStreamInfo"
            },
            "description": "Video streams in the media container.",
            "nullable": true,
            "readOnly": true
          },
          "Audio": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaInfo.AudioStreamInfo"
            },
            "description": "Audio streams in the media container.",
            "nullable": true,
            "readOnly": true
          },
          "Subtitles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaInfo.TextStreamInfo"
            },
            "description": "Sub-title (text) streams in the media container.",
            "nullable": true,
            "readOnly": true
          },
          "Chapters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaInfo.ChapterInfo"
            },
            "description": "Chapter information present in the media container.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Parsed information from a Shoko.Server.API.v3.Models.Shoko.MediaInfo.MediaContainer."
      },
      "Shoko.RenamerInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "Priority": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Enabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Shoko.Series": {
        "required": [
          "Name",
          "Size"
        ],
        "type": "object",
        "properties": {
          "IDs": {
            "$ref": "#/components/schemas/Shoko.SeriesIDs"
          },
          "Images": {
            "$ref": "#/components/schemas/Common.Images"
          },
          "UserRating": {
            "$ref": "#/components/schemas/Common.Rating"
          },
          "AirsOn": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.DayOfWeek"
            },
            "description": "The inferred days of the week this series airs on.",
            "nullable": true
          },
          "Links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Series.Resource"
            },
            "description": "links to series pages on various sites",
            "nullable": true
          },
          "Sizes": {
            "$ref": "#/components/schemas/Shoko.SeriesSizes"
          },
          "Created": {
            "type": "string",
            "description": "The time when the series was created, during the process of the first file being added",
            "format": "date-time"
          },
          "Updated": {
            "type": "string",
            "description": "The time when the series was last updated",
            "format": "date-time"
          },
          "AniDB": {
            "$ref": "#/components/schemas/Series.AniDBWithDate"
          },
          "TvDB": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Series.TvDB"
            },
            "description": "The Shoko.Server.API.v3.Models.Shoko.Series.TvDB entries, if Shoko.Server.API.v3.Models.Common.DataSource.TvDB\r\nis included in the data to add.",
            "nullable": true
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "The server's title. This will use overrides, the naming settings, MainTitle if all else fails. This is a guaranteed fallback"
          },
          "Size": {
            "type": "integer",
            "description": "number of direct children (number of series in group, eps in series, etc)",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Series object, stores all of the series info"
      },
      "Shoko.SeriesIDs": {
        "required": [
          "AniDB",
          "ID"
        ],
        "type": "object",
        "properties": {
          "ParentGroup": {
            "type": "integer",
            "description": "The ID of the direct parent group, if it has one.",
            "format": "int32"
          },
          "TopLevelGroup": {
            "type": "integer",
            "description": "The ID of the top-level (ancestor) group this series belongs to.",
            "format": "int32"
          },
          "AniDB": {
            "type": "integer",
            "description": "The AniDB ID",
            "format": "int32"
          },
          "TvDB": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The TvDB IDs",
            "nullable": true
          },
          "TMDB": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The Movie DB IDs",
            "nullable": true
          },
          "MAL": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The MyAnimeList IDs",
            "nullable": true
          },
          "TraktTv": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The TraktTv IDs",
            "nullable": true
          },
          "AniList": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The AniList IDs",
            "nullable": true
          },
          "ID": {
            "type": "integer",
            "description": "The Shoko internal ID, for easy lookup",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Shoko.SeriesSearchResult": {
        "required": [
          "Name",
          "Size"
        ],
        "type": "object",
        "properties": {
          "ExactMatch": {
            "type": "boolean",
            "description": "Indicates whether the search result is an exact match to the query."
          },
          "Index": {
            "type": "integer",
            "description": "Represents the position of the match within the sanitized string.\r\nThis property is only applicable when ExactMatch is set to true.\r\nA lower value indicates a match that occurs earlier in the string.",
            "format": "int32"
          },
          "Distance": {
            "type": "number",
            "description": "Represents the similarity measure between the sanitized query and the sanitized matched result.\r\nThis may be the sorensen-dice distance or the tag weight when comparing tags for a series.\r\nA lower value indicates a more similar match.",
            "format": "double"
          },
          "LengthDifference": {
            "type": "integer",
            "description": "Represents the absolute difference in length between the sanitized query and the sanitized matched result.\r\nA lower value indicates a match with a more similar length to the query.",
            "format": "int32"
          },
          "Match": {
            "type": "string",
            "description": "Contains the original matched substring from the original string.",
            "nullable": true
          },
          "IDs": {
            "$ref": "#/components/schemas/Shoko.SeriesIDs"
          },
          "Images": {
            "$ref": "#/components/schemas/Common.Images"
          },
          "UserRating": {
            "$ref": "#/components/schemas/Common.Rating"
          },
          "AirsOn": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.DayOfWeek"
            },
            "description": "The inferred days of the week this series airs on.",
            "nullable": true
          },
          "Links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Series.Resource"
            },
            "description": "links to series pages on various sites",
            "nullable": true
          },
          "Sizes": {
            "$ref": "#/components/schemas/Shoko.SeriesSizes"
          },
          "Created": {
            "type": "string",
            "description": "The time when the series was created, during the process of the first file being added",
            "format": "date-time"
          },
          "Updated": {
            "type": "string",
            "description": "The time when the series was last updated",
            "format": "date-time"
          },
          "AniDB": {
            "$ref": "#/components/schemas/Series.AniDBWithDate"
          },
          "TvDB": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Series.TvDB"
            },
            "description": "The Shoko.Server.API.v3.Models.Shoko.Series.TvDB entries, if Shoko.Server.API.v3.Models.Common.DataSource.TvDB\r\nis included in the data to add.",
            "nullable": true
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "The server's title. This will use overrides, the naming settings, MainTitle if all else fails. This is a guaranteed fallback"
          },
          "Size": {
            "type": "integer",
            "description": "number of direct children (number of series in group, eps in series, etc)",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "An Extended Series Model with Values for Search Results"
      },
      "Shoko.SeriesSizes": {
        "required": [
          "FileSources",
          "Local",
          "Total"
        ],
        "type": "object",
        "properties": {
          "Missing": {
            "type": "integer",
            "description": "Count of missing episodes that are not hidden.",
            "format": "int32"
          },
          "Hidden": {
            "type": "integer",
            "description": "Count of hidden episodes, be it available or missing.",
            "format": "int32"
          },
          "FileSources": {
            "$ref": "#/components/schemas/SeriesSizes.FileSourceCounts"
          },
          "Local": {
            "$ref": "#/components/schemas/SeriesSizes.EpisodeTypeCounts"
          },
          "Watched": {
            "$ref": "#/components/schemas/SeriesSizes.EpisodeTypeCounts"
          },
          "Total": {
            "$ref": "#/components/schemas/SeriesSizes.EpisodeTypeCounts"
          }
        },
        "additionalProperties": false,
        "description": "Downloaded, Watched, Total, etc"
      },
      "Shoko.ServerStatus": {
        "type": "object",
        "properties": {
          "StartupMessage": {
            "type": "string",
            "description": "The progress message for starting up",
            "nullable": true
          },
          "State": {
            "$ref": "#/components/schemas/ServerStatus.StartupState"
          },
          "Uptime": {
            "type": "string",
            "description": "Uptime in hh:mm:ss or null if not started. Uses hours may be greater than a day.",
            "format": "date-span",
            "nullable": true
          },
          "DatabaseBlocked": {
            "$ref": "#/components/schemas/ServerState.DatabaseBlockedInfo"
          }
        },
        "additionalProperties": false
      },
      "Shoko.User": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "The UserID, this is used in a lot of v1 and v2 endpoints, and it's needed for editing or removing a user",
            "format": "int32"
          },
          "Username": {
            "type": "string",
            "description": "Pretty Self-explanatory. It's the Username of the user",
            "nullable": true
          },
          "IsAdmin": {
            "type": "boolean",
            "description": "Is the user an admin. Admins can perform all operations, including modification of users"
          },
          "CommunitySites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Enums.CommunitySites"
            },
            "description": "This is a list of services that the user is set to use. AniDB, Trakt, and Plex, for example",
            "nullable": true
          },
          "RestrictedTags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Restricted tags. Any group/series containing any of these tags will be\r\nrendered inaccessible to the user.",
            "nullable": true
          },
          "Avatar": {
            "type": "string",
            "description": "The user's avatar as a base64 encoded data url if available. Otherwise\r\nan empty string.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "System.DayOfWeek": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "TagFilter.Filter": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          1073741824,
          2147483648
        ],
        "type": "integer",
        "format": "int64"
      },
      "core.AuthUser": {
        "required": [
          "device",
          "pass",
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "minLength": 1,
            "type": "string"
          },
          "pass": {
            "type": "string"
          },
          "device": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "type": "apiKey",
        "description": "Shoko API Key Header",
        "name": "apikey",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "ApiKey": [ ]
    }
  ],
  "tags": [
    {
      "name": "Debug",
      "description": "A controller with endpoints that should only be used while debugging.\r\nNot for general use."
    },
    {
      "name": "Init",
      "description": "The init controller. Use this for first time setup. Settings will also allow full control to the init user."
    },
    {
      "name": "ReverseTree",
      "description": "This Controller is intended to provide the reverse tree. It is used to get the series from episodes, etc.\r\nThis is to support filtering with Apply At Series Level and any other situations that might involve the need for it."
    },
    {
      "name": "Tree",
      "description": "This Controller is intended to provide the tree. An example would be \"api/v3/filter/4/group/12/series\".\r\nThis is to support filtering with Apply At Series Level and any other situations that might involve the need for it."
    }
  ]
}